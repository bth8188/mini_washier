
mini_washier.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000462  00800100  00002712  000027a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002712  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000354  00800562  00800562  00002c08  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002c08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002c64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003b0  00000000  00000000  00002ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005cdb  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000152b  00000000  00000000  00008d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000027a3  00000000  00000000  0000a25a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b90  00000000  00000000  0000ca00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b53  00000000  00000000  0000d590  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e93  00000000  00000000  0000e0e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  00011f76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	45 c5       	rjmp	.+2698   	; 0xa90 <__vector_1>
       6:	00 00       	nop
       8:	98 c5       	rjmp	.+2864   	; 0xb3a <__vector_2>
       a:	00 00       	nop
       c:	e5 c5       	rjmp	.+3018   	; 0xbd8 <__vector_3>
       e:	00 00       	nop
      10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
      12:	00 00       	nop
      14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
      16:	00 00       	nop
      18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
      22:	00 00       	nop
      24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
      26:	00 00       	nop
      28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
      32:	00 00       	nop
      34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
      36:	00 00       	nop
      38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	1d c6       	rjmp	.+3130   	; 0xc78 <__vector_15>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	15 e0       	ldi	r17, 0x05	; 5
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e1       	ldi	r30, 0x12	; 18
      a0:	f7 e2       	ldi	r31, 0x27	; 39
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 36       	cpi	r26, 0x62	; 98
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	28 e0       	ldi	r18, 0x08	; 8
      b4:	a2 e6       	ldi	r26, 0x62	; 98
      b6:	b5 e0       	ldi	r27, 0x05	; 5
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a6 3b       	cpi	r26, 0xB6	; 182
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	04 d6       	rcall	.+3080   	; 0xccc <main>
      c4:	0c 94 87 13 	jmp	0x270e	; 0x270e <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <ADC_Init>:
 */ 
#include "ADC.h"

void ADC_Init()
{
	ADMUX |= (1 << REFS0);	//AVCC를 기준전압으로 선택
      ca:	3e 9a       	sbi	0x07, 6	; 7
	
	ADCSRA |= 0X07;		//분주비 설정
      cc:	86 b1       	in	r24, 0x06	; 6
      ce:	87 60       	ori	r24, 0x07	; 7
      d0:	86 b9       	out	0x06, r24	; 6
	ADCSRA |= (1 << ADEN);		//ADC 활성화
      d2:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |= (1 << ADFR);		//프리러닝 모드
      d4:	35 9a       	sbi	0x06, 5	; 6
	
	ADCSRA |= (1 << ADSC);			//변환 시작
      d6:	36 9a       	sbi	0x06, 6	; 6
      d8:	08 95       	ret

000000da <read_ADC>:
}

int read_ADC(unsigned char channel)
{
	ADMUX = ((ADMUX & 0XE0) | channel);		//채널 선택
      da:	97 b1       	in	r25, 0x07	; 7
      dc:	90 7e       	andi	r25, 0xE0	; 224
      de:	89 2b       	or	r24, r25
      e0:	87 b9       	out	0x07, r24	; 7
	while(!(ADCSRA & (1 << ADIF)));		//변환종료 대기
      e2:	34 9b       	sbis	0x06, 4	; 6
      e4:	fe cf       	rjmp	.-4      	; 0xe2 <read_ADC+0x8>
	
	return ADC;			//10비트 값을 봔환
      e6:	84 b1       	in	r24, 0x04	; 4
      e8:	95 b1       	in	r25, 0x05	; 5
	
      ea:	08 95       	ret

000000ec <Button_Init>:

static uint8_t button_state[] = {0, 0, 0, 0, 0, 0, 0, 0};

void Button_Init()
{
	BUTTON_DDR &= ~(0xfe);  //DDR 입력 설정
      ec:	e4 e6       	ldi	r30, 0x64	; 100
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	80 81       	ld	r24, Z
      f2:	81 70       	andi	r24, 0x01	; 1
      f4:	80 83       	st	Z, r24
	DDRD &= ~(1 << 3);
      f6:	8b 98       	cbi	0x11, 3	; 17
      f8:	08 95       	ret

000000fa <button>:
}

int button(uint8_t _num)
{
      fa:	0f 93       	push	r16
      fc:	1f 93       	push	r17
      fe:	cf 93       	push	r28
     100:	df 93       	push	r29
		
	if( ((BUTTON_PIN & (1<<_num)) == 0) && (button_state[_num] == 0) )
     102:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
     106:	c8 2f       	mov	r28, r24
     108:	d0 e0       	ldi	r29, 0x00	; 0
     10a:	30 e0       	ldi	r19, 0x00	; 0
     10c:	08 2e       	mov	r0, r24
     10e:	02 c0       	rjmp	.+4      	; 0x114 <button+0x1a>
     110:	35 95       	asr	r19
     112:	27 95       	ror	r18
     114:	0a 94       	dec	r0
     116:	e2 f7       	brpl	.-8      	; 0x110 <button+0x16>
     118:	89 01       	movw	r16, r18
     11a:	01 70       	andi	r16, 0x01	; 1
     11c:	11 27       	eor	r17, r17
     11e:	20 fd       	sbrc	r18, 0
     120:	0f c0       	rjmp	.+30     	; 0x140 <button+0x46>
     122:	fe 01       	movw	r30, r28
     124:	ee 59       	subi	r30, 0x9E	; 158
     126:	fa 4f       	sbci	r31, 0xFA	; 250
     128:	90 81       	ld	r25, Z
     12a:	91 11       	cpse	r25, r1
     12c:	09 c0       	rjmp	.+18     	; 0x140 <button+0x46>
	{
		setbuzzer(2000);
     12e:	80 ed       	ldi	r24, 0xD0	; 208
     130:	97 e0       	ldi	r25, 0x07	; 7
     132:	ab d0       	rcall	.+342    	; 0x28a <setbuzzer>
		playbuzzer();
     134:	cb d0       	rcall	.+406    	; 0x2cc <playbuzzer>
     136:	ce 59       	subi	r28, 0x9E	; 158
		button_state[_num] = 1;
     138:	da 4f       	sbci	r29, 0xFA	; 250
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	88 83       	st	Y, r24
     13e:	22 c0       	rjmp	.+68     	; 0x184 <button+0x8a>
		return 0;
     140:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
	}
	else if( ((BUTTON_PIN & (1 << _num)) == (1 << _num)) && (button_state[_num] == 1) )
     144:	21 e0       	ldi	r18, 0x01	; 1
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	02 c0       	rjmp	.+4      	; 0x14e <button+0x54>
     14a:	22 0f       	add	r18, r18
     14c:	33 1f       	adc	r19, r19
     14e:	8a 95       	dec	r24
     150:	e2 f7       	brpl	.-8      	; 0x14a <button+0x50>
     152:	89 2f       	mov	r24, r25
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	82 23       	and	r24, r18
     158:	93 23       	and	r25, r19
     15a:	28 17       	cp	r18, r24
     15c:	39 07       	cpc	r19, r25
     15e:	69 f4       	brne	.+26     	; 0x17a <button+0x80>
     160:	fe 01       	movw	r30, r28
     162:	ee 59       	subi	r30, 0x9E	; 158
     164:	fa 4f       	sbci	r31, 0xFA	; 250
     166:	80 81       	ld	r24, Z
     168:	81 30       	cpi	r24, 0x01	; 1
     16a:	51 f4       	brne	.+20     	; 0x180 <button+0x86>
	{
		nobuzzer();
     16c:	9b d0       	rcall	.+310    	; 0x2a4 <nobuzzer>
     16e:	ce 59       	subi	r28, 0x9E	; 158
		button_state[_num] = 0;
     170:	da 4f       	sbci	r29, 0xFA	; 250
     172:	18 82       	st	Y, r1
     174:	01 e0       	ldi	r16, 0x01	; 1
		return 1;
     176:	10 e0       	ldi	r17, 0x00	; 0
     178:	05 c0       	rjmp	.+10     	; 0x184 <button+0x8a>
     17a:	00 e0       	ldi	r16, 0x00	; 0
	}
	return 0;
     17c:	10 e0       	ldi	r17, 0x00	; 0
     17e:	02 c0       	rjmp	.+4      	; 0x184 <button+0x8a>
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	10 e0       	ldi	r17, 0x00	; 0
     184:	c8 01       	movw	r24, r16
}
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	1f 91       	pop	r17
     18c:	0f 91       	pop	r16
     18e:	08 95       	ret

00000190 <timer_button>:
     190:	0f 93       	push	r16

int timer_button(uint8_t _num)
{
     192:	1f 93       	push	r17
     194:	cf 93       	push	r28
     196:	df 93       	push	r29
	
	if( ((BUTTON_PIN & (1<<_num)) == 0) && (button_state[_num] == 0) )
     198:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
     19c:	c8 2f       	mov	r28, r24
     19e:	d0 e0       	ldi	r29, 0x00	; 0
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	08 2e       	mov	r0, r24
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <timer_button+0x1a>
     1a6:	35 95       	asr	r19
     1a8:	27 95       	ror	r18
     1aa:	0a 94       	dec	r0
     1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <timer_button+0x16>
     1ae:	89 01       	movw	r16, r18
     1b0:	01 70       	andi	r16, 0x01	; 1
     1b2:	11 27       	eor	r17, r17
     1b4:	20 fd       	sbrc	r18, 0
     1b6:	0f c0       	rjmp	.+30     	; 0x1d6 <timer_button+0x46>
     1b8:	fe 01       	movw	r30, r28
     1ba:	ee 59       	subi	r30, 0x9E	; 158
     1bc:	fa 4f       	sbci	r31, 0xFA	; 250
     1be:	90 81       	ld	r25, Z
     1c0:	91 11       	cpse	r25, r1
     1c2:	09 c0       	rjmp	.+18     	; 0x1d6 <timer_button+0x46>
	{
		setbuzzer(2000);
     1c4:	80 ed       	ldi	r24, 0xD0	; 208
     1c6:	97 e0       	ldi	r25, 0x07	; 7
     1c8:	60 d0       	rcall	.+192    	; 0x28a <setbuzzer>
		playbuzzer();
     1ca:	80 d0       	rcall	.+256    	; 0x2cc <playbuzzer>
     1cc:	ce 59       	subi	r28, 0x9E	; 158
		button_state[_num] = 1;
     1ce:	da 4f       	sbci	r29, 0xFA	; 250
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	88 83       	st	Y, r24
     1d4:	49 c0       	rjmp	.+146    	; 0x268 <timer_button+0xd8>
		return 0;
     1d6:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
	}
	if( ((BUTTON_PIN & (1<<_num)) == 0) && (button_state[_num] == 1) )
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	08 2e       	mov	r0, r24
     1de:	02 c0       	rjmp	.+4      	; 0x1e4 <timer_button+0x54>
     1e0:	35 95       	asr	r19
     1e2:	27 95       	ror	r18
     1e4:	0a 94       	dec	r0
     1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <timer_button+0x50>
     1e8:	89 01       	movw	r16, r18
     1ea:	01 70       	andi	r16, 0x01	; 1
     1ec:	11 27       	eor	r17, r17
     1ee:	20 fd       	sbrc	r18, 0
     1f0:	16 c0       	rjmp	.+44     	; 0x21e <timer_button+0x8e>
     1f2:	ce 59       	subi	r28, 0x9E	; 158
     1f4:	da 4f       	sbci	r29, 0xFA	; 250
     1f6:	88 81       	ld	r24, Y
     1f8:	81 30       	cpi	r24, 0x01	; 1
     1fa:	a1 f5       	brne	.+104    	; 0x264 <timer_button+0xd4>
	{
		nobuzzer();
     1fc:	53 d0       	rcall	.+166    	; 0x2a4 <nobuzzer>
     1fe:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     200:	86 e7       	ldi	r24, 0x76	; 118
     202:	91 e0       	ldi	r25, 0x01	; 1
     204:	21 50       	subi	r18, 0x01	; 1
     206:	80 40       	sbci	r24, 0x00	; 0
     208:	90 40       	sbci	r25, 0x00	; 0
     20a:	e1 f7       	brne	.-8      	; 0x204 <timer_button+0x74>
     20c:	00 c0       	rjmp	.+0      	; 0x20e <timer_button+0x7e>
     20e:	00 00       	nop
		_delay_ms(30);
		setbuzzer(2000);
     210:	80 ed       	ldi	r24, 0xD0	; 208
     212:	97 e0       	ldi	r25, 0x07	; 7
     214:	3a d0       	rcall	.+116    	; 0x28a <setbuzzer>
		playbuzzer();
     216:	5a d0       	rcall	.+180    	; 0x2cc <playbuzzer>
     218:	01 e0       	ldi	r16, 0x01	; 1
		return 1;
     21a:	10 e0       	ldi	r17, 0x00	; 0
     21c:	25 c0       	rjmp	.+74     	; 0x268 <timer_button+0xd8>
     21e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
	}
	else if( ((BUTTON_PIN & (1 << _num)) == (1 << _num)) && (button_state[_num] == 1) )
     222:	21 e0       	ldi	r18, 0x01	; 1
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	02 c0       	rjmp	.+4      	; 0x22c <timer_button+0x9c>
     228:	22 0f       	add	r18, r18
     22a:	33 1f       	adc	r19, r19
     22c:	8a 95       	dec	r24
     22e:	e2 f7       	brpl	.-8      	; 0x228 <timer_button+0x98>
     230:	89 2f       	mov	r24, r25
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	82 23       	and	r24, r18
     236:	93 23       	and	r25, r19
     238:	28 17       	cp	r18, r24
     23a:	39 07       	cpc	r19, r25
     23c:	69 f4       	brne	.+26     	; 0x258 <timer_button+0xc8>
     23e:	fe 01       	movw	r30, r28
     240:	ee 59       	subi	r30, 0x9E	; 158
     242:	fa 4f       	sbci	r31, 0xFA	; 250
     244:	80 81       	ld	r24, Z
     246:	81 30       	cpi	r24, 0x01	; 1
     248:	51 f4       	brne	.+20     	; 0x25e <timer_button+0xce>
	{
		nobuzzer();
     24a:	2c d0       	rcall	.+88     	; 0x2a4 <nobuzzer>
     24c:	ce 59       	subi	r28, 0x9E	; 158
		button_state[_num] = 0;
     24e:	da 4f       	sbci	r29, 0xFA	; 250
     250:	18 82       	st	Y, r1
     252:	01 e0       	ldi	r16, 0x01	; 1
		return 1;
     254:	10 e0       	ldi	r17, 0x00	; 0
     256:	08 c0       	rjmp	.+16     	; 0x268 <timer_button+0xd8>
     258:	00 e0       	ldi	r16, 0x00	; 0
	}
	return 0;
     25a:	10 e0       	ldi	r17, 0x00	; 0
     25c:	05 c0       	rjmp	.+10     	; 0x268 <timer_button+0xd8>
     25e:	00 e0       	ldi	r16, 0x00	; 0
     260:	10 e0       	ldi	r17, 0x00	; 0
     262:	02 c0       	rjmp	.+4      	; 0x268 <timer_button+0xd8>
     264:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7e0063>
		_delay_ms(30);
		setbuzzer(2000);
		playbuzzer();
		return 1;
	}
	else if( ((BUTTON_PIN & (1 << _num)) == (1 << _num)) && (button_state[_num] == 1) )
     268:	c8 01       	movw	r24, r16
		nobuzzer();
		button_state[_num] = 0;
		return 1;
	}
	return 0;
}
     26a:	df 91       	pop	r29
     26c:	cf 91       	pop	r28
     26e:	1f 91       	pop	r17
     270:	0f 91       	pop	r16
     272:	08 95       	ret

00000274 <open_door>:
     274:	83 9b       	sbis	0x10, 3	; 16

int open_door()
{
	if( (PIND & (1 << 3)) == 0 ) return 0;
     276:	03 c0       	rjmp	.+6      	; 0x27e <open_door+0xa>
	else if( (PIND & (1 << 3)) == (1 << 3) ) return 1;
     278:	83 99       	sbic	0x10, 3	; 16
     27a:	04 c0       	rjmp	.+8      	; 0x284 <open_door+0x10>
     27c:	08 95       	ret
	return 0;
}

int open_door()
{
	if( (PIND & (1 << 3)) == 0 ) return 0;
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	08 95       	ret
	else if( (PIND & (1 << 3)) == (1 << 3) ) return 1;
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	08 95       	ret

0000028a <setbuzzer>:
	_delay_ms(150);
	cla_hertz(10, 7);
	_delay_ms(150);
	cla_hertz(3, 8);
	_delay_ms(300);
	nobuzzer();
     28a:	9c 01       	movw	r18, r24
     28c:	99 0f       	add	r25, r25
     28e:	44 0b       	sbc	r20, r20
     290:	55 0b       	sbc	r21, r21
     292:	60 e4       	ldi	r22, 0x40	; 64
     294:	72 e4       	ldi	r23, 0x42	; 66
     296:	8f e0       	ldi	r24, 0x0F	; 15
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__divmodsi4>
     29e:	3b bd       	out	0x2b, r19	; 43
     2a0:	2a bd       	out	0x2a, r18	; 42
     2a2:	08 95       	ret

000002a4 <nobuzzer>:
     2a4:	8f b5       	in	r24, 0x2f	; 47
     2a6:	8f 73       	andi	r24, 0x3F	; 63
     2a8:	8f bd       	out	0x2f, r24	; 47
     2aa:	08 95       	ret

000002ac <buzzerInit>:
     2ac:	bd 9a       	sbi	0x17, 5	; 23
     2ae:	8e b5       	in	r24, 0x2e	; 46
     2b0:	82 60       	ori	r24, 0x02	; 2
     2b2:	8e bd       	out	0x2e, r24	; 46
     2b4:	8e b5       	in	r24, 0x2e	; 46
     2b6:	88 60       	ori	r24, 0x08	; 8
     2b8:	8e bd       	out	0x2e, r24	; 46
     2ba:	8f b5       	in	r24, 0x2f	; 47
     2bc:	80 64       	ori	r24, 0x40	; 64
     2be:	8f bd       	out	0x2f, r24	; 47
     2c0:	88 ee       	ldi	r24, 0xE8	; 232
     2c2:	93 e0       	ldi	r25, 0x03	; 3
     2c4:	9b bd       	out	0x2b, r25	; 43
     2c6:	8a bd       	out	0x2a, r24	; 42
     2c8:	ed cf       	rjmp	.-38     	; 0x2a4 <nobuzzer>
     2ca:	08 95       	ret

000002cc <playbuzzer>:
     2cc:	8f b5       	in	r24, 0x2f	; 47
     2ce:	80 64       	ori	r24, 0x40	; 64
     2d0:	8f bd       	out	0x2f, r24	; 47
     2d2:	08 95       	ret

000002d4 <cla_hertz>:
     2d4:	88 0f       	add	r24, r24
     2d6:	99 1f       	adc	r25, r25
     2d8:	88 0f       	add	r24, r24
     2da:	99 1f       	adc	r25, r25
     2dc:	88 0f       	add	r24, r24
     2de:	99 1f       	adc	r25, r25
     2e0:	fc 01       	movw	r30, r24
     2e2:	e6 0f       	add	r30, r22
     2e4:	f7 1f       	adc	r31, r23
     2e6:	ee 0f       	add	r30, r30
     2e8:	ff 1f       	adc	r31, r31
     2ea:	ee 0f       	add	r30, r30
     2ec:	ff 1f       	adc	r31, r31
     2ee:	e9 59       	subi	r30, 0x99	; 153
     2f0:	fe 4f       	sbci	r31, 0xFE	; 254
     2f2:	60 81       	ld	r22, Z
     2f4:	71 81       	ldd	r23, Z+1	; 0x01
     2f6:	82 81       	ldd	r24, Z+2	; 0x02
     2f8:	93 81       	ldd	r25, Z+3	; 0x03
     2fa:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <__fixsfsi>
     2fe:	9b 01       	movw	r18, r22
     300:	77 0f       	add	r23, r23
     302:	44 0b       	sbc	r20, r20
     304:	55 0b       	sbc	r21, r21
     306:	60 e4       	ldi	r22, 0x40	; 64
     308:	72 e4       	ldi	r23, 0x42	; 66
     30a:	8f e0       	ldi	r24, 0x0F	; 15
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <__divmodsi4>
     312:	3b bd       	out	0x2b, r19	; 43
     314:	2a bd       	out	0x2a, r18	; 42
     316:	08 95       	ret

00000318 <start_sound>:
     318:	64 e0       	ldi	r22, 0x04	; 4
     31a:	70 e0       	ldi	r23, 0x00	; 0
     31c:	88 e0       	ldi	r24, 0x08	; 8
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	d9 df       	rcall	.-78     	; 0x2d4 <cla_hertz>
     322:	d4 df       	rcall	.-88     	; 0x2cc <playbuzzer>
     324:	2f ef       	ldi	r18, 0xFF	; 255
     326:	85 ea       	ldi	r24, 0xA5	; 165
     328:	9e e0       	ldi	r25, 0x0E	; 14
     32a:	21 50       	subi	r18, 0x01	; 1
     32c:	80 40       	sbci	r24, 0x00	; 0
     32e:	90 40       	sbci	r25, 0x00	; 0
     330:	e1 f7       	brne	.-8      	; 0x32a <start_sound+0x12>
     332:	00 c0       	rjmp	.+0      	; 0x334 <start_sound+0x1c>
     334:	00 00       	nop
     336:	64 e0       	ldi	r22, 0x04	; 4
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	85 e0       	ldi	r24, 0x05	; 5
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	ca df       	rcall	.-108    	; 0x2d4 <cla_hertz>
     340:	2f ef       	ldi	r18, 0xFF	; 255
     342:	85 ea       	ldi	r24, 0xA5	; 165
     344:	9e e0       	ldi	r25, 0x0E	; 14
     346:	21 50       	subi	r18, 0x01	; 1
     348:	80 40       	sbci	r24, 0x00	; 0
     34a:	90 40       	sbci	r25, 0x00	; 0
     34c:	e1 f7       	brne	.-8      	; 0x346 <start_sound+0x2e>
     34e:	00 c0       	rjmp	.+0      	; 0x350 <start_sound+0x38>
     350:	00 00       	nop
     352:	64 e0       	ldi	r22, 0x04	; 4
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	87 e0       	ldi	r24, 0x07	; 7
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	bc df       	rcall	.-136    	; 0x2d4 <cla_hertz>
     35c:	2f ef       	ldi	r18, 0xFF	; 255
     35e:	85 ea       	ldi	r24, 0xA5	; 165
     360:	9e e0       	ldi	r25, 0x0E	; 14
     362:	21 50       	subi	r18, 0x01	; 1
     364:	80 40       	sbci	r24, 0x00	; 0
     366:	90 40       	sbci	r25, 0x00	; 0
     368:	e1 f7       	brne	.-8      	; 0x362 <start_sound+0x4a>
     36a:	00 c0       	rjmp	.+0      	; 0x36c <start_sound+0x54>
     36c:	00 00       	nop
     36e:	64 e0       	ldi	r22, 0x04	; 4
     370:	70 e0       	ldi	r23, 0x00	; 0
     372:	89 e0       	ldi	r24, 0x09	; 9
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	ae df       	rcall	.-164    	; 0x2d4 <cla_hertz>
     378:	2f ef       	ldi	r18, 0xFF	; 255
     37a:	85 ea       	ldi	r24, 0xA5	; 165
     37c:	9e e0       	ldi	r25, 0x0E	; 14
     37e:	21 50       	subi	r18, 0x01	; 1
     380:	80 40       	sbci	r24, 0x00	; 0
     382:	90 40       	sbci	r25, 0x00	; 0
     384:	e1 f7       	brne	.-8      	; 0x37e <start_sound+0x66>
     386:	00 c0       	rjmp	.+0      	; 0x388 <start_sound+0x70>
     388:	00 00       	nop
     38a:	8c cf       	rjmp	.-232    	; 0x2a4 <nobuzzer>
     38c:	08 95       	ret

0000038e <off_sound>:
}

void off_sound()
{
	cla_hertz(11, 4);
     38e:	64 e0       	ldi	r22, 0x04	; 4
     390:	70 e0       	ldi	r23, 0x00	; 0
     392:	8b e0       	ldi	r24, 0x0B	; 11
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	9e df       	rcall	.-196    	; 0x2d4 <cla_hertz>
	playbuzzer();
     398:	99 df       	rcall	.-206    	; 0x2cc <playbuzzer>
     39a:	2f ef       	ldi	r18, 0xFF	; 255
     39c:	85 ea       	ldi	r24, 0xA5	; 165
     39e:	9e e0       	ldi	r25, 0x0E	; 14
     3a0:	21 50       	subi	r18, 0x01	; 1
     3a2:	80 40       	sbci	r24, 0x00	; 0
     3a4:	90 40       	sbci	r25, 0x00	; 0
     3a6:	e1 f7       	brne	.-8      	; 0x3a0 <off_sound+0x12>
     3a8:	00 c0       	rjmp	.+0      	; 0x3aa <off_sound+0x1c>
     3aa:	00 00       	nop
     3ac:	64 e0       	ldi	r22, 0x04	; 4
	_delay_ms(300);
	cla_hertz(9, 4);
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	89 e0       	ldi	r24, 0x09	; 9
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	8f df       	rcall	.-226    	; 0x2d4 <cla_hertz>
     3b6:	2f ef       	ldi	r18, 0xFF	; 255
     3b8:	85 ea       	ldi	r24, 0xA5	; 165
     3ba:	9e e0       	ldi	r25, 0x0E	; 14
     3bc:	21 50       	subi	r18, 0x01	; 1
     3be:	80 40       	sbci	r24, 0x00	; 0
     3c0:	90 40       	sbci	r25, 0x00	; 0
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <off_sound+0x2e>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <off_sound+0x38>
     3c6:	00 00       	nop
     3c8:	64 e0       	ldi	r22, 0x04	; 4
	_delay_ms(300);
	cla_hertz(7, 4);
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	87 e0       	ldi	r24, 0x07	; 7
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	81 df       	rcall	.-254    	; 0x2d4 <cla_hertz>
     3d2:	2f ef       	ldi	r18, 0xFF	; 255
     3d4:	85 ea       	ldi	r24, 0xA5	; 165
     3d6:	9e e0       	ldi	r25, 0x0E	; 14
     3d8:	21 50       	subi	r18, 0x01	; 1
     3da:	80 40       	sbci	r24, 0x00	; 0
     3dc:	90 40       	sbci	r25, 0x00	; 0
     3de:	e1 f7       	brne	.-8      	; 0x3d8 <off_sound+0x4a>
     3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <off_sound+0x54>
     3e2:	00 00       	nop
     3e4:	64 e0       	ldi	r22, 0x04	; 4
	_delay_ms(300);
	cla_hertz(5, 4);
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	85 e0       	ldi	r24, 0x05	; 5
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	73 df       	rcall	.-282    	; 0x2d4 <cla_hertz>
     3ee:	2f ef       	ldi	r18, 0xFF	; 255
     3f0:	85 ea       	ldi	r24, 0xA5	; 165
     3f2:	9e e0       	ldi	r25, 0x0E	; 14
     3f4:	21 50       	subi	r18, 0x01	; 1
     3f6:	80 40       	sbci	r24, 0x00	; 0
     3f8:	90 40       	sbci	r25, 0x00	; 0
     3fa:	e1 f7       	brne	.-8      	; 0x3f4 <off_sound+0x66>
     3fc:	00 c0       	rjmp	.+0      	; 0x3fe <off_sound+0x70>
     3fe:	00 00       	nop
	_delay_ms(300);
	nobuzzer();
     400:	51 cf       	rjmp	.-350    	; 0x2a4 <nobuzzer>
     402:	08 95       	ret

00000404 <bear_sound>:
     404:	ef 92       	push	r14
}

void bear_sound()
{
     406:	ff 92       	push	r15
     408:	0f 93       	push	r16
     40a:	1f 93       	push	r17
     40c:	cf 93       	push	r28
     40e:	df 93       	push	r29
	nobuzzer();
     410:	49 df       	rcall	.-366    	; 0x2a4 <nobuzzer>
}

void setbuzzer(int note)
{
	int ocr_value = 1000000 / note;
	OCR1A = ocr_value;
     412:	c8 e8       	ldi	r28, 0x88	; 136
     414:	d1 e0       	ldi	r29, 0x01	; 1
     416:	db bd       	out	0x2b, r29	; 43
void bear_sound()
{
	nobuzzer();
	
	setbuzzer(2551); //도(4)
	playbuzzer();
     418:	ca bd       	out	0x2a, r28	; 42
     41a:	58 df       	rcall	.-336    	; 0x2cc <playbuzzer>
     41c:	2f ef       	ldi	r18, 0xFF	; 255
     41e:	87 e8       	ldi	r24, 0x87	; 135
     420:	93 e1       	ldi	r25, 0x13	; 19
     422:	21 50       	subi	r18, 0x01	; 1
     424:	80 40       	sbci	r24, 0x00	; 0
     426:	90 40       	sbci	r25, 0x00	; 0
     428:	e1 f7       	brne	.-8      	; 0x422 <bear_sound+0x1e>
     42a:	00 c0       	rjmp	.+0      	; 0x42c <bear_sound+0x28>
	_delay_ms(400);
	nobuzzer();
     42c:	00 00       	nop
     42e:	3a df       	rcall	.-396    	; 0x2a4 <nobuzzer>
     430:	2f ef       	ldi	r18, 0xFF	; 255
     432:	86 e7       	ldi	r24, 0x76	; 118
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	21 50       	subi	r18, 0x01	; 1
     438:	80 40       	sbci	r24, 0x00	; 0
     43a:	90 40       	sbci	r25, 0x00	; 0
     43c:	e1 f7       	brne	.-8      	; 0x436 <bear_sound+0x32>
     43e:	00 c0       	rjmp	.+0      	; 0x440 <bear_sound+0x3c>
}

void setbuzzer(int note)
{
	int ocr_value = 1000000 / note;
	OCR1A = ocr_value;
     440:	00 00       	nop
     442:	db bd       	out	0x2b, r29	; 43
	_delay_ms(400);
	nobuzzer();
	_delay_ms(30);
	
	setbuzzer(2551); //도(2)
	playbuzzer();
     444:	ca bd       	out	0x2a, r28	; 42
     446:	42 df       	rcall	.-380    	; 0x2cc <playbuzzer>
     448:	2f ef       	ldi	r18, 0xFF	; 255
     44a:	83 ec       	ldi	r24, 0xC3	; 195
     44c:	99 e0       	ldi	r25, 0x09	; 9
     44e:	21 50       	subi	r18, 0x01	; 1
     450:	80 40       	sbci	r24, 0x00	; 0
     452:	90 40       	sbci	r25, 0x00	; 0
     454:	e1 f7       	brne	.-8      	; 0x44e <bear_sound+0x4a>
     456:	00 c0       	rjmp	.+0      	; 0x458 <bear_sound+0x54>
	_delay_ms(200);
	nobuzzer();
     458:	00 00       	nop
     45a:	24 df       	rcall	.-440    	; 0x2a4 <nobuzzer>
     45c:	2f ef       	ldi	r18, 0xFF	; 255
     45e:	86 e7       	ldi	r24, 0x76	; 118
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	21 50       	subi	r18, 0x01	; 1
     464:	80 40       	sbci	r24, 0x00	; 0
     466:	90 40       	sbci	r25, 0x00	; 0
     468:	e1 f7       	brne	.-8      	; 0x462 <bear_sound+0x5e>
     46a:	00 c0       	rjmp	.+0      	; 0x46c <bear_sound+0x68>
}

void setbuzzer(int note)
{
	int ocr_value = 1000000 / note;
	OCR1A = ocr_value;
     46c:	00 00       	nop
     46e:	db bd       	out	0x2b, r29	; 43
	_delay_ms(200);
	nobuzzer();
	_delay_ms(30);
	
	setbuzzer(2551); //도(2)
	playbuzzer();
     470:	ca bd       	out	0x2a, r28	; 42
     472:	2c df       	rcall	.-424    	; 0x2cc <playbuzzer>
     474:	2f ef       	ldi	r18, 0xFF	; 255
     476:	83 ec       	ldi	r24, 0xC3	; 195
     478:	99 e0       	ldi	r25, 0x09	; 9
     47a:	21 50       	subi	r18, 0x01	; 1
     47c:	80 40       	sbci	r24, 0x00	; 0
     47e:	90 40       	sbci	r25, 0x00	; 0
     480:	e1 f7       	brne	.-8      	; 0x47a <bear_sound+0x76>
     482:	00 c0       	rjmp	.+0      	; 0x484 <bear_sound+0x80>
	_delay_ms(200);
	nobuzzer();
     484:	00 00       	nop
     486:	0e df       	rcall	.-484    	; 0x2a4 <nobuzzer>
     488:	2f ef       	ldi	r18, 0xFF	; 255
     48a:	86 e7       	ldi	r24, 0x76	; 118
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	21 50       	subi	r18, 0x01	; 1
     490:	80 40       	sbci	r24, 0x00	; 0
     492:	90 40       	sbci	r25, 0x00	; 0
     494:	e1 f7       	brne	.-8      	; 0x48e <bear_sound+0x8a>
     496:	00 c0       	rjmp	.+0      	; 0x498 <bear_sound+0x94>
}

void setbuzzer(int note)
{
	int ocr_value = 1000000 / note;
	OCR1A = ocr_value;
     498:	00 00       	nop
     49a:	db bd       	out	0x2b, r29	; 43
	_delay_ms(200);
	nobuzzer();
	_delay_ms(30);
	
	setbuzzer(2551); //도(4)
	playbuzzer();
     49c:	ca bd       	out	0x2a, r28	; 42
     49e:	16 df       	rcall	.-468    	; 0x2cc <playbuzzer>
     4a0:	2f ef       	ldi	r18, 0xFF	; 255
     4a2:	87 e8       	ldi	r24, 0x87	; 135
     4a4:	93 e1       	ldi	r25, 0x13	; 19
     4a6:	21 50       	subi	r18, 0x01	; 1
     4a8:	80 40       	sbci	r24, 0x00	; 0
     4aa:	90 40       	sbci	r25, 0x00	; 0
     4ac:	e1 f7       	brne	.-8      	; 0x4a6 <bear_sound+0xa2>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <bear_sound+0xac>
	_delay_ms(400);
	nobuzzer();
     4b0:	00 00       	nop
     4b2:	f8 de       	rcall	.-528    	; 0x2a4 <nobuzzer>
     4b4:	2f ef       	ldi	r18, 0xFF	; 255
     4b6:	86 e7       	ldi	r24, 0x76	; 118
     4b8:	91 e0       	ldi	r25, 0x01	; 1
     4ba:	21 50       	subi	r18, 0x01	; 1
     4bc:	80 40       	sbci	r24, 0x00	; 0
     4be:	90 40       	sbci	r25, 0x00	; 0
     4c0:	e1 f7       	brne	.-8      	; 0x4ba <bear_sound+0xb6>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <bear_sound+0xc0>
}

void setbuzzer(int note)
{
	int ocr_value = 1000000 / note;
	OCR1A = ocr_value;
     4c4:	00 00       	nop
     4c6:	db bd       	out	0x2b, r29	; 43
	_delay_ms(400);
	nobuzzer();
	_delay_ms(30);
	
	setbuzzer(2551); //도(4)
	playbuzzer();
     4c8:	ca bd       	out	0x2a, r28	; 42
     4ca:	00 df       	rcall	.-512    	; 0x2cc <playbuzzer>
     4cc:	2f ef       	ldi	r18, 0xFF	; 255
     4ce:	87 e8       	ldi	r24, 0x87	; 135
     4d0:	93 e1       	ldi	r25, 0x13	; 19
     4d2:	21 50       	subi	r18, 0x01	; 1
     4d4:	80 40       	sbci	r24, 0x00	; 0
     4d6:	90 40       	sbci	r25, 0x00	; 0
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <bear_sound+0xce>
     4da:	00 c0       	rjmp	.+0      	; 0x4dc <bear_sound+0xd8>
	_delay_ms(400);
	nobuzzer();
     4dc:	00 00       	nop
     4de:	e2 de       	rcall	.-572    	; 0x2a4 <nobuzzer>
     4e0:	2f ef       	ldi	r18, 0xFF	; 255
     4e2:	86 e7       	ldi	r24, 0x76	; 118
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	21 50       	subi	r18, 0x01	; 1
     4e8:	80 40       	sbci	r24, 0x00	; 0
     4ea:	90 40       	sbci	r25, 0x00	; 0
     4ec:	e1 f7       	brne	.-8      	; 0x4e6 <bear_sound+0xe2>
     4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <bear_sound+0xec>
}

void setbuzzer(int note)
{
	int ocr_value = 1000000 / note;
	OCR1A = ocr_value;
     4f0:	00 00       	nop
     4f2:	0f 2e       	mov	r0, r31
     4f4:	fa e4       	ldi	r31, 0x4A	; 74
     4f6:	ef 2e       	mov	r14, r31
     4f8:	ff 24       	eor	r15, r15
     4fa:	f3 94       	inc	r15
     4fc:	f0 2d       	mov	r31, r0
	_delay_ms(400);
	nobuzzer();
	_delay_ms(30);
	
	setbuzzer(3030); //미(4)
	playbuzzer();
     4fe:	fb bc       	out	0x2b, r15	; 43
     500:	ea bc       	out	0x2a, r14	; 42
     502:	e4 de       	rcall	.-568    	; 0x2cc <playbuzzer>
     504:	2f ef       	ldi	r18, 0xFF	; 255
     506:	87 e8       	ldi	r24, 0x87	; 135
     508:	93 e1       	ldi	r25, 0x13	; 19
     50a:	21 50       	subi	r18, 0x01	; 1
     50c:	80 40       	sbci	r24, 0x00	; 0
     50e:	90 40       	sbci	r25, 0x00	; 0
     510:	e1 f7       	brne	.-8      	; 0x50a <bear_sound+0x106>
     512:	00 c0       	rjmp	.+0      	; 0x514 <bear_sound+0x110>
	_delay_ms(400);
	nobuzzer();
     514:	00 00       	nop
     516:	c6 de       	rcall	.-628    	; 0x2a4 <nobuzzer>
     518:	2f ef       	ldi	r18, 0xFF	; 255
     51a:	86 e7       	ldi	r24, 0x76	; 118
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	21 50       	subi	r18, 0x01	; 1
     520:	80 40       	sbci	r24, 0x00	; 0
     522:	90 40       	sbci	r25, 0x00	; 0
     524:	e1 f7       	brne	.-8      	; 0x51e <bear_sound+0x11a>
     526:	00 c0       	rjmp	.+0      	; 0x528 <bear_sound+0x124>
}

void setbuzzer(int note)
{
	int ocr_value = 1000000 / note;
	OCR1A = ocr_value;
     528:	00 00       	nop
     52a:	06 e0       	ldi	r16, 0x06	; 6
     52c:	11 e0       	ldi	r17, 0x01	; 1
	_delay_ms(400);
	nobuzzer();
	_delay_ms(30);
	
	setbuzzer(3816); //솔(2)
	playbuzzer();
     52e:	1b bd       	out	0x2b, r17	; 43
     530:	0a bd       	out	0x2a, r16	; 42
     532:	cc de       	rcall	.-616    	; 0x2cc <playbuzzer>
     534:	2f ef       	ldi	r18, 0xFF	; 255
     536:	83 ec       	ldi	r24, 0xC3	; 195
     538:	99 e0       	ldi	r25, 0x09	; 9
     53a:	21 50       	subi	r18, 0x01	; 1
     53c:	80 40       	sbci	r24, 0x00	; 0
     53e:	90 40       	sbci	r25, 0x00	; 0
     540:	e1 f7       	brne	.-8      	; 0x53a <bear_sound+0x136>
	_delay_ms(200);
	nobuzzer();
     542:	00 c0       	rjmp	.+0      	; 0x544 <bear_sound+0x140>
     544:	00 00       	nop
     546:	ae de       	rcall	.-676    	; 0x2a4 <nobuzzer>
     548:	2f ef       	ldi	r18, 0xFF	; 255
     54a:	86 e7       	ldi	r24, 0x76	; 118
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	21 50       	subi	r18, 0x01	; 1
     550:	80 40       	sbci	r24, 0x00	; 0
     552:	90 40       	sbci	r25, 0x00	; 0
     554:	e1 f7       	brne	.-8      	; 0x54e <bear_sound+0x14a>
}

void setbuzzer(int note)
{
	int ocr_value = 1000000 / note;
	OCR1A = ocr_value;
     556:	00 c0       	rjmp	.+0      	; 0x558 <bear_sound+0x154>
     558:	00 00       	nop
	_delay_ms(200);
	nobuzzer();
	_delay_ms(30);
	
	setbuzzer(3816); //솔(2)
	playbuzzer();
     55a:	1b bd       	out	0x2b, r17	; 43
     55c:	0a bd       	out	0x2a, r16	; 42
     55e:	b6 de       	rcall	.-660    	; 0x2cc <playbuzzer>
     560:	2f ef       	ldi	r18, 0xFF	; 255
     562:	83 ec       	ldi	r24, 0xC3	; 195
     564:	99 e0       	ldi	r25, 0x09	; 9
     566:	21 50       	subi	r18, 0x01	; 1
     568:	80 40       	sbci	r24, 0x00	; 0
     56a:	90 40       	sbci	r25, 0x00	; 0
     56c:	e1 f7       	brne	.-8      	; 0x566 <bear_sound+0x162>
	_delay_ms(200);
	nobuzzer();
     56e:	00 c0       	rjmp	.+0      	; 0x570 <bear_sound+0x16c>
     570:	00 00       	nop
     572:	98 de       	rcall	.-720    	; 0x2a4 <nobuzzer>
     574:	2f ef       	ldi	r18, 0xFF	; 255
     576:	86 e7       	ldi	r24, 0x76	; 118
     578:	91 e0       	ldi	r25, 0x01	; 1
     57a:	21 50       	subi	r18, 0x01	; 1
     57c:	80 40       	sbci	r24, 0x00	; 0
     57e:	90 40       	sbci	r25, 0x00	; 0
     580:	e1 f7       	brne	.-8      	; 0x57a <bear_sound+0x176>
}

void setbuzzer(int note)
{
	int ocr_value = 1000000 / note;
	OCR1A = ocr_value;
     582:	00 c0       	rjmp	.+0      	; 0x584 <bear_sound+0x180>
     584:	00 00       	nop
	_delay_ms(200);
	nobuzzer();
	_delay_ms(30);
	
	setbuzzer(3030); //미(4)
	playbuzzer();
     586:	fb bc       	out	0x2b, r15	; 43
     588:	ea bc       	out	0x2a, r14	; 42
     58a:	a0 de       	rcall	.-704    	; 0x2cc <playbuzzer>
     58c:	2f ef       	ldi	r18, 0xFF	; 255
     58e:	87 e8       	ldi	r24, 0x87	; 135
     590:	93 e1       	ldi	r25, 0x13	; 19
     592:	21 50       	subi	r18, 0x01	; 1
     594:	80 40       	sbci	r24, 0x00	; 0
     596:	90 40       	sbci	r25, 0x00	; 0
     598:	e1 f7       	brne	.-8      	; 0x592 <bear_sound+0x18e>
	_delay_ms(400);
	nobuzzer();
     59a:	00 c0       	rjmp	.+0      	; 0x59c <bear_sound+0x198>
     59c:	00 00       	nop
     59e:	82 de       	rcall	.-764    	; 0x2a4 <nobuzzer>
     5a0:	2f ef       	ldi	r18, 0xFF	; 255
     5a2:	86 e7       	ldi	r24, 0x76	; 118
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	21 50       	subi	r18, 0x01	; 1
     5a8:	80 40       	sbci	r24, 0x00	; 0
     5aa:	90 40       	sbci	r25, 0x00	; 0
     5ac:	e1 f7       	brne	.-8      	; 0x5a6 <bear_sound+0x1a2>
}

void setbuzzer(int note)
{
	int ocr_value = 1000000 / note;
	OCR1A = ocr_value;
     5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <bear_sound+0x1ac>
     5b0:	00 00       	nop
	_delay_ms(400);
	nobuzzer();
	_delay_ms(30);
	
	setbuzzer(2551); //도(4)
	playbuzzer();
     5b2:	db bd       	out	0x2b, r29	; 43
     5b4:	ca bd       	out	0x2a, r28	; 42
     5b6:	8a de       	rcall	.-748    	; 0x2cc <playbuzzer>
     5b8:	2f ef       	ldi	r18, 0xFF	; 255
     5ba:	87 e8       	ldi	r24, 0x87	; 135
     5bc:	93 e1       	ldi	r25, 0x13	; 19
     5be:	21 50       	subi	r18, 0x01	; 1
     5c0:	80 40       	sbci	r24, 0x00	; 0
     5c2:	90 40       	sbci	r25, 0x00	; 0
     5c4:	e1 f7       	brne	.-8      	; 0x5be <bear_sound+0x1ba>
	_delay_ms(400);
	nobuzzer();
     5c6:	00 c0       	rjmp	.+0      	; 0x5c8 <bear_sound+0x1c4>
     5c8:	00 00       	nop
     5ca:	6c de       	rcall	.-808    	; 0x2a4 <nobuzzer>
     5cc:	2f ef       	ldi	r18, 0xFF	; 255
     5ce:	86 e7       	ldi	r24, 0x76	; 118
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	21 50       	subi	r18, 0x01	; 1
     5d4:	80 40       	sbci	r24, 0x00	; 0
     5d6:	90 40       	sbci	r25, 0x00	; 0
     5d8:	e1 f7       	brne	.-8      	; 0x5d2 <bear_sound+0x1ce>
}

void setbuzzer(int note)
{
	int ocr_value = 1000000 / note;
	OCR1A = ocr_value;
     5da:	00 c0       	rjmp	.+0      	; 0x5dc <bear_sound+0x1d8>
     5dc:	00 00       	nop
	_delay_ms(400);
	nobuzzer();
	_delay_ms(30);
	
	setbuzzer(3816); //솔(2)
	playbuzzer();
     5de:	1b bd       	out	0x2b, r17	; 43
     5e0:	0a bd       	out	0x2a, r16	; 42
     5e2:	74 de       	rcall	.-792    	; 0x2cc <playbuzzer>
     5e4:	2f ef       	ldi	r18, 0xFF	; 255
     5e6:	83 ec       	ldi	r24, 0xC3	; 195
     5e8:	99 e0       	ldi	r25, 0x09	; 9
     5ea:	21 50       	subi	r18, 0x01	; 1
     5ec:	80 40       	sbci	r24, 0x00	; 0
     5ee:	90 40       	sbci	r25, 0x00	; 0
     5f0:	e1 f7       	brne	.-8      	; 0x5ea <bear_sound+0x1e6>
	_delay_ms(200);
	nobuzzer();
     5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <bear_sound+0x1f0>
     5f4:	00 00       	nop
     5f6:	56 de       	rcall	.-852    	; 0x2a4 <nobuzzer>
     5f8:	2f ef       	ldi	r18, 0xFF	; 255
     5fa:	86 e7       	ldi	r24, 0x76	; 118
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	21 50       	subi	r18, 0x01	; 1
     600:	80 40       	sbci	r24, 0x00	; 0
     602:	90 40       	sbci	r25, 0x00	; 0
     604:	e1 f7       	brne	.-8      	; 0x5fe <bear_sound+0x1fa>
}

void setbuzzer(int note)
{
	int ocr_value = 1000000 / note;
	OCR1A = ocr_value;
     606:	00 c0       	rjmp	.+0      	; 0x608 <bear_sound+0x204>
	_delay_ms(200);
	nobuzzer();
	_delay_ms(30);
	
	setbuzzer(3816); //솔(2)
	playbuzzer();
     608:	00 00       	nop
     60a:	1b bd       	out	0x2b, r17	; 43
     60c:	0a bd       	out	0x2a, r16	; 42
     60e:	5e de       	rcall	.-836    	; 0x2cc <playbuzzer>
     610:	2f ef       	ldi	r18, 0xFF	; 255
     612:	83 ec       	ldi	r24, 0xC3	; 195
     614:	99 e0       	ldi	r25, 0x09	; 9
     616:	21 50       	subi	r18, 0x01	; 1
     618:	80 40       	sbci	r24, 0x00	; 0
     61a:	90 40       	sbci	r25, 0x00	; 0
	_delay_ms(200);
	nobuzzer();
     61c:	e1 f7       	brne	.-8      	; 0x616 <bear_sound+0x212>
     61e:	00 c0       	rjmp	.+0      	; 0x620 <bear_sound+0x21c>
     620:	00 00       	nop
     622:	40 de       	rcall	.-896    	; 0x2a4 <nobuzzer>
     624:	2f ef       	ldi	r18, 0xFF	; 255
     626:	86 e7       	ldi	r24, 0x76	; 118
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	21 50       	subi	r18, 0x01	; 1
     62c:	80 40       	sbci	r24, 0x00	; 0
     62e:	90 40       	sbci	r25, 0x00	; 0
}

void setbuzzer(int note)
{
	int ocr_value = 1000000 / note;
	OCR1A = ocr_value;
     630:	e1 f7       	brne	.-8      	; 0x62a <bear_sound+0x226>
     632:	00 c0       	rjmp	.+0      	; 0x634 <bear_sound+0x230>
	_delay_ms(200);
	nobuzzer();
	_delay_ms(30);
	
	setbuzzer(3030); //미(4)
	playbuzzer();
     634:	00 00       	nop
     636:	fb bc       	out	0x2b, r15	; 43
     638:	ea bc       	out	0x2a, r14	; 42
     63a:	48 de       	rcall	.-880    	; 0x2cc <playbuzzer>
     63c:	2f ef       	ldi	r18, 0xFF	; 255
     63e:	87 e8       	ldi	r24, 0x87	; 135
     640:	93 e1       	ldi	r25, 0x13	; 19
     642:	21 50       	subi	r18, 0x01	; 1
     644:	80 40       	sbci	r24, 0x00	; 0
     646:	90 40       	sbci	r25, 0x00	; 0
	_delay_ms(400);
	nobuzzer();
     648:	e1 f7       	brne	.-8      	; 0x642 <bear_sound+0x23e>
     64a:	00 c0       	rjmp	.+0      	; 0x64c <bear_sound+0x248>
     64c:	00 00       	nop
     64e:	2a de       	rcall	.-940    	; 0x2a4 <nobuzzer>
     650:	2f ef       	ldi	r18, 0xFF	; 255
     652:	86 e7       	ldi	r24, 0x76	; 118
     654:	91 e0       	ldi	r25, 0x01	; 1
     656:	21 50       	subi	r18, 0x01	; 1
     658:	80 40       	sbci	r24, 0x00	; 0
     65a:	90 40       	sbci	r25, 0x00	; 0
}

void setbuzzer(int note)
{
	int ocr_value = 1000000 / note;
	OCR1A = ocr_value;
     65c:	e1 f7       	brne	.-8      	; 0x656 <bear_sound+0x252>
     65e:	00 c0       	rjmp	.+0      	; 0x660 <bear_sound+0x25c>
	_delay_ms(400);
	nobuzzer();
	_delay_ms(30);
	
	setbuzzer(3816); //솔(2)
	playbuzzer();
     660:	00 00       	nop
     662:	1b bd       	out	0x2b, r17	; 43
     664:	0a bd       	out	0x2a, r16	; 42
     666:	32 de       	rcall	.-924    	; 0x2cc <playbuzzer>
     668:	2f ef       	ldi	r18, 0xFF	; 255
     66a:	83 ec       	ldi	r24, 0xC3	; 195
     66c:	99 e0       	ldi	r25, 0x09	; 9
     66e:	21 50       	subi	r18, 0x01	; 1
     670:	80 40       	sbci	r24, 0x00	; 0
     672:	90 40       	sbci	r25, 0x00	; 0
	_delay_ms(200);
	nobuzzer();
     674:	e1 f7       	brne	.-8      	; 0x66e <bear_sound+0x26a>
     676:	00 c0       	rjmp	.+0      	; 0x678 <bear_sound+0x274>
     678:	00 00       	nop
     67a:	14 de       	rcall	.-984    	; 0x2a4 <nobuzzer>
     67c:	2f ef       	ldi	r18, 0xFF	; 255
     67e:	86 e7       	ldi	r24, 0x76	; 118
     680:	91 e0       	ldi	r25, 0x01	; 1
     682:	21 50       	subi	r18, 0x01	; 1
     684:	80 40       	sbci	r24, 0x00	; 0
     686:	90 40       	sbci	r25, 0x00	; 0
}

void setbuzzer(int note)
{
	int ocr_value = 1000000 / note;
	OCR1A = ocr_value;
     688:	e1 f7       	brne	.-8      	; 0x682 <bear_sound+0x27e>
     68a:	00 c0       	rjmp	.+0      	; 0x68c <bear_sound+0x288>
	_delay_ms(200);
	nobuzzer();
	_delay_ms(30);
	
	setbuzzer(3816); //솔(2)
	playbuzzer();
     68c:	00 00       	nop
     68e:	1b bd       	out	0x2b, r17	; 43
     690:	0a bd       	out	0x2a, r16	; 42
     692:	1c de       	rcall	.-968    	; 0x2cc <playbuzzer>
     694:	2f ef       	ldi	r18, 0xFF	; 255
     696:	83 ec       	ldi	r24, 0xC3	; 195
     698:	99 e0       	ldi	r25, 0x09	; 9
     69a:	21 50       	subi	r18, 0x01	; 1
     69c:	80 40       	sbci	r24, 0x00	; 0
     69e:	90 40       	sbci	r25, 0x00	; 0
	_delay_ms(200);
	nobuzzer();
     6a0:	e1 f7       	brne	.-8      	; 0x69a <bear_sound+0x296>
     6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <bear_sound+0x2a0>
     6a4:	00 00       	nop
     6a6:	fe dd       	rcall	.-1028   	; 0x2a4 <nobuzzer>
     6a8:	2f ef       	ldi	r18, 0xFF	; 255
     6aa:	86 e7       	ldi	r24, 0x76	; 118
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	21 50       	subi	r18, 0x01	; 1
     6b0:	80 40       	sbci	r24, 0x00	; 0
     6b2:	90 40       	sbci	r25, 0x00	; 0
}

void setbuzzer(int note)
{
	int ocr_value = 1000000 / note;
	OCR1A = ocr_value;
     6b4:	e1 f7       	brne	.-8      	; 0x6ae <bear_sound+0x2aa>
     6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <bear_sound+0x2b4>
	_delay_ms(200);
	nobuzzer();
	_delay_ms(30);
	
	setbuzzer(3030); //미(4)
	playbuzzer();
     6b8:	00 00       	nop
     6ba:	fb bc       	out	0x2b, r15	; 43
     6bc:	ea bc       	out	0x2a, r14	; 42
     6be:	06 de       	rcall	.-1012   	; 0x2cc <playbuzzer>
     6c0:	2f ef       	ldi	r18, 0xFF	; 255
     6c2:	87 e8       	ldi	r24, 0x87	; 135
     6c4:	93 e1       	ldi	r25, 0x13	; 19
     6c6:	21 50       	subi	r18, 0x01	; 1
     6c8:	80 40       	sbci	r24, 0x00	; 0
     6ca:	90 40       	sbci	r25, 0x00	; 0
	_delay_ms(400);
	nobuzzer();
     6cc:	e1 f7       	brne	.-8      	; 0x6c6 <bear_sound+0x2c2>
     6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <bear_sound+0x2cc>
     6d0:	00 00       	nop
     6d2:	e8 dd       	rcall	.-1072   	; 0x2a4 <nobuzzer>
     6d4:	2f ef       	ldi	r18, 0xFF	; 255
     6d6:	86 e7       	ldi	r24, 0x76	; 118
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	21 50       	subi	r18, 0x01	; 1
     6dc:	80 40       	sbci	r24, 0x00	; 0
     6de:	90 40       	sbci	r25, 0x00	; 0
}

void setbuzzer(int note)
{
	int ocr_value = 1000000 / note;
	OCR1A = ocr_value;
     6e0:	e1 f7       	brne	.-8      	; 0x6da <bear_sound+0x2d6>
	_delay_ms(400);
	nobuzzer();
	_delay_ms(30);
	
	setbuzzer(2551); //도(4)
	playbuzzer();
     6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <bear_sound+0x2e0>
     6e4:	00 00       	nop
     6e6:	db bd       	out	0x2b, r29	; 43
     6e8:	ca bd       	out	0x2a, r28	; 42
     6ea:	f0 dd       	rcall	.-1056   	; 0x2cc <playbuzzer>
     6ec:	2f ef       	ldi	r18, 0xFF	; 255
     6ee:	87 e8       	ldi	r24, 0x87	; 135
     6f0:	93 e1       	ldi	r25, 0x13	; 19
     6f2:	21 50       	subi	r18, 0x01	; 1
     6f4:	80 40       	sbci	r24, 0x00	; 0
     6f6:	90 40       	sbci	r25, 0x00	; 0
	_delay_ms(400);
	nobuzzer();
     6f8:	e1 f7       	brne	.-8      	; 0x6f2 <bear_sound+0x2ee>
     6fa:	00 c0       	rjmp	.+0      	; 0x6fc <bear_sound+0x2f8>
     6fc:	00 00       	nop
     6fe:	d2 dd       	rcall	.-1116   	; 0x2a4 <nobuzzer>
     700:	2f ef       	ldi	r18, 0xFF	; 255
     702:	86 e7       	ldi	r24, 0x76	; 118
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	21 50       	subi	r18, 0x01	; 1
     708:	80 40       	sbci	r24, 0x00	; 0
}

void setbuzzer(int note)
{
	int ocr_value = 1000000 / note;
	OCR1A = ocr_value;
     70a:	90 40       	sbci	r25, 0x00	; 0
     70c:	e1 f7       	brne	.-8      	; 0x706 <bear_sound+0x302>
	_delay_ms(400);
	nobuzzer();
	_delay_ms(30);
	
	setbuzzer(2551); //도(4)
	playbuzzer();
     70e:	00 c0       	rjmp	.+0      	; 0x710 <bear_sound+0x30c>
     710:	00 00       	nop
     712:	db bd       	out	0x2b, r29	; 43
     714:	ca bd       	out	0x2a, r28	; 42
     716:	da dd       	rcall	.-1100   	; 0x2cc <playbuzzer>
     718:	2f ef       	ldi	r18, 0xFF	; 255
     71a:	87 e8       	ldi	r24, 0x87	; 135
     71c:	93 e1       	ldi	r25, 0x13	; 19
     71e:	21 50       	subi	r18, 0x01	; 1
     720:	80 40       	sbci	r24, 0x00	; 0
     722:	90 40       	sbci	r25, 0x00	; 0
	_delay_ms(400);
	nobuzzer();
     724:	e1 f7       	brne	.-8      	; 0x71e <bear_sound+0x31a>
     726:	00 c0       	rjmp	.+0      	; 0x728 <bear_sound+0x324>
     728:	00 00       	nop
     72a:	bc dd       	rcall	.-1160   	; 0x2a4 <nobuzzer>
     72c:	2f ef       	ldi	r18, 0xFF	; 255
     72e:	86 e7       	ldi	r24, 0x76	; 118
     730:	91 e0       	ldi	r25, 0x01	; 1
     732:	21 50       	subi	r18, 0x01	; 1
     734:	80 40       	sbci	r24, 0x00	; 0
     736:	90 40       	sbci	r25, 0x00	; 0
     738:	e1 f7       	brne	.-8      	; 0x732 <bear_sound+0x32e>
}

void setbuzzer(int note)
{
	int ocr_value = 1000000 / note;
	OCR1A = ocr_value;
     73a:	00 c0       	rjmp	.+0      	; 0x73c <bear_sound+0x338>
     73c:	00 00       	nop
	_delay_ms(400);
	nobuzzer();
	_delay_ms(30);
	
	setbuzzer(2551); //도(8)
	playbuzzer();
     73e:	db bd       	out	0x2b, r29	; 43
     740:	ca bd       	out	0x2a, r28	; 42
     742:	c4 dd       	rcall	.-1144   	; 0x2cc <playbuzzer>
     744:	2f ef       	ldi	r18, 0xFF	; 255
     746:	8f e0       	ldi	r24, 0x0F	; 15
     748:	97 e2       	ldi	r25, 0x27	; 39
     74a:	21 50       	subi	r18, 0x01	; 1
     74c:	80 40       	sbci	r24, 0x00	; 0
     74e:	90 40       	sbci	r25, 0x00	; 0
     750:	e1 f7       	brne	.-8      	; 0x74a <bear_sound+0x346>
     752:	00 c0       	rjmp	.+0      	; 0x754 <bear_sound+0x350>
	_delay_ms(800);
	nobuzzer();
     754:	00 00       	nop
     756:	a6 dd       	rcall	.-1204   	; 0x2a4 <nobuzzer>
	PORTD &= ~(0xf0);
     758:	82 b3       	in	r24, 0x12	; 18
     75a:	8f 70       	andi	r24, 0x0F	; 15
     75c:	82 bb       	out	0x12, r24	; 18
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	ff 90       	pop	r15
     768:	ef 90       	pop	r14
     76a:	08 95       	ret

0000076c <DCmotorInit>:
#include "dcmotor.h"


void DCmotorInit()
{
	DDRE = 0xff;
     76c:	8f ef       	ldi	r24, 0xFF	; 255
     76e:	82 b9       	out	0x02, r24	; 2
	TCCR3B |= _BV(CS30) | _BV(WGM32);
     770:	ea e8       	ldi	r30, 0x8A	; 138
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	80 81       	ld	r24, Z
     776:	89 60       	ori	r24, 0x09	; 9
     778:	80 83       	st	Z, r24
	TCCR3A |= _BV(WGM30);
     77a:	eb e8       	ldi	r30, 0x8B	; 139
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	80 81       	ld	r24, Z
     780:	81 60       	ori	r24, 0x01	; 1
     782:	80 83       	st	Z, r24
	TCCR3A |= _BV(COM3B1) | _BV(COM3C1);
     784:	80 81       	ld	r24, Z
     786:	88 62       	ori	r24, 0x28	; 40
     788:	80 83       	st	Z, r24
     78a:	08 95       	ret

0000078c <DCmotorstop>:
}

void DCmotorstop()
{
	MOTOR_R = 0;
     78c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     790:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	MOTOR_L = 0;
     794:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     798:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     79c:	08 95       	ret

0000079e <DCmotorleft>:
}

void DCmotorleft(uint8_t leftspeed)
{
	MOTOR_R = 0;if(leftspeed > 255) leftspeed = 255;
     79e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     7a2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	else if(leftspeed < 0) leftspeed =0;
	MOTOR_L = leftspeed;
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     7ac:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     7b0:	08 95       	ret

000007b2 <DCmotorright>:

void DCmotorright(uint8_t rightspeed)
{
	if(rightspeed > 255) rightspeed = 255;
	else if(rightspeed < 0) rightspeed =0;
	MOTOR_R = rightspeed;
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     7b8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	MOTOR_L = 0;
     7bc:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <__TEXT_REGION_LENGTH__+0x7e0083>
     7c0:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
     7c4:	08 95       	ret

000007c6 <DS1302_Init>:
{
	dateData->date = DS1302_ReadData(ADDRESS_DATE);
	dateData->month = DS1302_ReadData(ADDRESS_MONTH);
	dateData->dayofweek = DS1302_ReadData(ADDRESS_DAYOFWEEK);
	dateData->year = DS1302_ReadData(ADDRESS_YEAR);
}
     7c6:	d2 9a       	sbi	0x1a, 2	; 26
     7c8:	d1 9a       	sbi	0x1a, 1	; 26
     7ca:	d0 9a       	sbi	0x1a, 0	; 26
     7cc:	08 95       	ret

000007ce <DS1302_Selected>:
     7ce:	d8 9a       	sbi	0x1b, 0	; 27
     7d0:	08 95       	ret

000007d2 <DS1302_Deselected>:
     7d2:	d8 98       	cbi	0x1b, 0	; 27
     7d4:	08 95       	ret

000007d6 <DS1302_Clock>:
     7d6:	da 98       	cbi	0x1b, 2	; 27
     7d8:	da 9a       	sbi	0x1b, 2	; 27
     7da:	da 98       	cbi	0x1b, 2	; 27
     7dc:	08 95       	ret

000007de <DS1302_DataBitSet>:
     7de:	d9 9a       	sbi	0x1b, 1	; 27
     7e0:	08 95       	ret

000007e2 <DS1302_DataBitReset>:
     7e2:	d9 98       	cbi	0x1b, 1	; 27
     7e4:	08 95       	ret

000007e6 <DS1302_Change_ReadMode>:
     7e6:	d1 98       	cbi	0x1a, 1	; 26
     7e8:	08 95       	ret

000007ea <DS1302_Change_WriteMode>:
     7ea:	d1 9a       	sbi	0x1a, 1	; 26
     7ec:	08 95       	ret

000007ee <decimal_to_bcd>:
     7ee:	9d ec       	ldi	r25, 0xCD	; 205
     7f0:	89 9f       	mul	r24, r25
     7f2:	91 2d       	mov	r25, r1
     7f4:	11 24       	eor	r1, r1
     7f6:	96 95       	lsr	r25
     7f8:	96 95       	lsr	r25
     7fa:	96 95       	lsr	r25
     7fc:	20 e1       	ldi	r18, 0x10	; 16
     7fe:	92 9f       	mul	r25, r18
     800:	a0 01       	movw	r20, r0
     802:	11 24       	eor	r1, r1
     804:	99 0f       	add	r25, r25
     806:	29 2f       	mov	r18, r25
     808:	22 0f       	add	r18, r18
     80a:	22 0f       	add	r18, r18
     80c:	92 0f       	add	r25, r18
     80e:	89 1b       	sub	r24, r25
     810:	84 2b       	or	r24, r20
     812:	08 95       	ret

00000814 <bcd_to_decimal>:
     814:	98 2f       	mov	r25, r24
     816:	92 95       	swap	r25
     818:	9f 70       	andi	r25, 0x0F	; 15
     81a:	99 0f       	add	r25, r25
     81c:	29 2f       	mov	r18, r25
     81e:	22 0f       	add	r18, r18
     820:	22 0f       	add	r18, r18
     822:	92 0f       	add	r25, r18
     824:	8f 70       	andi	r24, 0x0F	; 15
     826:	89 0f       	add	r24, r25
     828:	08 95       	ret

0000082a <DS1302_TxData>:
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	08 2f       	mov	r16, r24
     834:	da df       	rcall	.-76     	; 0x7ea <DS1302_Change_WriteMode>
     836:	c0 e0       	ldi	r28, 0x00	; 0
     838:	d0 e0       	ldi	r29, 0x00	; 0
     83a:	10 e0       	ldi	r17, 0x00	; 0
     83c:	98 01       	movw	r18, r16
     83e:	0c 2e       	mov	r0, r28
     840:	02 c0       	rjmp	.+4      	; 0x846 <DS1302_TxData+0x1c>
     842:	35 95       	asr	r19
     844:	27 95       	ror	r18
     846:	0a 94       	dec	r0
     848:	e2 f7       	brpl	.-8      	; 0x842 <DS1302_TxData+0x18>
     84a:	20 ff       	sbrs	r18, 0
     84c:	02 c0       	rjmp	.+4      	; 0x852 <DS1302_TxData+0x28>
     84e:	c7 df       	rcall	.-114    	; 0x7de <DS1302_DataBitSet>
     850:	01 c0       	rjmp	.+2      	; 0x854 <DS1302_TxData+0x2a>
     852:	c7 df       	rcall	.-114    	; 0x7e2 <DS1302_DataBitReset>
     854:	c0 df       	rcall	.-128    	; 0x7d6 <DS1302_Clock>
     856:	21 96       	adiw	r28, 0x01	; 1
     858:	c8 30       	cpi	r28, 0x08	; 8
     85a:	d1 05       	cpc	r29, r1
     85c:	79 f7       	brne	.-34     	; 0x83c <DS1302_TxData+0x12>
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	1f 91       	pop	r17
     864:	0f 91       	pop	r16
     866:	08 95       	ret

00000868 <DS1302_RxData>:
     868:	df 92       	push	r13
     86a:	ef 92       	push	r14
     86c:	ff 92       	push	r15
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
     876:	b7 df       	rcall	.-146    	; 0x7e6 <DS1302_Change_ReadMode>
     878:	c0 e0       	ldi	r28, 0x00	; 0
     87a:	d0 e0       	ldi	r29, 0x00	; 0
     87c:	10 e0       	ldi	r17, 0x00	; 0
     87e:	d1 2c       	mov	r13, r1
     880:	00 e0       	ldi	r16, 0x00	; 0
     882:	ee 24       	eor	r14, r14
     884:	e3 94       	inc	r14
     886:	f1 2c       	mov	r15, r1
     888:	c9 9b       	sbis	0x19, 1	; 25
     88a:	08 c0       	rjmp	.+16     	; 0x89c <DS1302_RxData+0x34>
     88c:	c7 01       	movw	r24, r14
     88e:	0c 2e       	mov	r0, r28
     890:	02 c0       	rjmp	.+4      	; 0x896 <DS1302_RxData+0x2e>
     892:	88 0f       	add	r24, r24
     894:	99 1f       	adc	r25, r25
     896:	0a 94       	dec	r0
     898:	e2 f7       	brpl	.-8      	; 0x892 <DS1302_RxData+0x2a>
     89a:	01 c0       	rjmp	.+2      	; 0x89e <DS1302_RxData+0x36>
     89c:	8d 2d       	mov	r24, r13
     89e:	18 2b       	or	r17, r24
     8a0:	9a df       	rcall	.-204    	; 0x7d6 <DS1302_Clock>
     8a2:	21 96       	adiw	r28, 0x01	; 1
     8a4:	c8 30       	cpi	r28, 0x08	; 8
     8a6:	d1 05       	cpc	r29, r1
     8a8:	79 f7       	brne	.-34     	; 0x888 <DS1302_RxData+0x20>
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	0f 91       	pop	r16
     8b4:	ff 90       	pop	r15
     8b6:	ef 90       	pop	r14
     8b8:	df 90       	pop	r13
     8ba:	08 95       	ret

000008bc <DS1302_WriteData>:
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	d8 2f       	mov	r29, r24
     8c2:	c6 2f       	mov	r28, r22
     8c4:	84 df       	rcall	.-248    	; 0x7ce <DS1302_Selected>
     8c6:	8d 2f       	mov	r24, r29
     8c8:	b0 df       	rcall	.-160    	; 0x82a <DS1302_TxData>
     8ca:	8c 2f       	mov	r24, r28
     8cc:	90 df       	rcall	.-224    	; 0x7ee <decimal_to_bcd>
     8ce:	ad df       	rcall	.-166    	; 0x82a <DS1302_TxData>
     8d0:	80 df       	rcall	.-256    	; 0x7d2 <DS1302_Deselected>
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	08 95       	ret

000008d8 <DS1302_ReadData>:
     8d8:	cf 93       	push	r28
     8da:	c8 2f       	mov	r28, r24
     8dc:	78 df       	rcall	.-272    	; 0x7ce <DS1302_Selected>
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	8c 0f       	add	r24, r28
     8e2:	a3 df       	rcall	.-186    	; 0x82a <DS1302_TxData>
     8e4:	c1 df       	rcall	.-126    	; 0x868 <DS1302_RxData>
     8e6:	c8 2f       	mov	r28, r24
     8e8:	74 df       	rcall	.-280    	; 0x7d2 <DS1302_Deselected>
     8ea:	8c 2f       	mov	r24, r28
     8ec:	93 df       	rcall	.-218    	; 0x814 <bcd_to_decimal>
     8ee:	cf 91       	pop	r28
     8f0:	08 95       	ret

000008f2 <DS1302_GetTime>:
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
     8f6:	ec 01       	movw	r28, r24
     8f8:	80 e8       	ldi	r24, 0x80	; 128
     8fa:	ee df       	rcall	.-36     	; 0x8d8 <DS1302_ReadData>
     8fc:	88 83       	st	Y, r24
     8fe:	82 e8       	ldi	r24, 0x82	; 130
     900:	eb df       	rcall	.-42     	; 0x8d8 <DS1302_ReadData>
     902:	89 83       	std	Y+1, r24	; 0x01
     904:	84 e8       	ldi	r24, 0x84	; 132
     906:	e8 df       	rcall	.-48     	; 0x8d8 <DS1302_ReadData>
     908:	8a 83       	std	Y+2, r24	; 0x02
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <DS1302_SetTimeDates>:

void DS1302_SetTimeDates(DS1302 timeDate)
{
     910:	0f 93       	push	r16
     912:	1f 93       	push	r17
     914:	cf 93       	push	r28
     916:	df 93       	push	r29
     918:	cd b7       	in	r28, 0x3d	; 61
     91a:	de b7       	in	r29, 0x3e	; 62
     91c:	29 97       	sbiw	r28, 0x09	; 9
     91e:	0f b6       	in	r0, 0x3f	; 63
     920:	f8 94       	cli
     922:	de bf       	out	0x3e, r29	; 62
     924:	0f be       	out	0x3f, r0	; 63
     926:	cd bf       	out	0x3d, r28	; 61
     928:	1a 83       	std	Y+2, r17	; 0x02
     92a:	2b 83       	std	Y+3, r18	; 0x03
     92c:	3c 83       	std	Y+4, r19	; 0x04
     92e:	4d 83       	std	Y+5, r20	; 0x05
     930:	5e 83       	std	Y+6, r21	; 0x06
     932:	6f 83       	std	Y+7, r22	; 0x07
	DS1302_WriteData(ADDRESS_SECONDS, timeDate.seconds);
     934:	60 2f       	mov	r22, r16
     936:	80 e8       	ldi	r24, 0x80	; 128
     938:	c1 df       	rcall	.-126    	; 0x8bc <DS1302_WriteData>
	DS1302_WriteData(ADDRESS_MINUTES, timeDate.minutes);
     93a:	6a 81       	ldd	r22, Y+2	; 0x02
     93c:	82 e8       	ldi	r24, 0x82	; 130
     93e:	be df       	rcall	.-132    	; 0x8bc <DS1302_WriteData>
	DS1302_WriteData(ADDRESS_HOUR, timeDate.hour);
     940:	6b 81       	ldd	r22, Y+3	; 0x03
     942:	84 e8       	ldi	r24, 0x84	; 132
     944:	bb df       	rcall	.-138    	; 0x8bc <DS1302_WriteData>
	DS1302_WriteData(ADDRESS_DATE, timeDate.date);
     946:	6c 81       	ldd	r22, Y+4	; 0x04
     948:	86 e8       	ldi	r24, 0x86	; 134
     94a:	b8 df       	rcall	.-144    	; 0x8bc <DS1302_WriteData>
	DS1302_WriteData(ADDRESS_MONTH, timeDate.month);
     94c:	6d 81       	ldd	r22, Y+5	; 0x05
     94e:	88 e8       	ldi	r24, 0x88	; 136
     950:	b5 df       	rcall	.-150    	; 0x8bc <DS1302_WriteData>
	DS1302_WriteData(ADDRESS_DAYOFWEEK, timeDate.dayofweek);
     952:	6e 81       	ldd	r22, Y+6	; 0x06
     954:	8a e8       	ldi	r24, 0x8A	; 138
     956:	b2 df       	rcall	.-156    	; 0x8bc <DS1302_WriteData>
	DS1302_WriteData(ADDRESS_YEAR, timeDate.year);
     958:	6f 81       	ldd	r22, Y+7	; 0x07
     95a:	8c e8       	ldi	r24, 0x8C	; 140
     95c:	af df       	rcall	.-162    	; 0x8bc <DS1302_WriteData>
     95e:	29 96       	adiw	r28, 0x09	; 9
}
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	f8 94       	cli
     964:	de bf       	out	0x3e, r29	; 62
     966:	0f be       	out	0x3f, r0	; 63
     968:	cd bf       	out	0x3d, r28	; 61
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	08 95       	ret

00000974 <DS1302_Timer>:
     974:	87 e9       	ldi	r24, 0x97	; 151

int DS1302_Timer()
{
	DS1302_GetTime(&stTime);
     976:	98 e0       	ldi	r25, 0x08	; 8
     978:	bc df       	rcall	.-136    	; 0x8f2 <DS1302_GetTime>
	return stTime.seconds % 2;
     97a:	80 91 97 08 	lds	r24, 0x0897	; 0x800897 <stTime>
}
     97e:	81 70       	andi	r24, 0x01	; 1
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	08 95       	ret

00000984 <DS1302_chogi>:

void DS1302_chogi()
{
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
	stTime.seconds = 0;
     988:	e7 e9       	ldi	r30, 0x97	; 151
     98a:	f8 e0       	ldi	r31, 0x08	; 8
     98c:	10 82       	st	Z, r1
	stTime.minutes = 0;
     98e:	11 82       	std	Z+1, r1	; 0x01
	stTime.hour = 0;
     990:	12 82       	std	Z+2, r1	; 0x02
	stTime.date = 0;
     992:	13 82       	std	Z+3, r1	; 0x03
	stTime.dayofweek = 0;
     994:	15 82       	std	Z+5, r1	; 0x05
	stTime.month = 0;
     996:	14 82       	std	Z+4, r1	; 0x04
	stTime.year = 0;
     998:	16 82       	std	Z+6, r1	; 0x06
	DS1302_SetTimeDates(stTime);
     99a:	00 e0       	ldi	r16, 0x00	; 0
     99c:	10 e0       	ldi	r17, 0x00	; 0
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	70 91 9e 08 	lds	r23, 0x089E	; 0x80089e <stTime+0x7>
     9ac:	80 91 9f 08 	lds	r24, 0x089F	; 0x80089f <stTime+0x8>
     9b0:	af df       	rcall	.-162    	; 0x910 <DS1302_SetTimeDates>
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	08 95       	ret

000009b8 <LCD_pulse_enable>:
#include "lcd.h"


void LCD_pulse_enable()
{
	PORT_CONTROL |= _BV(E_PIN);
     9b8:	c4 9a       	sbi	0x18, 4	; 24
     9ba:	8f e9       	ldi	r24, 0x9F	; 159
     9bc:	9f e0       	ldi	r25, 0x0F	; 15
     9be:	01 97       	sbiw	r24, 0x01	; 1
     9c0:	f1 f7       	brne	.-4      	; 0x9be <LCD_pulse_enable+0x6>
     9c2:	00 c0       	rjmp	.+0      	; 0x9c4 <LCD_pulse_enable+0xc>
     9c4:	00 00       	nop
	_delay_ms(1);
	PORT_CONTROL &= ~(_BV(E_PIN));
     9c6:	c4 98       	cbi	0x18, 4	; 24
     9c8:	8f e9       	ldi	r24, 0x9F	; 159
     9ca:	9f e0       	ldi	r25, 0x0F	; 15
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	f1 f7       	brne	.-4      	; 0x9cc <LCD_pulse_enable+0x14>
     9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <LCD_pulse_enable+0x1a>
     9d2:	00 00       	nop
     9d4:	08 95       	ret

000009d6 <LCD_write_data>:
	_delay_ms(1);
}

void LCD_write_data(uint8_t data)
{
	PORT_CONTROL |= _BV(RS_PIN);
     9d6:	c2 9a       	sbi	0x18, 2	; 24
	PORT_DATA = data;
     9d8:	85 bb       	out	0x15, r24	; 21
	LCD_pulse_enable();
     9da:	ee df       	rcall	.-36     	; 0x9b8 <LCD_pulse_enable>
     9dc:	8f e3       	ldi	r24, 0x3F	; 63
     9de:	9f e1       	ldi	r25, 0x1F	; 31
     9e0:	01 97       	sbiw	r24, 0x01	; 1
     9e2:	f1 f7       	brne	.-4      	; 0x9e0 <LCD_write_data+0xa>
     9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <LCD_write_data+0x10>
     9e6:	00 00       	nop
     9e8:	08 95       	ret

000009ea <LCD_write_command>:
	_delay_ms(2);
}

void LCD_write_command(uint8_t command)
{
	PORT_CONTROL &= ~(_BV(RS_PIN));
     9ea:	c2 98       	cbi	0x18, 2	; 24
	PORT_DATA = command;
     9ec:	85 bb       	out	0x15, r24	; 21
	LCD_pulse_enable();
     9ee:	e4 df       	rcall	.-56     	; 0x9b8 <LCD_pulse_enable>
     9f0:	8f e3       	ldi	r24, 0x3F	; 63
     9f2:	9f e1       	ldi	r25, 0x1F	; 31
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	f1 f7       	brne	.-4      	; 0x9f4 <LCD_write_command+0xa>
     9f8:	00 c0       	rjmp	.+0      	; 0x9fa <LCD_write_command+0x10>
     9fa:	00 00       	nop
     9fc:	08 95       	ret

000009fe <LCD_clear>:
	_delay_ms(2);
}

void LCD_clear()
{
	LCD_write_command(COMMAND_CLEAR_DISPLAY);
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	f4 df       	rcall	.-24     	; 0x9ea <LCD_write_command>
     a02:	8f e3       	ldi	r24, 0x3F	; 63
     a04:	9f e1       	ldi	r25, 0x1F	; 31
     a06:	01 97       	sbiw	r24, 0x01	; 1
     a08:	f1 f7       	brne	.-4      	; 0xa06 <LCD_clear+0x8>
     a0a:	00 c0       	rjmp	.+0      	; 0xa0c <LCD_clear+0xe>
     a0c:	00 00       	nop
     a0e:	08 95       	ret

00000a10 <LCD_init>:
     a10:	2f ef       	ldi	r18, 0xFF	; 255
     a12:	80 e7       	ldi	r24, 0x70	; 112
     a14:	92 e0       	ldi	r25, 0x02	; 2
     a16:	21 50       	subi	r18, 0x01	; 1
     a18:	80 40       	sbci	r24, 0x00	; 0
     a1a:	90 40       	sbci	r25, 0x00	; 0
     a1c:	e1 f7       	brne	.-8      	; 0xa16 <LCD_init+0x6>
     a1e:	00 c0       	rjmp	.+0      	; 0xa20 <LCD_init+0x10>
     a20:	00 00       	nop

void LCD_init()
{
	_delay_ms(50);
	
	DDR_DATA = 0xff;
     a22:	8f ef       	ldi	r24, 0xFF	; 255
     a24:	84 bb       	out	0x14, r24	; 20
	PORT_DATA = 0x00;
     a26:	15 ba       	out	0x15, r1	; 21
	DDR_CONTROL |= _BV(RS_PIN) | _BV(RW_PIN) |_BV(E_PIN);
     a28:	87 b3       	in	r24, 0x17	; 23
     a2a:	8c 61       	ori	r24, 0x1C	; 28
     a2c:	87 bb       	out	0x17, r24	; 23
	
	PORT_CONTROL &= ~(_BV(RW_PIN));
     a2e:	c3 98       	cbi	0x18, 3	; 24
	
	LCD_write_command(COMMAND_8_BIT_MODE);
     a30:	88 e3       	ldi	r24, 0x38	; 56
     a32:	db df       	rcall	.-74     	; 0x9ea <LCD_write_command>
	
	uint8_t command = 0x08 | _BV(COMMAND_DISPLAY_ON_OFF_BIT);
	LCD_write_command(command);
     a34:	8c e0       	ldi	r24, 0x0C	; 12
	
	LCD_clear();
     a36:	d9 df       	rcall	.-78     	; 0x9ea <LCD_write_command>
	
	LCD_write_command(0x06);
     a38:	e2 df       	rcall	.-60     	; 0x9fe <LCD_clear>
     a3a:	86 e0       	ldi	r24, 0x06	; 6
     a3c:	d6 cf       	rjmp	.-84     	; 0x9ea <LCD_write_command>
     a3e:	08 95       	ret

00000a40 <LCD_write_string>:
}

void LCD_write_string(char *string)
{
     a40:	0f 93       	push	r16
     a42:	1f 93       	push	r17
     a44:	cf 93       	push	r28
     a46:	fc 01       	movw	r30, r24
	uint8_t i;
	for(i=0; string[i]; i++)
     a48:	80 81       	ld	r24, Z
     a4a:	88 23       	and	r24, r24
     a4c:	51 f0       	breq	.+20     	; 0xa62 <LCD_write_string+0x22>
     a4e:	8f 01       	movw	r16, r30
     a50:	c0 e0       	ldi	r28, 0x00	; 0
	LCD_write_data(string[i]);
     a52:	c1 df       	rcall	.-126    	; 0x9d6 <LCD_write_data>
}

void LCD_write_string(char *string)
{
	uint8_t i;
	for(i=0; string[i]; i++)
     a54:	cf 5f       	subi	r28, 0xFF	; 255
     a56:	f8 01       	movw	r30, r16
     a58:	ec 0f       	add	r30, r28
     a5a:	f1 1d       	adc	r31, r1
     a5c:	80 81       	ld	r24, Z
     a5e:	81 11       	cpse	r24, r1
     a60:	f8 cf       	rjmp	.-16     	; 0xa52 <LCD_write_string+0x12>
	LCD_write_data(string[i]);
}
     a62:	cf 91       	pop	r28
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	08 95       	ret

00000a6a <LCD_goto_XY>:
	row %= 2;
	
	uint8_t address = (0x40 * row) +col;
	uint8_t command = 0x80 + address;
	
	LCD_write_command(command);
     a6a:	81 70       	andi	r24, 0x01	; 1
     a6c:	6f 70       	andi	r22, 0x0F	; 15
     a6e:	90 e4       	ldi	r25, 0x40	; 64
     a70:	89 9f       	mul	r24, r25
     a72:	60 0d       	add	r22, r0
     a74:	11 24       	eor	r1, r1
     a76:	86 2f       	mov	r24, r22
     a78:	80 58       	subi	r24, 0x80	; 128
     a7a:	b7 cf       	rjmp	.-146    	; 0x9ea <LCD_write_command>
     a7c:	08 95       	ret

00000a7e <LCD_write_XY_string>:
}

void LCD_write_XY_string(uint8_t row, uint8_t col, char *string)
{
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	ea 01       	movw	r28, r20
	LCD_goto_XY(row, col);
     a84:	f2 df       	rcall	.-28     	; 0xa6a <LCD_goto_XY>
	LCD_write_string(string);
     a86:	ce 01       	movw	r24, r28
     a88:	db df       	rcall	.-74     	; 0xa40 <LCD_write_string>
}
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	08 95       	ret

00000a90 <__vector_1>:
uint8_t reset_Flag = 0, door_Flag = 0;



ISR(INT0_vect)
{
     a90:	1f 92       	push	r1
     a92:	0f 92       	push	r0
     a94:	0f b6       	in	r0, 0x3f	; 63
     a96:	0f 92       	push	r0
     a98:	11 24       	eor	r1, r1
     a9a:	0b b6       	in	r0, 0x3b	; 59
     a9c:	0f 92       	push	r0
     a9e:	2f 93       	push	r18
     aa0:	3f 93       	push	r19
     aa2:	4f 93       	push	r20
     aa4:	5f 93       	push	r21
     aa6:	6f 93       	push	r22
     aa8:	7f 93       	push	r23
     aaa:	8f 93       	push	r24
     aac:	9f 93       	push	r25
     aae:	af 93       	push	r26
     ab0:	bf 93       	push	r27
     ab2:	ef 93       	push	r30
     ab4:	ff 93       	push	r31
     ab6:	2f ef       	ldi	r18, 0xFF	; 255
     ab8:	89 e6       	ldi	r24, 0x69	; 105
     aba:	98 e1       	ldi	r25, 0x18	; 24
     abc:	21 50       	subi	r18, 0x01	; 1
     abe:	80 40       	sbci	r24, 0x00	; 0
     ac0:	90 40       	sbci	r25, 0x00	; 0
     ac2:	e1 f7       	brne	.-8      	; 0xabc <__vector_1+0x2c>
     ac4:	00 c0       	rjmp	.+0      	; 0xac6 <__vector_1+0x36>
     ac6:	00 00       	nop
	_delay_ms(500);
	EIFR |= (1 << 3);
     ac8:	88 b7       	in	r24, 0x38	; 56
     aca:	88 60       	ori	r24, 0x08	; 8
     acc:	88 bf       	out	0x38, r24	; 56
	
	if(main_power == off)
     ace:	80 91 94 08 	lds	r24, 0x0894	; 0x800894 <main_power>
     ad2:	81 11       	cpse	r24, r1
     ad4:	05 c0       	rjmp	.+10     	; 0xae0 <__vector_1+0x50>
	{
		main_power = on;
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	80 93 94 08 	sts	0x0894, r24	; 0x800894 <main_power>
		start_sound();
     adc:	1d dc       	rcall	.-1990   	; 0x318 <start_sound>
     ade:	19 c0       	rjmp	.+50     	; 0xb12 <__vector_1+0x82>
	}
	else if(main_power == on)
     ae0:	81 30       	cpi	r24, 0x01	; 1
	{
		off_sound();
     ae2:	b9 f4       	brne	.+46     	; 0xb12 <__vector_1+0x82>
     ae4:	54 dc       	rcall	.-1880   	; 0x38e <off_sound>
		whole_state = setting;
     ae6:	10 92 95 08 	sts	0x0895, r1	; 0x800895 <whole_state>
		yeyak = no;
     aea:	10 92 93 08 	sts	0x0893, r1	; 0x800893 <yeyak>
		washer = watering;
     aee:	10 92 96 08 	sts	0x0896, r1	; 0x800896 <washer>
		water_Flag_reset();
     af2:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <water_Flag_reset>
		daegi_flag_reset();
     af6:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <daegi_flag_reset>
		DCmotorstop();
     afa:	48 de       	rcall	.-880    	; 0x78c <DCmotorstop>
		nobuzzer();
     afc:	d3 db       	rcall	.-2138   	; 0x2a4 <nobuzzer>
     afe:	10 92 92 08 	sts	0x0892, r1	; 0x800892 <menu>
		menu = 0;
     b02:	e5 e6       	ldi	r30, 0x65	; 101
		PORTG &= ~(1);
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	80 81       	ld	r24, Z
     b08:	8e 7f       	andi	r24, 0xFE	; 254
     b0a:	80 83       	st	Z, r24
		PORTE = 0x00;
     b0c:	13 b8       	out	0x03, r1	; 3
		main_power = off;
     b0e:	10 92 94 08 	sts	0x0894, r1	; 0x800894 <main_power>
	}
	LCD_clear();
     b12:	75 df       	rcall	.-278    	; 0x9fe <LCD_clear>
     b14:	ff 91       	pop	r31
}
     b16:	ef 91       	pop	r30
     b18:	bf 91       	pop	r27
     b1a:	af 91       	pop	r26
     b1c:	9f 91       	pop	r25
     b1e:	8f 91       	pop	r24
     b20:	7f 91       	pop	r23
     b22:	6f 91       	pop	r22
     b24:	5f 91       	pop	r21
     b26:	4f 91       	pop	r20
     b28:	3f 91       	pop	r19
     b2a:	2f 91       	pop	r18
     b2c:	0f 90       	pop	r0
     b2e:	0b be       	out	0x3b, r0	; 59
     b30:	0f 90       	pop	r0
     b32:	0f be       	out	0x3f, r0	; 63
     b34:	0f 90       	pop	r0
     b36:	1f 90       	pop	r1
     b38:	18 95       	reti

00000b3a <__vector_2>:
     b3a:	1f 92       	push	r1


ISR(INT1_vect)
{
     b3c:	0f 92       	push	r0
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	0f 92       	push	r0
     b42:	11 24       	eor	r1, r1
     b44:	0b b6       	in	r0, 0x3b	; 59
     b46:	0f 92       	push	r0
     b48:	2f 93       	push	r18
     b4a:	3f 93       	push	r19
     b4c:	4f 93       	push	r20
     b4e:	5f 93       	push	r21
     b50:	6f 93       	push	r22
     b52:	7f 93       	push	r23
     b54:	8f 93       	push	r24
     b56:	9f 93       	push	r25
     b58:	af 93       	push	r26
     b5a:	bf 93       	push	r27
     b5c:	ef 93       	push	r30
     b5e:	ff 93       	push	r31
     b60:	2f ef       	ldi	r18, 0xFF	; 255
     b62:	89 e6       	ldi	r24, 0x69	; 105
     b64:	98 e1       	ldi	r25, 0x18	; 24
     b66:	21 50       	subi	r18, 0x01	; 1
     b68:	80 40       	sbci	r24, 0x00	; 0
     b6a:	90 40       	sbci	r25, 0x00	; 0
     b6c:	e1 f7       	brne	.-8      	; 0xb66 <__vector_2+0x2c>
     b6e:	00 c0       	rjmp	.+0      	; 0xb70 <__vector_2+0x36>
     b70:	00 00       	nop
	_delay_ms(500);
	
	switch(whole_state)
     b72:	80 91 95 08 	lds	r24, 0x0895	; 0x800895 <whole_state>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	81 f0       	breq	.+32     	; 0xb9a <__vector_2+0x60>
     b7a:	83 30       	cpi	r24, 0x03	; 3
     b7c:	c9 f4       	brne	.+50     	; 0xbb0 <__vector_2+0x76>
	{
		case run:
		if(reset_Flag == 0)
     b7e:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <reset_Flag>
     b82:	81 11       	cpse	r24, r1
     b84:	15 c0       	rjmp	.+42     	; 0xbb0 <__vector_2+0x76>
		{
			whole_state = pause;
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <whole_state>
			reset_Flag =1;
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <reset_Flag>
			DCmotorstop();
     b92:	fc dd       	rcall	.-1032   	; 0x78c <DCmotorstop>
			pause_time();
     b94:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <pause_time>
     b98:	0b c0       	rjmp	.+22     	; 0xbb0 <__vector_2+0x76>
		}
		break;
	
		case pause:
		if(reset_Flag == 1)
     b9a:	80 91 6b 05 	lds	r24, 0x056B	; 0x80056b <reset_Flag>
     b9e:	81 30       	cpi	r24, 0x01	; 1
     ba0:	39 f4       	brne	.+14     	; 0xbb0 <__vector_2+0x76>
		{
			whole_state = run;
     ba2:	83 e0       	ldi	r24, 0x03	; 3
     ba4:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <whole_state>
			restart_time();
     ba8:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <restart_time>
			reset_Flag = 0;
     bac:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <reset_Flag>
		}
		break;
	}
	LCD_clear();
     bb0:	26 df       	rcall	.-436    	; 0x9fe <LCD_clear>
}
     bb2:	ff 91       	pop	r31
     bb4:	ef 91       	pop	r30
     bb6:	bf 91       	pop	r27
     bb8:	af 91       	pop	r26
     bba:	9f 91       	pop	r25
     bbc:	8f 91       	pop	r24
     bbe:	7f 91       	pop	r23
     bc0:	6f 91       	pop	r22
     bc2:	5f 91       	pop	r21
     bc4:	4f 91       	pop	r20
     bc6:	3f 91       	pop	r19
     bc8:	2f 91       	pop	r18
     bca:	0f 90       	pop	r0
     bcc:	0b be       	out	0x3b, r0	; 59
     bce:	0f 90       	pop	r0
     bd0:	0f be       	out	0x3f, r0	; 63
     bd2:	0f 90       	pop	r0
     bd4:	1f 90       	pop	r1
     bd6:	18 95       	reti

00000bd8 <__vector_3>:

ISR(INT2_vect)
{
     bd8:	1f 92       	push	r1
     bda:	0f 92       	push	r0
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	0f 92       	push	r0
     be0:	11 24       	eor	r1, r1
     be2:	0b b6       	in	r0, 0x3b	; 59
     be4:	0f 92       	push	r0
     be6:	2f 93       	push	r18
     be8:	3f 93       	push	r19
     bea:	4f 93       	push	r20
     bec:	5f 93       	push	r21
     bee:	6f 93       	push	r22
     bf0:	7f 93       	push	r23
     bf2:	8f 93       	push	r24
     bf4:	9f 93       	push	r25
     bf6:	af 93       	push	r26
     bf8:	bf 93       	push	r27
     bfa:	ef 93       	push	r30
     bfc:	ff 93       	push	r31
     bfe:	2f ef       	ldi	r18, 0xFF	; 255
     c00:	89 e6       	ldi	r24, 0x69	; 105
     c02:	98 e1       	ldi	r25, 0x18	; 24
     c04:	21 50       	subi	r18, 0x01	; 1
     c06:	80 40       	sbci	r24, 0x00	; 0
     c08:	90 40       	sbci	r25, 0x00	; 0
     c0a:	e1 f7       	brne	.-8      	; 0xc04 <__vector_3+0x2c>
     c0c:	00 c0       	rjmp	.+0      	; 0xc0e <__vector_3+0x36>
     c0e:	00 00       	nop
	_delay_ms(500);
	
	if(open_door())
     c10:	31 db       	rcall	.-2462   	; 0x274 <open_door>
     c12:	89 2b       	or	r24, r25
     c14:	71 f0       	breq	.+28     	; 0xc32 <__vector_3+0x5a>
	{
		if(whole_state == run)
     c16:	80 91 95 08 	lds	r24, 0x0895	; 0x800895 <whole_state>
     c1a:	83 30       	cpi	r24, 0x03	; 3
     c1c:	c9 f4       	brne	.+50     	; 0xc50 <__vector_3+0x78>
		{
			whole_state = pause;
     c1e:	82 e0       	ldi	r24, 0x02	; 2
     c20:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <whole_state>
			DCmotorstop();
     c24:	b3 dd       	rcall	.-1178   	; 0x78c <DCmotorstop>
			pause_time();
     c26:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <pause_time>
			door_Flag = 1;
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <door_Flag>
     c30:	0f c0       	rjmp	.+30     	; 0xc50 <__vector_3+0x78>
		}
	}
	
	else if((whole_state == pause) && (door_Flag == 1))
     c32:	80 91 95 08 	lds	r24, 0x0895	; 0x800895 <whole_state>
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	59 f4       	brne	.+22     	; 0xc50 <__vector_3+0x78>
     c3a:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <door_Flag>
     c3e:	81 30       	cpi	r24, 0x01	; 1
     c40:	39 f4       	brne	.+14     	; 0xc50 <__vector_3+0x78>
	{
		whole_state = run;
     c42:	83 e0       	ldi	r24, 0x03	; 3
     c44:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <whole_state>
		restart_time();
     c48:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <restart_time>
		door_Flag = 0;
     c4c:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <door_Flag>
	}
	LCD_clear();
     c50:	d6 de       	rcall	.-596    	; 0x9fe <LCD_clear>
}
     c52:	ff 91       	pop	r31
     c54:	ef 91       	pop	r30
     c56:	bf 91       	pop	r27
     c58:	af 91       	pop	r26
     c5a:	9f 91       	pop	r25
     c5c:	8f 91       	pop	r24
     c5e:	7f 91       	pop	r23
     c60:	6f 91       	pop	r22
     c62:	5f 91       	pop	r21
     c64:	4f 91       	pop	r20
     c66:	3f 91       	pop	r19
     c68:	2f 91       	pop	r18
     c6a:	0f 90       	pop	r0
     c6c:	0b be       	out	0x3b, r0	; 59
     c6e:	0f 90       	pop	r0
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	0f 90       	pop	r0
     c74:	1f 90       	pop	r1
     c76:	18 95       	reti

00000c78 <__vector_15>:


ISR(TIMER0_COMP_vect)
{
     c78:	1f 92       	push	r1
     c7a:	0f 92       	push	r0
     c7c:	0f b6       	in	r0, 0x3f	; 63
     c7e:	0f 92       	push	r0
     c80:	11 24       	eor	r1, r1
     c82:	0b b6       	in	r0, 0x3b	; 59
     c84:	0f 92       	push	r0
     c86:	2f 93       	push	r18
     c88:	3f 93       	push	r19
     c8a:	4f 93       	push	r20
     c8c:	5f 93       	push	r21
     c8e:	6f 93       	push	r22
     c90:	7f 93       	push	r23
     c92:	8f 93       	push	r24
     c94:	9f 93       	push	r25
     c96:	af 93       	push	r26
     c98:	bf 93       	push	r27
     c9a:	ef 93       	push	r30
     c9c:	ff 93       	push	r31
	incMilliSec();
     c9e:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <incMilliSec>
	incTime();
     ca2:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <incTime>
}
     ca6:	ff 91       	pop	r31
     ca8:	ef 91       	pop	r30
     caa:	bf 91       	pop	r27
     cac:	af 91       	pop	r26
     cae:	9f 91       	pop	r25
     cb0:	8f 91       	pop	r24
     cb2:	7f 91       	pop	r23
     cb4:	6f 91       	pop	r22
     cb6:	5f 91       	pop	r21
     cb8:	4f 91       	pop	r20
     cba:	3f 91       	pop	r19
     cbc:	2f 91       	pop	r18
     cbe:	0f 90       	pop	r0
     cc0:	0b be       	out	0x3b, r0	; 59
     cc2:	0f 90       	pop	r0
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	0f 90       	pop	r0
     cc8:	1f 90       	pop	r1
     cca:	18 95       	reti

00000ccc <main>:

int main(void)
{
	uint8_t *dongjak;
	
	ADC_Init();
     ccc:	fe d9       	rcall	.-3076   	; 0xca <ADC_Init>
	LCD_init();
     cce:	a0 de       	rcall	.-704    	; 0xa10 <LCD_init>
	buzzerInit();
     cd0:	ed da       	rcall	.-2598   	; 0x2ac <buzzerInit>
	timer0init();
     cd2:	0e 94 94 0f 	call	0x1f28	; 0x1f28 <timer0init>
	DCmotorInit();
	DS1302_Init();
     cd6:	4a dd       	rcall	.-1388   	; 0x76c <DCmotorInit>
     cd8:	76 dd       	rcall	.-1300   	; 0x7c6 <DS1302_Init>
	Button_Init();
     cda:	08 da       	rcall	.-3056   	; 0xec <Button_Init>
     cdc:	53 de       	rcall	.-858    	; 0x984 <DS1302_chogi>
	DS1302_chogi();
     cde:	89 b7       	in	r24, 0x39	; 57
     ce0:	87 60       	ori	r24, 0x07	; 7
	
	EIMSK |= (1 << INT0) | (1 << INT1) | (1 << INT2) ;
     ce2:	89 bf       	out	0x39, r24	; 57
     ce4:	ea e6       	ldi	r30, 0x6A	; 106
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
	EICRA |= (1 << ISC01) | (1 << ISC00);	//인터럽트 0 rising edge
     ce8:	80 81       	ld	r24, Z
     cea:	83 60       	ori	r24, 0x03	; 3
     cec:	80 83       	st	Z, r24
     cee:	80 81       	ld	r24, Z
     cf0:	8c 60       	ori	r24, 0x0C	; 12
	EICRA |= (1 << ISC11) | (1 << ISC10);	//인터럽트 1 rising edge
     cf2:	80 83       	st	Z, r24
     cf4:	80 81       	ld	r24, Z
     cf6:	80 61       	ori	r24, 0x10	; 16
	EICRA |= (0 << ISC21) | (1 << ISC20);	//인터럽트 1 falling edge
     cf8:	80 83       	st	Z, r24
     cfa:	c1 e0       	ldi	r28, 0x01	; 1
     cfc:	c0 93 64 00 	sts	0x0064, r28	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	DDRG = 0x01;
     d00:	c0 93 65 00 	sts	0x0065, r28	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
	PORTG = 0x01;
     d04:	81 b3       	in	r24, 0x11	; 17
     d06:	80 6f       	ori	r24, 0xF0	; 240
	DDRD |= 0xf0;
     d08:	81 bb       	out	0x11, r24	; 17
     d0a:	82 b3       	in	r24, 0x12	; 18
     d0c:	8f 70       	andi	r24, 0x0F	; 15
	PORTD &= ~(0xf0);
     d0e:	82 bb       	out	0x12, r24	; 18
     d10:	78 94       	sei
	
	sei();
	
	LCD_write_XY_string(0,0, "start");
     d12:	47 ee       	ldi	r20, 0xE7	; 231
     d14:	52 e0       	ldi	r21, 0x02	; 2
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	b1 de       	rcall	.-670    	; 0xa7e <LCD_write_XY_string>
     d1c:	fd da       	rcall	.-2566   	; 0x318 <start_sound>
	start_sound();
     d1e:	07 d3       	rcall	.+1550   	; 0x132e <chogi_timer>
     d20:	10 92 95 08 	sts	0x0895, r1	; 0x800895 <whole_state>

	chogi_timer();
     d24:	10 92 93 08 	sts	0x0893, r1	; 0x800893 <yeyak>
	whole_state = setting;
     d28:	10 92 96 08 	sts	0x0896, r1	; 0x800896 <washer>
	yeyak = no;
     d2c:	c0 93 94 08 	sts	0x0894, r28	; 0x800894 <main_power>
	washer = watering;
     d30:	c5 e6       	ldi	r28, 0x65	; 101
	main_power = on;
     d32:	d0 e0       	ldi	r29, 0x00	; 0
     d34:	04 e6       	ldi	r16, 0x64	; 100
			water_Flag_reset();
			daegi_flag_reset();
			DCmotorstop();
			nobuzzer();
			menu = 0;
			PORTG &= ~(1);
     d36:	10 e0       	ldi	r17, 0x00	; 0
     d38:	80 91 94 08 	lds	r24, 0x0894	; 0x800894 <main_power>
			PORTE = 0x00;
			PORTD = 0x00;
			break;
			
			case on:
			DDRG |= 0x01;
     d3c:	88 23       	and	r24, r24
	washer = watering;
	main_power = on;
	
	while (1)
	{
		switch(main_power)
     d3e:	19 f0       	breq	.+6      	; 0xd46 <main+0x7a>
     d40:	81 30       	cpi	r24, 0x01	; 1
     d42:	09 f1       	breq	.+66     	; 0xd86 <main+0xba>
     d44:	fb cf       	rjmp	.-10     	; 0xd3c <main+0x70>
     d46:	4d ee       	ldi	r20, 0xED	; 237
     d48:	52 e0       	ldi	r21, 0x02	; 2
		{
			case off:
			LCD_write_XY_string(0, 0, "                ");
     d4a:	60 e0       	ldi	r22, 0x00	; 0
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	97 de       	rcall	.-722    	; 0xa7e <LCD_write_XY_string>
     d50:	4e ef       	ldi	r20, 0xFE	; 254
     d52:	52 e0       	ldi	r21, 0x02	; 2
     d54:	60 e0       	ldi	r22, 0x00	; 0
			LCD_write_XY_string(1, 0, "   Sleeping...zz  ");
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	92 de       	rcall	.-732    	; 0xa7e <LCD_write_XY_string>
     d5a:	10 92 95 08 	sts	0x0895, r1	; 0x800895 <whole_state>
     d5e:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <reset_Flag>
			whole_state = setting;
     d62:	10 92 93 08 	sts	0x0893, r1	; 0x800893 <yeyak>
			reset_Flag = 0;
     d66:	10 92 96 08 	sts	0x0896, r1	; 0x800896 <washer>
			yeyak = no;
     d6a:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <water_Flag_reset>
			washer = watering;
     d6e:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <daegi_flag_reset>
			water_Flag_reset();
     d72:	0c dd       	rcall	.-1512   	; 0x78c <DCmotorstop>
			daegi_flag_reset();
     d74:	97 da       	rcall	.-2770   	; 0x2a4 <nobuzzer>
     d76:	10 92 92 08 	sts	0x0892, r1	; 0x800892 <menu>
			DCmotorstop();
     d7a:	88 81       	ld	r24, Y
			nobuzzer();
     d7c:	8e 7f       	andi	r24, 0xFE	; 254
     d7e:	88 83       	st	Y, r24
			menu = 0;
     d80:	13 b8       	out	0x03, r1	; 3
     d82:	12 ba       	out	0x12, r1	; 18
			PORTG &= ~(1);
     d84:	d9 cf       	rjmp	.-78     	; 0xd38 <main+0x6c>
     d86:	f8 01       	movw	r30, r16
     d88:	80 81       	ld	r24, Z
			PORTE = 0x00;
     d8a:	81 60       	ori	r24, 0x01	; 1
			PORTD = 0x00;
     d8c:	80 83       	st	Z, r24
			break;
     d8e:	81 e0       	ldi	r24, 0x01	; 1
			
			case on:
			DDRG |= 0x01;
     d90:	88 83       	st	Y, r24
     d92:	80 91 95 08 	lds	r24, 0x0895	; 0x800895 <whole_state>
			PORTG = 0x01;
     d96:	81 30       	cpi	r24, 0x01	; 1
     d98:	51 f0       	breq	.+20     	; 0xdae <main+0xe2>
			switch(whole_state)
     d9a:	28 f0       	brcs	.+10     	; 0xda6 <main+0xda>
     d9c:	82 30       	cpi	r24, 0x02	; 2
     d9e:	49 f0       	breq	.+18     	; 0xdb2 <main+0xe6>
     da0:	83 30       	cpi	r24, 0x03	; 3
     da2:	99 f0       	breq	.+38     	; 0xdca <main+0xfe>
     da4:	c9 cf       	rjmp	.-110    	; 0xd38 <main+0x6c>
     da6:	f2 dc       	rcall	.-1564   	; 0x78c <DCmotorstop>
     da8:	17 d1       	rcall	.+558    	; 0xfd8 <step_setting_menu>
			{
				case setting:
				DCmotorstop();
     daa:	7c 01       	movw	r14, r24
				dongjak = step_setting_menu();
     dac:	c5 cf       	rjmp	.-118    	; 0xd38 <main+0x6c>
     dae:	1f d6       	rcall	.+3134   	; 0x19ee <yeyakye>
				break;
     db0:	c3 cf       	rjmp	.-122    	; 0xd38 <main+0x6c>
				
				case yeah:
				yeyakye();
     db2:	41 e1       	ldi	r20, 0x11	; 17
     db4:	53 e0       	ldi	r21, 0x03	; 3
				break;
				
				case pause:
				LCD_write_XY_string(0, 0, "     pause     ");
     db6:	60 e0       	ldi	r22, 0x00	; 0
     db8:	80 e0       	ldi	r24, 0x00	; 0
     dba:	61 de       	rcall	.-830    	; 0xa7e <LCD_write_XY_string>
     dbc:	4d ee       	ldi	r20, 0xED	; 237
     dbe:	52 e0       	ldi	r21, 0x02	; 2
     dc0:	60 e0       	ldi	r22, 0x00	; 0
				LCD_write_XY_string(1, 0, "                ");
     dc2:	81 e0       	ldi	r24, 0x01	; 1
     dc4:	5c de       	rcall	.-840    	; 0xa7e <LCD_write_XY_string>
     dc6:	e2 dc       	rcall	.-1596   	; 0x78c <DCmotorstop>
     dc8:	b7 cf       	rjmp	.-146    	; 0xd38 <main+0x6c>
     dca:	80 91 93 08 	lds	r24, 0x0893	; 0x800893 <yeyak>
				DCmotorstop();
     dce:	88 23       	and	r24, r24
     dd0:	11 f0       	breq	.+4      	; 0xdd6 <main+0x10a>
				break;
     dd2:	3a d7       	rcall	.+3700   	; 0x1c48 <waiting_yeyak>
				
				case run:
				if(yeyak) waiting_yeyak();
     dd4:	b1 cf       	rjmp	.-158    	; 0xd38 <main+0x6c>
     dd6:	c7 01       	movw	r24, r14
     dd8:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <run_washer>
     ddc:	ad cf       	rjmp	.-166    	; 0xd38 <main+0x6c>

00000dde <setting_washer>:

uint32_t* setting_washer(uint32_t _mode)
{
	uint32_t *temp;  // 실제 사용될 모드와 커스텀 값이 들어갈 포인터

	switch(_mode)
     dde:	62 30       	cpi	r22, 0x02	; 2
     de0:	71 05       	cpc	r23, r1
     de2:	81 05       	cpc	r24, r1
     de4:	91 05       	cpc	r25, r1
     de6:	e9 f0       	breq	.+58     	; 0xe22 <setting_washer+0x44>
     de8:	58 f4       	brcc	.+22     	; 0xe00 <setting_washer+0x22>
     dea:	61 15       	cp	r22, r1
     dec:	71 05       	cpc	r23, r1
     dee:	81 05       	cpc	r24, r1
     df0:	91 05       	cpc	r25, r1
     df2:	89 f0       	breq	.+34     	; 0xe16 <setting_washer+0x38>
     df4:	61 30       	cpi	r22, 0x01	; 1
     df6:	71 05       	cpc	r23, r1
     df8:	81 05       	cpc	r24, r1
     dfa:	91 05       	cpc	r25, r1
     dfc:	79 f0       	breq	.+30     	; 0xe1c <setting_washer+0x3e>
     dfe:	1f c0       	rjmp	.+62     	; 0xe3e <setting_washer+0x60>
     e00:	63 30       	cpi	r22, 0x03	; 3
     e02:	71 05       	cpc	r23, r1
     e04:	81 05       	cpc	r24, r1
     e06:	91 05       	cpc	r25, r1
     e08:	79 f0       	breq	.+30     	; 0xe28 <setting_washer+0x4a>
     e0a:	64 30       	cpi	r22, 0x04	; 4
     e0c:	71 05       	cpc	r23, r1
     e0e:	81 05       	cpc	r24, r1
     e10:	91 05       	cpc	r25, r1
     e12:	99 f0       	breq	.+38     	; 0xe3a <setting_washer+0x5c>
     e14:	14 c0       	rjmp	.+40     	; 0xe3e <setting_washer+0x60>
	{
		case 0:
		temp = standard;
     e16:	2d e3       	ldi	r18, 0x3D	; 61
     e18:	31 e0       	ldi	r19, 0x01	; 1
     e1a:	11 c0       	rjmp	.+34     	; 0xe3e <setting_washer+0x60>
		break;
		
		case 1:
		temp = gangryuk;
     e1c:	29 e2       	ldi	r18, 0x29	; 41
     e1e:	31 e0       	ldi	r19, 0x01	; 1
		break;
     e20:	0e c0       	rjmp	.+28     	; 0xe3e <setting_washer+0x60>
		
		case 2:
		temp = boolim;
     e22:	25 e1       	ldi	r18, 0x15	; 21
     e24:	31 e0       	ldi	r19, 0x01	; 1
		break;
     e26:	0b c0       	rjmp	.+22     	; 0xe3e <setting_washer+0x60>
		
		case 3:
		temp = salmeum;
		hotwater = 1;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	90 93 6f 08 	sts	0x086F, r25	; 0x80086f <hotwater+0x1>
     e30:	80 93 6e 08 	sts	0x086E, r24	; 0x80086e <hotwater>
		case 2:
		temp = boolim;
		break;
		
		case 3:
		temp = salmeum;
     e34:	21 e0       	ldi	r18, 0x01	; 1
     e36:	31 e0       	ldi	r19, 0x01	; 1
		hotwater = 1;
		break;
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <setting_washer+0x60>
		
		case 4:
		temp = custom;
     e3a:	26 e7       	ldi	r18, 0x76	; 118
     e3c:	38 e0       	ldi	r19, 0x08	; 8
		break;
	}
	return temp;
}
     e3e:	c9 01       	movw	r24, r18
     e40:	08 95       	ret

00000e42 <tal>:
		chogi_timer();
	}
}

void tal(uint32_t _num)
{
     e42:	8f 92       	push	r8
     e44:	9f 92       	push	r9
     e46:	af 92       	push	r10
     e48:	bf 92       	push	r11
     e4a:	cf 92       	push	r12
     e4c:	df 92       	push	r13
     e4e:	ef 92       	push	r14
     e50:	ff 92       	push	r15
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
     e5a:	4b 01       	movw	r8, r22
     e5c:	5c 01       	movw	r10, r24
	static int endtime , nowtime = 0, hbuff[16] = {0}, mbuff[16] = {0}, sbuff[16] = {0};
	uint8_t hh, mm, ss;
	
	endtime = 10*_num;
     e5e:	9b 01       	movw	r18, r22
     e60:	22 0f       	add	r18, r18
     e62:	33 1f       	adc	r19, r19
     e64:	cb 01       	movw	r24, r22
     e66:	88 0f       	add	r24, r24
     e68:	99 1f       	adc	r25, r25
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	82 0f       	add	r24, r18
     e74:	93 1f       	adc	r25, r19
     e76:	90 93 db 05 	sts	0x05DB, r25	; 0x8005db <endtime.2464+0x1>
     e7a:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <endtime.2464>
	LCD_write_XY_string(0, 0, "   Dehydrating  ");
     e7e:	41 e2       	ldi	r20, 0x21	; 33
     e80:	53 e0       	ldi	r21, 0x03	; 3
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	fb dd       	rcall	.-1034   	; 0xa7e <LCD_write_XY_string>
	DS1302_GetTime(&remains);
     e88:	89 ea       	ldi	r24, 0xA9	; 169
     e8a:	98 e0       	ldi	r25, 0x08	; 8
     e8c:	32 dd       	rcall	.-1436   	; 0x8f2 <DS1302_GetTime>
	nowtime = remains.hour*3600 + remains.minutes*60 + remains.seconds;
     e8e:	c9 ea       	ldi	r28, 0xA9	; 169
     e90:	d8 e0       	ldi	r29, 0x08	; 8
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	60 e1       	ldi	r22, 0x10	; 16
     e96:	7e e0       	ldi	r23, 0x0E	; 14
     e98:	86 9f       	mul	r24, r22
     e9a:	90 01       	movw	r18, r0
     e9c:	87 9f       	mul	r24, r23
     e9e:	30 0d       	add	r19, r0
     ea0:	11 24       	eor	r1, r1
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	9c e3       	ldi	r25, 0x3C	; 60
     ea6:	89 9f       	mul	r24, r25
     ea8:	20 0d       	add	r18, r0
     eaa:	31 1d       	adc	r19, r1
     eac:	11 24       	eor	r1, r1
     eae:	88 81       	ld	r24, Y
     eb0:	28 0f       	add	r18, r24
     eb2:	31 1d       	adc	r19, r1
     eb4:	30 93 d9 05 	sts	0x05D9, r19	; 0x8005d9 <nowtime.2465+0x1>
     eb8:	20 93 d8 05 	sts	0x05D8, r18	; 0x8005d8 <nowtime.2465>
	hh = (endtime-nowtime)/3600;
     ebc:	00 91 da 05 	lds	r16, 0x05DA	; 0x8005da <endtime.2464>
     ec0:	10 91 db 05 	lds	r17, 0x05DB	; 0x8005db <endtime.2464+0x1>
     ec4:	02 1b       	sub	r16, r18
     ec6:	13 0b       	sbc	r17, r19
	mm = (endtime-nowtime)%3600/60;
	ss = (endtime-nowtime)%60;
	sprintf(hbuff,"   %02d:", hh);
     ec8:	c8 01       	movw	r24, r16
     eca:	0e 94 47 10 	call	0x208e	; 0x208e <__divmodhi4>
     ece:	6c 01       	movw	r12, r24
     ed0:	77 27       	eor	r23, r23
     ed2:	7f 93       	push	r23
     ed4:	6f 93       	push	r22
     ed6:	80 e4       	ldi	r24, 0x40	; 64
     ed8:	95 e0       	ldi	r25, 0x05	; 5
     eda:	9f 93       	push	r25
     edc:	8f 93       	push	r24
     ede:	88 eb       	ldi	r24, 0xB8	; 184
     ee0:	95 e0       	ldi	r25, 0x05	; 5
     ee2:	9f 93       	push	r25
     ee4:	8f 93       	push	r24
     ee6:	0e 94 ac 10 	call	0x2158	; 0x2158 <sprintf>
	sprintf(mbuff,"%02d:", mm);
     eea:	0f 2e       	mov	r0, r31
     eec:	fc e3       	ldi	r31, 0x3C	; 60
     eee:	ef 2e       	mov	r14, r31
     ef0:	f1 2c       	mov	r15, r1
     ef2:	f0 2d       	mov	r31, r0
     ef4:	c6 01       	movw	r24, r12
     ef6:	b7 01       	movw	r22, r14
     ef8:	0e 94 47 10 	call	0x208e	; 0x208e <__divmodhi4>
     efc:	77 27       	eor	r23, r23
     efe:	7f 93       	push	r23
     f00:	6f 93       	push	r22
     f02:	83 e4       	ldi	r24, 0x43	; 67
     f04:	95 e0       	ldi	r25, 0x05	; 5
     f06:	9f 93       	push	r25
     f08:	8f 93       	push	r24
     f0a:	88 e9       	ldi	r24, 0x98	; 152
     f0c:	95 e0       	ldi	r25, 0x05	; 5
     f0e:	9f 93       	push	r25
     f10:	8f 93       	push	r24
     f12:	0e 94 ac 10 	call	0x2158	; 0x2158 <sprintf>
	sprintf(sbuff,"%02d    ", ss);
     f16:	c8 01       	movw	r24, r16
     f18:	b7 01       	movw	r22, r14
     f1a:	0e 94 47 10 	call	0x208e	; 0x208e <__divmodhi4>
     f1e:	99 27       	eor	r25, r25
     f20:	9f 93       	push	r25
     f22:	8f 93       	push	r24
     f24:	82 e3       	ldi	r24, 0x32	; 50
     f26:	93 e0       	ldi	r25, 0x03	; 3
     f28:	9f 93       	push	r25
     f2a:	8f 93       	push	r24
     f2c:	88 e7       	ldi	r24, 0x78	; 120
     f2e:	95 e0       	ldi	r25, 0x05	; 5
     f30:	9f 93       	push	r25
     f32:	8f 93       	push	r24
     f34:	0e 94 ac 10 	call	0x2158	; 0x2158 <sprintf>
	DCmotorright(255);
     f38:	8f ef       	ldi	r24, 0xFF	; 255
     f3a:	3b dc       	rcall	.-1930   	; 0x7b2 <DCmotorright>
	if(checker != remains.seconds)
     f3c:	8d b7       	in	r24, 0x3d	; 61
     f3e:	9e b7       	in	r25, 0x3e	; 62
     f40:	42 96       	adiw	r24, 0x12	; 18
     f42:	0f b6       	in	r0, 0x3f	; 63
     f44:	f8 94       	cli
     f46:	9e bf       	out	0x3e, r25	; 62
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	8d bf       	out	0x3d, r24	; 61
     f4c:	98 81       	ld	r25, Y
     f4e:	80 91 8a 08 	lds	r24, 0x088A	; 0x80088a <checker>
     f52:	98 17       	cp	r25, r24
     f54:	99 f0       	breq	.+38     	; 0xf7c <tal+0x13a>
	{
		LCD_write_XY_string(1, 0, hbuff);
     f56:	48 eb       	ldi	r20, 0xB8	; 184
     f58:	55 e0       	ldi	r21, 0x05	; 5
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	8f dd       	rcall	.-1250   	; 0xa7e <LCD_write_XY_string>
		LCD_write_XY_string(1, 6, mbuff);
     f60:	48 e9       	ldi	r20, 0x98	; 152
     f62:	55 e0       	ldi	r21, 0x05	; 5
     f64:	66 e0       	ldi	r22, 0x06	; 6
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	8a dd       	rcall	.-1260   	; 0xa7e <LCD_write_XY_string>
		LCD_write_XY_string(1, 9, sbuff);
     f6a:	48 e7       	ldi	r20, 0x78	; 120
     f6c:	55 e0       	ldi	r21, 0x05	; 5
     f6e:	69 e0       	ldi	r22, 0x09	; 9
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	85 dd       	rcall	.-1270   	; 0xa7e <LCD_write_XY_string>
     f74:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <remains>
		checker = remains.seconds;
     f78:	80 93 8a 08 	sts	0x088A, r24	; 0x80088a <checker>
     f7c:	20 91 da 05 	lds	r18, 0x05DA	; 0x8005da <endtime.2464>
	}
	if(((endtime - nowtime)==0) || (_num == 0))
     f80:	30 91 db 05 	lds	r19, 0x05DB	; 0x8005db <endtime.2464+0x1>
     f84:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <nowtime.2465>
     f88:	90 91 d9 05 	lds	r25, 0x05D9	; 0x8005d9 <nowtime.2465+0x1>
     f8c:	28 17       	cp	r18, r24
     f8e:	39 07       	cpc	r19, r25
     f90:	21 f0       	breq	.+8      	; 0xf9a <tal+0x158>
     f92:	89 28       	or	r8, r9
     f94:	8a 28       	or	r8, r10
     f96:	8b 28       	or	r8, r11
     f98:	91 f4       	brne	.+36     	; 0xfbe <tal+0x17c>
	{
		DCmotorstop();
     f9a:	f8 db       	rcall	.-2064   	; 0x78c <DCmotorstop>
     f9c:	30 dd       	rcall	.-1440   	; 0x9fe <LCD_clear>
		LCD_clear();
     f9e:	10 92 96 08 	sts	0x0896, r1	; 0x800896 <washer>
		washer = watering;
     fa2:	10 92 95 08 	sts	0x0895, r1	; 0x800895 <whole_state>
		whole_state = setting;
     fa6:	10 92 94 08 	sts	0x0894, r1	; 0x800894 <main_power>
		main_power = off;
     faa:	10 92 6f 08 	sts	0x086F, r1	; 0x80086f <hotwater+0x1>
		hotwater = 0;
     fae:	10 92 6e 08 	sts	0x086E, r1	; 0x80086e <hotwater>
		LCD_write_XY_string(0, 0, "      end       ");
     fb2:	4b e3       	ldi	r20, 0x3B	; 59
     fb4:	53 e0       	ldi	r21, 0x03	; 3
     fb6:	60 e0       	ldi	r22, 0x00	; 0
     fb8:	80 e0       	ldi	r24, 0x00	; 0
     fba:	61 dd       	rcall	.-1342   	; 0xa7e <LCD_write_XY_string>
     fbc:	23 da       	rcall	.-3002   	; 0x404 <bear_sound>
		bear_sound();
     fbe:	df 91       	pop	r29
     fc0:	cf 91       	pop	r28
	}
}
     fc2:	1f 91       	pop	r17
     fc4:	0f 91       	pop	r16
     fc6:	ff 90       	pop	r15
     fc8:	ef 90       	pop	r14
     fca:	df 90       	pop	r13
     fcc:	cf 90       	pop	r12
     fce:	bf 90       	pop	r11
     fd0:	af 90       	pop	r10
     fd2:	9f 90       	pop	r9
     fd4:	8f 90       	pop	r8
     fd6:	08 95       	ret

00000fd8 <step_setting_menu>:
     fd8:	cf 93       	push	r28
     fda:	df 93       	push	r29
	}
}


uint8_t* step_setting_menu()
{
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	a6 97       	sbiw	r28, 0x26	; 38
     fe2:	0f b6       	in	r0, 0x3f	; 63
     fe4:	f8 94       	cli
     fe6:	de bf       	out	0x3e, r29	; 62
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	cd bf       	out	0x3d, r28	; 61
	char *menu_name[5] = {"   Standard    ", "   PowerFul   ", " Long Watering  ", "Boiling Washing" ," Custom Washing "};
     fec:	8a e0       	ldi	r24, 0x0A	; 10
     fee:	e1 e5       	ldi	r30, 0x51	; 81
     ff0:	f1 e0       	ldi	r31, 0x01	; 1
     ff2:	de 01       	movw	r26, r28
     ff4:	11 96       	adiw	r26, 0x01	; 1
     ff6:	01 90       	ld	r0, Z+
     ff8:	0d 92       	st	X+, r0
     ffa:	8a 95       	dec	r24
     ffc:	e1 f7       	brne	.-8      	; 0xff6 <step_setting_menu+0x1e>
	char *course_name[6] = {" Soaking Times ", " Washing Power ", " Washing length ", "  Rinse Times  " ," Spin-Dry Times ", " Boiling Water? "};
     ffe:	8c e0       	ldi	r24, 0x0C	; 12
    1000:	eb e5       	ldi	r30, 0x5B	; 91
    1002:	f1 e0       	ldi	r31, 0x01	; 1
    1004:	de 01       	movw	r26, r28
    1006:	1b 96       	adiw	r26, 0x0b	; 11
    1008:	01 90       	ld	r0, Z+
    100a:	0d 92       	st	X+, r0
    100c:	8a 95       	dec	r24
    100e:	e1 f7       	brne	.-8      	; 0x1008 <step_setting_menu+0x30>
	uint8_t buff[16];
	uint8_t *pa = custom;
	static int settingmode = 0, k =0, setak_mode = 0, i= 0;

	switch(menu)
    1010:	80 91 92 08 	lds	r24, 0x0892	; 0x800892 <menu>
    1014:	88 23       	and	r24, r24
    1016:	21 f0       	breq	.+8      	; 0x1020 <step_setting_menu+0x48>
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	09 f4       	brne	.+2      	; 0x101e <step_setting_menu+0x46>
    101c:	73 c0       	rjmp	.+230    	; 0x1104 <__stack+0x5>
    101e:	70 c1       	rjmp	.+736    	; 0x1300 <__stack+0x201>
	{
		case normal:
		LCD_write_XY_string(0,0, "  Select Mode   ");
    1020:	4c e4       	ldi	r20, 0x4C	; 76
    1022:	53 e0       	ldi	r21, 0x03	; 3
    1024:	60 e0       	ldi	r22, 0x00	; 0
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	2a dd       	rcall	.-1452   	; 0xa7e <LCD_write_XY_string>
		if(button(UP_BUTTON)) settingmode ++;
    102a:	82 e0       	ldi	r24, 0x02	; 2
    102c:	66 d8       	rcall	.-3892   	; 0xfa <button>
    102e:	89 2b       	or	r24, r25
    1030:	49 f0       	breq	.+18     	; 0x1044 <step_setting_menu+0x6c>
    1032:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <settingmode.2490>
    1036:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <settingmode.2490+0x1>
    103a:	01 96       	adiw	r24, 0x01	; 1
    103c:	90 93 77 05 	sts	0x0577, r25	; 0x800577 <settingmode.2490+0x1>
    1040:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <settingmode.2490>
		if(settingmode > 4) settingmode = 0;
    1044:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <settingmode.2490>
    1048:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <settingmode.2490+0x1>
    104c:	05 97       	sbiw	r24, 0x05	; 5
    104e:	24 f0       	brlt	.+8      	; 0x1058 <step_setting_menu+0x80>
    1050:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <settingmode.2490+0x1>
    1054:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <settingmode.2490>
		if(button(DOWN_BUTTON)) settingmode --;
    1058:	83 e0       	ldi	r24, 0x03	; 3
    105a:	4f d8       	rcall	.-3938   	; 0xfa <button>
    105c:	89 2b       	or	r24, r25
    105e:	49 f0       	breq	.+18     	; 0x1072 <step_setting_menu+0x9a>
    1060:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <settingmode.2490>
    1064:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <settingmode.2490+0x1>
    1068:	01 97       	sbiw	r24, 0x01	; 1
    106a:	90 93 77 05 	sts	0x0577, r25	; 0x800577 <settingmode.2490+0x1>
    106e:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <settingmode.2490>
		if(settingmode < 0) settingmode = 4;
    1072:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <settingmode.2490>
    1076:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <settingmode.2490+0x1>
    107a:	99 23       	and	r25, r25
    107c:	34 f4       	brge	.+12     	; 0x108a <step_setting_menu+0xb2>
    107e:	84 e0       	ldi	r24, 0x04	; 4
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	90 93 77 05 	sts	0x0577, r25	; 0x800577 <settingmode.2490+0x1>
    1086:	80 93 76 05 	sts	0x0576, r24	; 0x800576 <settingmode.2490>
		DS1302_Timer()? LCD_write_XY_string(1, 0, "                "): LCD_write_XY_string(1, 0, menu_name[settingmode]);
    108a:	74 dc       	rcall	.-1816   	; 0x974 <DS1302_Timer>
    108c:	89 2b       	or	r24, r25
    108e:	31 f0       	breq	.+12     	; 0x109c <step_setting_menu+0xc4>
    1090:	4d ee       	ldi	r20, 0xED	; 237
    1092:	52 e0       	ldi	r21, 0x02	; 2
    1094:	60 e0       	ldi	r22, 0x00	; 0
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	f2 dc       	rcall	.-1564   	; 0xa7e <LCD_write_XY_string>
    109a:	0d c0       	rjmp	.+26     	; 0x10b6 <step_setting_menu+0xde>
    109c:	e0 91 76 05 	lds	r30, 0x0576	; 0x800576 <settingmode.2490>
    10a0:	f0 91 77 05 	lds	r31, 0x0577	; 0x800577 <settingmode.2490+0x1>
    10a4:	ee 0f       	add	r30, r30
    10a6:	ff 1f       	adc	r31, r31
    10a8:	ec 0f       	add	r30, r28
    10aa:	fd 1f       	adc	r31, r29
    10ac:	41 81       	ldd	r20, Z+1	; 0x01
    10ae:	52 81       	ldd	r21, Z+2	; 0x02
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	81 e0       	ldi	r24, 0x01	; 1
		if(button(MENU_BUTTON))
    10b4:	e4 dc       	rcall	.-1592   	; 0xa7e <LCD_write_XY_string>
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	20 d8       	rcall	.-4032   	; 0xfa <button>
    10ba:	89 2b       	or	r24, r25
    10bc:	09 f4       	brne	.+2      	; 0x10c0 <step_setting_menu+0xe8>
    10be:	23 c1       	rjmp	.+582    	; 0x1306 <__stack+0x207>
		{
			if(settingmode < 4)
    10c0:	60 91 76 05 	lds	r22, 0x0576	; 0x800576 <settingmode.2490>
    10c4:	70 91 77 05 	lds	r23, 0x0577	; 0x800577 <settingmode.2490+0x1>
    10c8:	64 30       	cpi	r22, 0x04	; 4
    10ca:	71 05       	cpc	r23, r1
    10cc:	6c f4       	brge	.+26     	; 0x10e8 <step_setting_menu+0x110>
			{
				whole_state = yeah;
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <whole_state>
				k = settingmode;
				settingmode = 0;
    10d4:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <settingmode.2490+0x1>
    10d8:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <settingmode.2490>
				return setting_washer(k);
    10dc:	07 2e       	mov	r0, r23
    10de:	00 0c       	add	r0, r0
    10e0:	88 0b       	sbc	r24, r24
    10e2:	99 0b       	sbc	r25, r25
    10e4:	7c de       	rcall	.-776    	; 0xdde <setting_washer>
    10e6:	1a c1       	rjmp	.+564    	; 0x131c <__stack+0x21d>
			}
			else if(settingmode == 4)
    10e8:	64 30       	cpi	r22, 0x04	; 4
    10ea:	71 05       	cpc	r23, r1
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <step_setting_menu+0x118>
    10ee:	0e c1       	rjmp	.+540    	; 0x130c <__stack+0x20d>
			{
				menu = cuscus;
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	80 93 92 08 	sts	0x0892, r24	; 0x800892 <menu>
				settingmode = 0;
    10f6:	10 92 77 05 	sts	0x0577, r1	; 0x800577 <settingmode.2490+0x1>
    10fa:	10 92 76 05 	sts	0x0576, r1	; 0x800576 <settingmode.2490>
				return setting_washer(4);
			}
		}
		break;
	}
	return 0;
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	0c c1       	rjmp	.+536    	; 0x131c <__stack+0x21d>
			}
		}
		break;
	
		case cuscus:
		LCD_write_XY_string(0, 0, course_name[i]);
    1104:	e0 91 74 05 	lds	r30, 0x0574	; 0x800574 <i.2493>
    1108:	f0 91 75 05 	lds	r31, 0x0575	; 0x800575 <i.2493+0x1>
    110c:	ee 0f       	add	r30, r30
    110e:	ff 1f       	adc	r31, r31
    1110:	ec 0f       	add	r30, r28
    1112:	fd 1f       	adc	r31, r29
    1114:	43 85       	ldd	r20, Z+11	; 0x0b
    1116:	54 85       	ldd	r21, Z+12	; 0x0c
    1118:	60 e0       	ldi	r22, 0x00	; 0
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	b0 dc       	rcall	.-1696   	; 0xa7e <LCD_write_XY_string>
		if(button(UP_BUTTON)) setak_mode ++;
    111e:	82 e0       	ldi	r24, 0x02	; 2
    1120:	0e 94 7d 00 	call	0xfa	; 0xfa <button>
    1124:	89 2b       	or	r24, r25
    1126:	49 f0       	breq	.+18     	; 0x113a <__stack+0x3b>
    1128:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <setak_mode.2492>
    112c:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <setak_mode.2492+0x1>
    1130:	01 96       	adiw	r24, 0x01	; 1
    1132:	90 93 73 05 	sts	0x0573, r25	; 0x800573 <setak_mode.2492+0x1>
    1136:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <setak_mode.2492>
		if(button(DOWN_BUTTON)) setak_mode --;
    113a:	83 e0       	ldi	r24, 0x03	; 3
    113c:	0e 94 7d 00 	call	0xfa	; 0xfa <button>
    1140:	89 2b       	or	r24, r25
    1142:	49 f0       	breq	.+18     	; 0x1156 <__stack+0x57>
    1144:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <setak_mode.2492>
    1148:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <setak_mode.2492+0x1>
    114c:	01 97       	sbiw	r24, 0x01	; 1
    114e:	90 93 73 05 	sts	0x0573, r25	; 0x800573 <setak_mode.2492+0x1>
    1152:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <setak_mode.2492>
		setak_mode = setak_mode > 3 ? 0: setak_mode;
    1156:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <setak_mode.2492>
    115a:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <setak_mode.2492+0x1>
    115e:	84 30       	cpi	r24, 0x04	; 4
    1160:	91 05       	cpc	r25, r1
    1162:	1c f4       	brge	.+6      	; 0x116a <__stack+0x6b>
		setak_mode = setak_mode < 0 ? 3: setak_mode;\
    1164:	99 23       	and	r25, r25
    1166:	24 f0       	brlt	.+8      	; 0x1170 <__stack+0x71>
    1168:	05 c0       	rjmp	.+10     	; 0x1174 <__stack+0x75>
	
		case cuscus:
		LCD_write_XY_string(0, 0, course_name[i]);
		if(button(UP_BUTTON)) setak_mode ++;
		if(button(DOWN_BUTTON)) setak_mode --;
		setak_mode = setak_mode > 3 ? 0: setak_mode;
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <__stack+0x75>
		setak_mode = setak_mode < 0 ? 3: setak_mode;\
    1170:	83 e0       	ldi	r24, 0x03	; 3
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	90 93 73 05 	sts	0x0573, r25	; 0x800573 <setak_mode.2492+0x1>
    1178:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <setak_mode.2492>
		if(i==1)
    117c:	20 91 74 05 	lds	r18, 0x0574	; 0x800574 <i.2493>
    1180:	30 91 75 05 	lds	r19, 0x0575	; 0x800575 <i.2493+0x1>
    1184:	21 30       	cpi	r18, 0x01	; 1
    1186:	31 05       	cpc	r19, r1
    1188:	91 f4       	brne	.+36     	; 0x11ae <__stack+0xaf>
		{
			sprintf(buff, "  %02d  power  ", setak_mode);
    118a:	9f 93       	push	r25
    118c:	8f 93       	push	r24
    118e:	8d e5       	ldi	r24, 0x5D	; 93
    1190:	93 e0       	ldi	r25, 0x03	; 3
    1192:	9f 93       	push	r25
    1194:	8f 93       	push	r24
    1196:	ce 01       	movw	r24, r28
    1198:	47 96       	adiw	r24, 0x17	; 23
    119a:	9f 93       	push	r25
    119c:	8f 93       	push	r24
    119e:	dc d7       	rcall	.+4024   	; 0x2158 <sprintf>
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	0f 90       	pop	r0
    11ac:	57 c0       	rjmp	.+174    	; 0x125c <__stack+0x15d>
		}
		else if(i < 5) 
    11ae:	25 30       	cpi	r18, 0x05	; 5
    11b0:	31 05       	cpc	r19, r1
    11b2:	94 f5       	brge	.+100    	; 0x1218 <__stack+0x119>
		{
			if(i == 3) sprintf(buff, "  %02d  times  ", setak_mode);
    11b4:	23 30       	cpi	r18, 0x03	; 3
    11b6:	31 05       	cpc	r19, r1
    11b8:	91 f4       	brne	.+36     	; 0x11de <__stack+0xdf>
    11ba:	9f 93       	push	r25
    11bc:	8f 93       	push	r24
    11be:	8d e6       	ldi	r24, 0x6D	; 109
    11c0:	93 e0       	ldi	r25, 0x03	; 3
    11c2:	9f 93       	push	r25
    11c4:	8f 93       	push	r24
    11c6:	ce 01       	movw	r24, r28
    11c8:	47 96       	adiw	r24, 0x17	; 23
    11ca:	9f 93       	push	r25
    11cc:	8f 93       	push	r24
    11ce:	c4 d7       	rcall	.+3976   	; 0x2158 <sprintf>
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	3f c0       	rjmp	.+126    	; 0x125c <__stack+0x15d>
			else sprintf(buff, "  %02d  seconds  ", setak_mode *10);
    11de:	9c 01       	movw	r18, r24
    11e0:	22 0f       	add	r18, r18
    11e2:	33 1f       	adc	r19, r19
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	88 0f       	add	r24, r24
    11ee:	99 1f       	adc	r25, r25
    11f0:	82 0f       	add	r24, r18
    11f2:	93 1f       	adc	r25, r19
    11f4:	9f 93       	push	r25
    11f6:	8f 93       	push	r24
    11f8:	8d e7       	ldi	r24, 0x7D	; 125
    11fa:	93 e0       	ldi	r25, 0x03	; 3
    11fc:	9f 93       	push	r25
    11fe:	8f 93       	push	r24
    1200:	ce 01       	movw	r24, r28
    1202:	47 96       	adiw	r24, 0x17	; 23
    1204:	9f 93       	push	r25
    1206:	8f 93       	push	r24
    1208:	a7 d7       	rcall	.+3918   	; 0x2158 <sprintf>
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	22 c0       	rjmp	.+68     	; 0x125c <__stack+0x15d>
		}
		else if(i > 4)
		{
			setak_mode % 2 == 0? sprintf(buff, "      No        "): sprintf(buff, "      Yes        ");
    1218:	9c 01       	movw	r18, r24
    121a:	21 70       	andi	r18, 0x01	; 1
    121c:	33 27       	eor	r19, r19
    121e:	80 fd       	sbrc	r24, 0
    1220:	0a c0       	rjmp	.+20     	; 0x1236 <__stack+0x137>
    1222:	81 e1       	ldi	r24, 0x11	; 17
    1224:	ef e8       	ldi	r30, 0x8F	; 143
    1226:	f3 e0       	ldi	r31, 0x03	; 3
    1228:	de 01       	movw	r26, r28
    122a:	57 96       	adiw	r26, 0x17	; 23
    122c:	01 90       	ld	r0, Z+
    122e:	0d 92       	st	X+, r0
    1230:	8a 95       	dec	r24
    1232:	e1 f7       	brne	.-8      	; 0x122c <__stack+0x12d>
    1234:	09 c0       	rjmp	.+18     	; 0x1248 <__stack+0x149>
    1236:	82 e1       	ldi	r24, 0x12	; 18
    1238:	e0 ea       	ldi	r30, 0xA0	; 160
    123a:	f3 e0       	ldi	r31, 0x03	; 3
    123c:	de 01       	movw	r26, r28
    123e:	57 96       	adiw	r26, 0x17	; 23
    1240:	01 90       	ld	r0, Z+
    1242:	0d 92       	st	X+, r0
    1244:	8a 95       	dec	r24
    1246:	e1 f7       	brne	.-8      	; 0x1240 <__stack+0x141>
			hotwater = setak_mode % 2 == 0? 0: 1;
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	23 2b       	or	r18, r19
    124e:	11 f4       	brne	.+4      	; 0x1254 <__stack+0x155>
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	90 93 6f 08 	sts	0x086F, r25	; 0x80086f <hotwater+0x1>
    1258:	80 93 6e 08 	sts	0x086E, r24	; 0x80086e <hotwater>
		}
		DS1302_Timer()? LCD_write_XY_string(1, 0, "                "): LCD_write_XY_string(1, 0, buff);
    125c:	8b db       	rcall	.-2282   	; 0x974 <DS1302_Timer>
    125e:	89 2b       	or	r24, r25
    1260:	31 f0       	breq	.+12     	; 0x126e <__stack+0x16f>
    1262:	4d ee       	ldi	r20, 0xED	; 237
    1264:	52 e0       	ldi	r21, 0x02	; 2
    1266:	60 e0       	ldi	r22, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	09 dc       	rcall	.-2030   	; 0xa7e <LCD_write_XY_string>
    126c:	06 c0       	rjmp	.+12     	; 0x127a <__stack+0x17b>
    126e:	ae 01       	movw	r20, r28
    1270:	49 5e       	subi	r20, 0xE9	; 233
    1272:	5f 4f       	sbci	r21, 0xFF	; 255
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	02 dc       	rcall	.-2044   	; 0xa7e <LCD_write_XY_string>
		if(button(MENU_BUTTON))
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	0e 94 7d 00 	call	0xfa	; 0xfa <button>
    1280:	89 2b       	or	r24, r25
    1282:	09 f4       	brne	.+2      	; 0x1286 <__stack+0x187>
    1284:	46 c0       	rjmp	.+140    	; 0x1312 <__stack+0x213>
		{
			if(i < 5)
    1286:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <i.2493>
    128a:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <i.2493+0x1>
    128e:	85 30       	cpi	r24, 0x05	; 5
    1290:	91 05       	cpc	r25, r1
    1292:	04 f5       	brge	.+64     	; 0x12d4 <__stack+0x1d5>
			{
				custom[i] = setak_mode;
    1294:	fc 01       	movw	r30, r24
    1296:	ee 0f       	add	r30, r30
    1298:	ff 1f       	adc	r31, r31
    129a:	ee 0f       	add	r30, r30
    129c:	ff 1f       	adc	r31, r31
    129e:	ea 58       	subi	r30, 0x8A	; 138
    12a0:	f7 4f       	sbci	r31, 0xF7	; 247
    12a2:	40 91 72 05 	lds	r20, 0x0572	; 0x800572 <setak_mode.2492>
    12a6:	50 91 73 05 	lds	r21, 0x0573	; 0x800573 <setak_mode.2492+0x1>
    12aa:	05 2e       	mov	r0, r21
    12ac:	00 0c       	add	r0, r0
    12ae:	66 0b       	sbc	r22, r22
    12b0:	77 0b       	sbc	r23, r23
    12b2:	40 83       	st	Z, r20
    12b4:	51 83       	std	Z+1, r21	; 0x01
    12b6:	62 83       	std	Z+2, r22	; 0x02
    12b8:	73 83       	std	Z+3, r23	; 0x03
				i++;
    12ba:	01 96       	adiw	r24, 0x01	; 1
    12bc:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <i.2493+0x1>
    12c0:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <i.2493>
				setak_mode = 0;
    12c4:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <setak_mode.2492+0x1>
    12c8:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <setak_mode.2492>
				return setting_washer(4);
			}
		}
		break;
	}
	return 0;
    12cc:	98 db       	rcall	.-2256   	; 0x9fe <LCD_clear>
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
				custom[i] = setak_mode;
				i++;
				setak_mode = 0;
				LCD_clear();
			}
			else if(i == 5)
    12d2:	24 c0       	rjmp	.+72     	; 0x131c <__stack+0x21d>
    12d4:	05 97       	sbiw	r24, 0x05	; 5
			{
				i=0;
    12d6:	01 f5       	brne	.+64     	; 0x1318 <__stack+0x219>
    12d8:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <i.2493+0x1>
    12dc:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <i.2493>
				LCD_clear();
    12e0:	8e db       	rcall	.-2276   	; 0x9fe <LCD_clear>
				whole_state = yeah;
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <whole_state>
				menu = 0;
    12e8:	10 92 92 08 	sts	0x0892, r1	; 0x800892 <menu>
				setak_mode = 0;
    12ec:	10 92 73 05 	sts	0x0573, r1	; 0x800573 <setak_mode.2492+0x1>
    12f0:	10 92 72 05 	sts	0x0572, r1	; 0x800572 <setak_mode.2492>
				return setting_washer(4);
    12f4:	64 e0       	ldi	r22, 0x04	; 4
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	80 e0       	ldi	r24, 0x00	; 0
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	70 dd       	rcall	.-1312   	; 0xdde <setting_washer>
    12fe:	0e c0       	rjmp	.+28     	; 0x131c <__stack+0x21d>
			}
		}
		break;
	}
	return 0;
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	0b c0       	rjmp	.+22     	; 0x131c <__stack+0x21d>
    1306:	80 e0       	ldi	r24, 0x00	; 0
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	08 c0       	rjmp	.+16     	; 0x131c <__stack+0x21d>
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	05 c0       	rjmp	.+10     	; 0x131c <__stack+0x21d>
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	02 c0       	rjmp	.+4      	; 0x131c <__stack+0x21d>
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
}
    131c:	a6 96       	adiw	r28, 0x26	; 38
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	de bf       	out	0x3e, r29	; 62
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	cd bf       	out	0x3d, r28	; 61
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	08 95       	ret

0000132e <chogi_timer>:
	}
	chogi_timer();
}

void chogi_timer()
{
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
	remains.hour = 0;
    1332:	e9 ea       	ldi	r30, 0xA9	; 169
    1334:	f8 e0       	ldi	r31, 0x08	; 8
    1336:	12 82       	std	Z+2, r1	; 0x02
	remains.minutes = 0;
    1338:	11 82       	std	Z+1, r1	; 0x01
	remains.seconds = 0;
    133a:	10 82       	st	Z, r1
	DS1302_SetTimeDates(remains);
    133c:	00 e0       	ldi	r16, 0x00	; 0
    133e:	10 e0       	ldi	r17, 0x00	; 0
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 91 ac 08 	lds	r19, 0x08AC	; 0x8008ac <remains+0x3>
    1346:	40 91 ad 08 	lds	r20, 0x08AD	; 0x8008ad <remains+0x4>
    134a:	50 91 ae 08 	lds	r21, 0x08AE	; 0x8008ae <remains+0x5>
    134e:	60 91 af 08 	lds	r22, 0x08AF	; 0x8008af <remains+0x6>
    1352:	70 91 b0 08 	lds	r23, 0x08B0	; 0x8008b0 <remains+0x7>
    1356:	80 91 b1 08 	lds	r24, 0x08B1	; 0x8008b1 <remains+0x8>
    135a:	da da       	rcall	.-2636   	; 0x910 <DS1302_SetTimeDates>
}
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	08 95       	ret

00001362 <bulym>:
	}
	return temp;
}

void bulym(uint32_t _num)
{
    1362:	4f 92       	push	r4
    1364:	5f 92       	push	r5
    1366:	6f 92       	push	r6
    1368:	7f 92       	push	r7
    136a:	8f 92       	push	r8
    136c:	9f 92       	push	r9
    136e:	af 92       	push	r10
    1370:	bf 92       	push	r11
    1372:	cf 92       	push	r12
    1374:	df 92       	push	r13
    1376:	ef 92       	push	r14
    1378:	ff 92       	push	r15
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	00 d0       	rcall	.+0      	; 0x1380 <bulym+0x1e>
    1380:	00 d0       	rcall	.+0      	; 0x1382 <bulym+0x20>
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	2b 01       	movw	r4, r22
    1388:	3c 01       	movw	r6, r24
	uint8_t hh, mm, ss;
	uint8_t endhours;
	endhours = 10*_num;

	//급수등 on;
	LCD_write_XY_string(0, 0, "   Soaking...   ");
    138a:	46 e6       	ldi	r20, 0x66	; 102
    138c:	54 e0       	ldi	r21, 0x04	; 4
    138e:	60 e0       	ldi	r22, 0x00	; 0
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	75 db       	rcall	.-2326   	; 0xa7e <LCD_write_XY_string>
	//센서수치 - > 급수등 off
	
	DS1302_GetTime(&remains);
    1394:	89 ea       	ldi	r24, 0xA9	; 169
    1396:	98 e0       	ldi	r25, 0x08	; 8
    1398:	ac da       	rcall	.-2728   	; 0x8f2 <DS1302_GetTime>
	nowtime = remains.hour*3600 + remains.minutes*60 + remains.seconds;
    139a:	40 91 ab 08 	lds	r20, 0x08AB	; 0x8008ab <remains+0x2>
    139e:	20 e1       	ldi	r18, 0x10	; 16
    13a0:	3e e0       	ldi	r19, 0x0E	; 14
    13a2:	42 9f       	mul	r20, r18
    13a4:	c0 01       	movw	r24, r0
    13a6:	43 9f       	mul	r20, r19
    13a8:	90 0d       	add	r25, r0
    13aa:	11 24       	eor	r1, r1
    13ac:	20 91 aa 08 	lds	r18, 0x08AA	; 0x8008aa <remains+0x1>
    13b0:	3c e3       	ldi	r19, 0x3C	; 60
    13b2:	23 9f       	mul	r18, r19
    13b4:	80 0d       	add	r24, r0
    13b6:	91 1d       	adc	r25, r1
    13b8:	11 24       	eor	r1, r1
    13ba:	e9 ea       	ldi	r30, 0xA9	; 169
    13bc:	f8 e0       	ldi	r31, 0x08	; 8
    13be:	20 81       	ld	r18, Z
    13c0:	82 0f       	add	r24, r18
    13c2:	91 1d       	adc	r25, r1
    13c4:	09 2e       	mov	r0, r25
    13c6:	00 0c       	add	r0, r0
    13c8:	aa 0b       	sbc	r26, r26
    13ca:	bb 0b       	sbc	r27, r27
    13cc:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <nowtime.2424>
    13d0:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <nowtime.2424+0x1>
    13d4:	a0 93 6a 08 	sts	0x086A, r26	; 0x80086a <nowtime.2424+0x2>
    13d8:	b0 93 6b 08 	sts	0x086B, r27	; 0x80086b <nowtime.2424+0x3>
	hh = (endhours-nowtime)/3600;
    13dc:	34 2d       	mov	r19, r4
    13de:	33 0f       	add	r19, r19
    13e0:	23 2f       	mov	r18, r19
    13e2:	22 0f       	add	r18, r18
    13e4:	22 0f       	add	r18, r18
    13e6:	23 0f       	add	r18, r19
    13e8:	c2 2e       	mov	r12, r18
    13ea:	d1 2c       	mov	r13, r1
    13ec:	e1 2c       	mov	r14, r1
    13ee:	f1 2c       	mov	r15, r1
    13f0:	46 01       	movw	r8, r12
    13f2:	57 01       	movw	r10, r14
    13f4:	88 1a       	sub	r8, r24
    13f6:	99 0a       	sbc	r9, r25
    13f8:	aa 0a       	sbc	r10, r26
    13fa:	bb 0a       	sbc	r11, r27
	mm = (endhours-nowtime)%3600/60;
	ss = (endhours-nowtime)%60;
	sprintf(hbuff,"   %02d:", hh);
    13fc:	c5 01       	movw	r24, r10
    13fe:	b4 01       	movw	r22, r8
    1400:	20 e1       	ldi	r18, 0x10	; 16
    1402:	3e e0       	ldi	r19, 0x0E	; 14
    1404:	40 e0       	ldi	r20, 0x00	; 0
    1406:	50 e0       	ldi	r21, 0x00	; 0
    1408:	55 d6       	rcall	.+3242   	; 0x20b4 <__udivmodsi4>
    140a:	69 83       	std	Y+1, r22	; 0x01
    140c:	7a 83       	std	Y+2, r23	; 0x02
    140e:	8b 83       	std	Y+3, r24	; 0x03
    1410:	9c 83       	std	Y+4, r25	; 0x04
    1412:	1f 92       	push	r1
    1414:	2f 93       	push	r18
    1416:	80 e4       	ldi	r24, 0x40	; 64
    1418:	95 e0       	ldi	r25, 0x05	; 5
    141a:	9f 93       	push	r25
    141c:	8f 93       	push	r24
    141e:	88 e2       	ldi	r24, 0x28	; 40
    1420:	98 e0       	ldi	r25, 0x08	; 8
    1422:	9f 93       	push	r25
    1424:	8f 93       	push	r24
    1426:	98 d6       	rcall	.+3376   	; 0x2158 <sprintf>
	sprintf(mbuff,"%02d:", mm);
    1428:	69 81       	ldd	r22, Y+1	; 0x01
    142a:	7a 81       	ldd	r23, Y+2	; 0x02
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	9c 81       	ldd	r25, Y+4	; 0x04
    1430:	2c e3       	ldi	r18, 0x3C	; 60
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e0       	ldi	r20, 0x00	; 0
    1436:	50 e0       	ldi	r21, 0x00	; 0
    1438:	3d d6       	rcall	.+3194   	; 0x20b4 <__udivmodsi4>
    143a:	1f 92       	push	r1
    143c:	2f 93       	push	r18
    143e:	83 e4       	ldi	r24, 0x43	; 67
    1440:	95 e0       	ldi	r25, 0x05	; 5
    1442:	9f 93       	push	r25
    1444:	8f 93       	push	r24
    1446:	88 ee       	ldi	r24, 0xE8	; 232
    1448:	97 e0       	ldi	r25, 0x07	; 7
    144a:	9f 93       	push	r25
    144c:	8f 93       	push	r24
    144e:	84 d6       	rcall	.+3336   	; 0x2158 <sprintf>
	sprintf(sbuff,"%02d    ", ss);
    1450:	c5 01       	movw	r24, r10
    1452:	b4 01       	movw	r22, r8
    1454:	2c e3       	ldi	r18, 0x3C	; 60
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	40 e0       	ldi	r20, 0x00	; 0
    145a:	50 e0       	ldi	r21, 0x00	; 0
    145c:	2b d6       	rcall	.+3158   	; 0x20b4 <__udivmodsi4>
    145e:	1f 92       	push	r1
    1460:	6f 93       	push	r22
    1462:	82 e3       	ldi	r24, 0x32	; 50
    1464:	93 e0       	ldi	r25, 0x03	; 3
    1466:	9f 93       	push	r25
    1468:	8f 93       	push	r24
    146a:	88 ea       	ldi	r24, 0xA8	; 168
    146c:	97 e0       	ldi	r25, 0x07	; 7
    146e:	9f 93       	push	r25
    1470:	8f 93       	push	r24
    1472:	72 d6       	rcall	.+3300   	; 0x2158 <sprintf>
	if(checker != remains.seconds)
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61
    147e:	e9 ea       	ldi	r30, 0xA9	; 169
    1480:	f8 e0       	ldi	r31, 0x08	; 8
    1482:	90 81       	ld	r25, Z
    1484:	80 91 8a 08 	lds	r24, 0x088A	; 0x80088a <checker>
    1488:	98 17       	cp	r25, r24
	{
		LCD_write_XY_string(1, 0, hbuff);
    148a:	99 f0       	breq	.+38     	; 0x14b2 <bulym+0x150>
    148c:	48 e2       	ldi	r20, 0x28	; 40
    148e:	58 e0       	ldi	r21, 0x08	; 8
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
		LCD_write_XY_string(1, 6, mbuff);
    1494:	f4 da       	rcall	.-2584   	; 0xa7e <LCD_write_XY_string>
    1496:	48 ee       	ldi	r20, 0xE8	; 232
    1498:	57 e0       	ldi	r21, 0x07	; 7
    149a:	66 e0       	ldi	r22, 0x06	; 6
    149c:	81 e0       	ldi	r24, 0x01	; 1
		LCD_write_XY_string(1, 9, sbuff);
    149e:	ef da       	rcall	.-2594   	; 0xa7e <LCD_write_XY_string>
    14a0:	48 ea       	ldi	r20, 0xA8	; 168
    14a2:	57 e0       	ldi	r21, 0x07	; 7
    14a4:	69 e0       	ldi	r22, 0x09	; 9
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	ea da       	rcall	.-2604   	; 0xa7e <LCD_write_XY_string>
		checker = remains.seconds;
    14aa:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <remains>
    14ae:	80 93 8a 08 	sts	0x088A, r24	; 0x80088a <checker>
	}
	if(((endhours-nowtime) == 0) || (_num == 0)) 
    14b2:	80 91 68 08 	lds	r24, 0x0868	; 0x800868 <nowtime.2424>
    14b6:	90 91 69 08 	lds	r25, 0x0869	; 0x800869 <nowtime.2424+0x1>
    14ba:	a0 91 6a 08 	lds	r26, 0x086A	; 0x80086a <nowtime.2424+0x2>
    14be:	b0 91 6b 08 	lds	r27, 0x086B	; 0x80086b <nowtime.2424+0x3>
    14c2:	c8 16       	cp	r12, r24
    14c4:	d9 06       	cpc	r13, r25
    14c6:	ea 06       	cpc	r14, r26
    14c8:	fb 06       	cpc	r15, r27
    14ca:	21 f0       	breq	.+8      	; 0x14d4 <bulym+0x172>
    14cc:	45 28       	or	r4, r5
    14ce:	46 28       	or	r4, r6
    14d0:	47 28       	or	r4, r7
	{
		washer = sesese;
    14d2:	69 f4       	brne	.+26     	; 0x14ee <bulym+0x18c>
    14d4:	82 e0       	ldi	r24, 0x02	; 2
    14d6:	80 93 96 08 	sts	0x0896, r24	; 0x800896 <washer>
		chogi_timer();
    14da:	29 df       	rcall	.-430    	; 0x132e <chogi_timer>
		water_Flag ++;
    14dc:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <water_Flag>
    14e0:	90 91 6d 08 	lds	r25, 0x086D	; 0x80086d <water_Flag+0x1>
    14e4:	01 96       	adiw	r24, 0x01	; 1
    14e6:	90 93 6d 08 	sts	0x086D, r25	; 0x80086d <water_Flag+0x1>
    14ea:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <water_Flag>
	}
}
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	df 91       	pop	r29
    14f8:	cf 91       	pop	r28
    14fa:	ff 90       	pop	r15
    14fc:	ef 90       	pop	r14
    14fe:	df 90       	pop	r13
    1500:	cf 90       	pop	r12
    1502:	bf 90       	pop	r11
    1504:	af 90       	pop	r10
    1506:	9f 90       	pop	r9
    1508:	8f 90       	pop	r8
    150a:	7f 90       	pop	r7
    150c:	6f 90       	pop	r6
    150e:	5f 90       	pop	r5
    1510:	4f 90       	pop	r4
    1512:	08 95       	ret

00001514 <setak>:


void setak(uint32_t _num1, uint32_t _num2)
{
    1514:	4f 92       	push	r4
    1516:	5f 92       	push	r5
    1518:	6f 92       	push	r6
    151a:	7f 92       	push	r7
    151c:	8f 92       	push	r8
    151e:	9f 92       	push	r9
    1520:	af 92       	push	r10
    1522:	bf 92       	push	r11
    1524:	cf 92       	push	r12
    1526:	df 92       	push	r13
    1528:	ef 92       	push	r14
    152a:	ff 92       	push	r15
    152c:	0f 93       	push	r16
    152e:	1f 93       	push	r17
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    1534:	06 2f       	mov	r16, r22
    1536:	29 01       	movw	r4, r18
    1538:	3a 01       	movw	r6, r20
	static uint32_t nowtime = 0, hbuff[16] = {0}, mbuff[16] = {0}, sbuff[16] = {0}, sttime = 0;
	static uint8_t hh, mm, ss, setakFlag=0;
	uint8_t endhours;
	endhours = 10*_num2;

	LCD_write_XY_string(0, 0, "   Washing...   ");
    153a:	47 e7       	ldi	r20, 0x77	; 119
    153c:	54 e0       	ldi	r21, 0x04	; 4
    153e:	60 e0       	ldi	r22, 0x00	; 0
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	9d da       	rcall	.-2758   	; 0xa7e <LCD_write_XY_string>

	sttime = millis();
    1544:	11 d5       	rcall	.+2594   	; 0x1f68 <millis>
    1546:	89 ea       	ldi	r24, 0xA9	; 169
	DS1302_GetTime(&remains);
    1548:	98 e0       	ldi	r25, 0x08	; 8
    154a:	d3 d9       	rcall	.-3162   	; 0x8f2 <DS1302_GetTime>
    154c:	c9 ea       	ldi	r28, 0xA9	; 169
	nowtime = remains.hour*3600 + remains.minutes*60 + remains.seconds;
    154e:	d8 e0       	ldi	r29, 0x08	; 8
    1550:	4a 81       	ldd	r20, Y+2	; 0x02
    1552:	20 e1       	ldi	r18, 0x10	; 16
    1554:	3e e0       	ldi	r19, 0x0E	; 14
    1556:	42 9f       	mul	r20, r18
    1558:	c0 01       	movw	r24, r0
    155a:	43 9f       	mul	r20, r19
    155c:	90 0d       	add	r25, r0
    155e:	11 24       	eor	r1, r1
    1560:	29 81       	ldd	r18, Y+1	; 0x01
    1562:	3c e3       	ldi	r19, 0x3C	; 60
    1564:	23 9f       	mul	r18, r19
    1566:	80 0d       	add	r24, r0
    1568:	91 1d       	adc	r25, r1
    156a:	11 24       	eor	r1, r1
    156c:	28 81       	ld	r18, Y
    156e:	82 0f       	add	r24, r18
    1570:	91 1d       	adc	r25, r1
    1572:	09 2e       	mov	r0, r25
    1574:	00 0c       	add	r0, r0
    1576:	aa 0b       	sbc	r26, r26
    1578:	bb 0b       	sbc	r27, r27
    157a:	80 93 a4 07 	sts	0x07A4, r24	; 0x8007a4 <nowtime.2436>
    157e:	90 93 a5 07 	sts	0x07A5, r25	; 0x8007a5 <nowtime.2436+0x1>
    1582:	a0 93 a6 07 	sts	0x07A6, r26	; 0x8007a6 <nowtime.2436+0x2>
    1586:	b0 93 a7 07 	sts	0x07A7, r27	; 0x8007a7 <nowtime.2436+0x3>
    158a:	c4 2c       	mov	r12, r4
	hh = (endhours-nowtime)/3600;
    158c:	cc 0c       	add	r12, r12
    158e:	2c 2d       	mov	r18, r12
    1590:	22 0f       	add	r18, r18
    1592:	22 0f       	add	r18, r18
    1594:	c2 0e       	add	r12, r18
    1596:	d1 2c       	mov	r13, r1
    1598:	e1 2c       	mov	r14, r1
    159a:	f1 2c       	mov	r15, r1
    159c:	46 01       	movw	r8, r12
    159e:	57 01       	movw	r10, r14
    15a0:	88 1a       	sub	r8, r24
    15a2:	99 0a       	sbc	r9, r25
    15a4:	aa 0a       	sbc	r10, r26
    15a6:	bb 0a       	sbc	r11, r27
    15a8:	c5 01       	movw	r24, r10
	mm = (endhours-nowtime)%3600/60;
    15aa:	b4 01       	movw	r22, r8
    15ac:	20 e1       	ldi	r18, 0x10	; 16
    15ae:	3e e0       	ldi	r19, 0x0E	; 14
    15b0:	40 e0       	ldi	r20, 0x00	; 0
    15b2:	50 e0       	ldi	r21, 0x00	; 0
    15b4:	7f d5       	rcall	.+2814   	; 0x20b4 <__udivmodsi4>
    15b6:	12 2f       	mov	r17, r18
    15b8:	2c e3       	ldi	r18, 0x3C	; 60
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	40 e0       	ldi	r20, 0x00	; 0
    15be:	50 e0       	ldi	r21, 0x00	; 0
    15c0:	79 d5       	rcall	.+2802   	; 0x20b4 <__udivmodsi4>
    15c2:	20 93 a3 07 	sts	0x07A3, r18	; 0x8007a3 <mm.2442>
    15c6:	c5 01       	movw	r24, r10
	ss = (endhours-nowtime)%60;
    15c8:	b4 01       	movw	r22, r8
    15ca:	2c e3       	ldi	r18, 0x3C	; 60
    15cc:	30 e0       	ldi	r19, 0x00	; 0
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	50 e0       	ldi	r21, 0x00	; 0
    15d2:	70 d5       	rcall	.+2784   	; 0x20b4 <__udivmodsi4>
    15d4:	60 93 a2 07 	sts	0x07A2, r22	; 0x8007a2 <ss.2443>
    15d8:	1f 92       	push	r1
	sprintf(hbuff,"   %02d:", hh);
    15da:	1f 93       	push	r17
    15dc:	80 e4       	ldi	r24, 0x40	; 64
    15de:	95 e0       	ldi	r25, 0x05	; 5
    15e0:	9f 93       	push	r25
    15e2:	8f 93       	push	r24
    15e4:	82 e6       	ldi	r24, 0x62	; 98
    15e6:	97 e0       	ldi	r25, 0x07	; 7
    15e8:	9f 93       	push	r25
    15ea:	8f 93       	push	r24
    15ec:	b5 d5       	rcall	.+2922   	; 0x2158 <sprintf>
    15ee:	80 91 a3 07 	lds	r24, 0x07A3	; 0x8007a3 <mm.2442>
	sprintf(mbuff,"%02d:", mm);
    15f2:	1f 92       	push	r1
    15f4:	8f 93       	push	r24
    15f6:	83 e4       	ldi	r24, 0x43	; 67
    15f8:	95 e0       	ldi	r25, 0x05	; 5
    15fa:	9f 93       	push	r25
    15fc:	8f 93       	push	r24
    15fe:	82 e2       	ldi	r24, 0x22	; 34
    1600:	97 e0       	ldi	r25, 0x07	; 7
    1602:	9f 93       	push	r25
    1604:	8f 93       	push	r24
    1606:	a8 d5       	rcall	.+2896   	; 0x2158 <sprintf>
    1608:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <ss.2443>
	sprintf(sbuff,"%02d    ", ss);
    160c:	1f 92       	push	r1
    160e:	8f 93       	push	r24
    1610:	82 e3       	ldi	r24, 0x32	; 50
    1612:	93 e0       	ldi	r25, 0x03	; 3
    1614:	9f 93       	push	r25
    1616:	8f 93       	push	r24
    1618:	82 ee       	ldi	r24, 0xE2	; 226
    161a:	96 e0       	ldi	r25, 0x06	; 6
    161c:	9f 93       	push	r25
    161e:	8f 93       	push	r24
    1620:	9b d5       	rcall	.+2870   	; 0x2158 <sprintf>
    1622:	8d b7       	in	r24, 0x3d	; 61
	
	if(checker != remains.seconds)
    1624:	9e b7       	in	r25, 0x3e	; 62
    1626:	42 96       	adiw	r24, 0x12	; 18
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	9e bf       	out	0x3e, r25	; 62
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	8d bf       	out	0x3d, r24	; 61
    1632:	98 81       	ld	r25, Y
    1634:	80 91 8a 08 	lds	r24, 0x088A	; 0x80088a <checker>
    1638:	98 17       	cp	r25, r24
    163a:	99 f0       	breq	.+38     	; 0x1662 <setak+0x14e>
	{
		LCD_write_XY_string(1, 0, hbuff);
    163c:	42 e6       	ldi	r20, 0x62	; 98
    163e:	57 e0       	ldi	r21, 0x07	; 7
    1640:	60 e0       	ldi	r22, 0x00	; 0
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	1c da       	rcall	.-3016   	; 0xa7e <LCD_write_XY_string>
		LCD_write_XY_string(1, 6, mbuff);
    1646:	42 e2       	ldi	r20, 0x22	; 34
    1648:	57 e0       	ldi	r21, 0x07	; 7
    164a:	66 e0       	ldi	r22, 0x06	; 6
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	17 da       	rcall	.-3026   	; 0xa7e <LCD_write_XY_string>
    1650:	42 ee       	ldi	r20, 0xE2	; 226
		LCD_write_XY_string(1, 9, sbuff);
    1652:	56 e0       	ldi	r21, 0x06	; 6
    1654:	69 e0       	ldi	r22, 0x09	; 9
    1656:	81 e0       	ldi	r24, 0x01	; 1
    1658:	12 da       	rcall	.-3036   	; 0xa7e <LCD_write_XY_string>
    165a:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <remains>
		checker = remains.seconds;
    165e:	80 93 8a 08 	sts	0x088A, r24	; 0x80088a <checker>
    1662:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <remains>
	}
	
	if(remains.seconds % 2 == 1)
    1666:	80 ff       	sbrs	r24, 0
    1668:	0b c0       	rjmp	.+22     	; 0x1680 <setak+0x16c>
    166a:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <setakFlag.2444>
	{
		setakFlag ++;
    166e:	8f 5f       	subi	r24, 0xFF	; 255
    1670:	84 30       	cpi	r24, 0x04	; 4
    1672:	19 f0       	breq	.+6      	; 0x167a <setak+0x166>
		if(setakFlag == 4) setakFlag = 0;
    1674:	80 93 e1 06 	sts	0x06E1, r24	; 0x8006e1 <setakFlag.2444>
		checker = remains.seconds;
	}
	
	if(remains.seconds % 2 == 1)
	{
		setakFlag ++;
    1678:	03 c0       	rjmp	.+6      	; 0x1680 <setak+0x16c>
    167a:	10 92 e1 06 	sts	0x06E1, r1	; 0x8006e1 <setakFlag.2444>
		if(setakFlag == 4) setakFlag = 0;
    167e:	04 c0       	rjmp	.+8      	; 0x1688 <setak+0x174>
    1680:	80 91 e1 06 	lds	r24, 0x06E1	; 0x8006e1 <setakFlag.2444>
	}
	if(setakFlag == 0) DCmotorright(85*_num1);
    1684:	81 11       	cpse	r24, r1
    1686:	06 c0       	rjmp	.+12     	; 0x1694 <setak+0x180>
    1688:	85 e5       	ldi	r24, 0x55	; 85
    168a:	08 9f       	mul	r16, r24
    168c:	80 2d       	mov	r24, r0
    168e:	11 24       	eor	r1, r1
    1690:	90 d8       	rcall	.-3808   	; 0x7b2 <DCmotorright>
    1692:	18 c0       	rjmp	.+48     	; 0x16c4 <setak+0x1b0>
	else if(setakFlag == 1) DCmotorleft(45*_num1);
    1694:	81 30       	cpi	r24, 0x01	; 1
    1696:	31 f4       	brne	.+12     	; 0x16a4 <setak+0x190>
    1698:	8d e2       	ldi	r24, 0x2D	; 45
    169a:	08 9f       	mul	r16, r24
    169c:	80 2d       	mov	r24, r0
    169e:	11 24       	eor	r1, r1
    16a0:	7e d8       	rcall	.-3844   	; 0x79e <DCmotorleft>
    16a2:	10 c0       	rjmp	.+32     	; 0x16c4 <setak+0x1b0>
	else if(setakFlag == 2)
    16a4:	82 30       	cpi	r24, 0x02	; 2
	{
		DCmotorstop();
    16a6:	39 f4       	brne	.+14     	; 0x16b6 <setak+0x1a2>
    16a8:	71 d8       	rcall	.-3870   	; 0x78c <DCmotorstop>
		DCmotorleft(85*_num1);
    16aa:	85 e5       	ldi	r24, 0x55	; 85
    16ac:	08 9f       	mul	r16, r24
    16ae:	80 2d       	mov	r24, r0
    16b0:	11 24       	eor	r1, r1
    16b2:	75 d8       	rcall	.-3862   	; 0x79e <DCmotorleft>
    16b4:	07 c0       	rjmp	.+14     	; 0x16c4 <setak+0x1b0>
    16b6:	83 30       	cpi	r24, 0x03	; 3
	}
	else if(setakFlag == 3) DCmotorright(45*_num1);
    16b8:	29 f4       	brne	.+10     	; 0x16c4 <setak+0x1b0>
    16ba:	8d e2       	ldi	r24, 0x2D	; 45
    16bc:	08 9f       	mul	r16, r24
    16be:	80 2d       	mov	r24, r0
    16c0:	11 24       	eor	r1, r1
    16c2:	77 d8       	rcall	.-3858   	; 0x7b2 <DCmotorright>
    16c4:	80 91 a4 07 	lds	r24, 0x07A4	; 0x8007a4 <nowtime.2436>
	if(((endhours-nowtime) == 0) || (_num2 == 0))
    16c8:	90 91 a5 07 	lds	r25, 0x07A5	; 0x8007a5 <nowtime.2436+0x1>
    16cc:	a0 91 a6 07 	lds	r26, 0x07A6	; 0x8007a6 <nowtime.2436+0x2>
    16d0:	b0 91 a7 07 	lds	r27, 0x07A7	; 0x8007a7 <nowtime.2436+0x3>
    16d4:	c8 16       	cp	r12, r24
    16d6:	d9 06       	cpc	r13, r25
    16d8:	ea 06       	cpc	r14, r26
    16da:	fb 06       	cpc	r15, r27
    16dc:	21 f0       	breq	.+8      	; 0x16e6 <setak+0x1d2>
    16de:	45 28       	or	r4, r5
    16e0:	46 28       	or	r4, r6
    16e2:	47 28       	or	r4, r7
    16e4:	21 f4       	brne	.+8      	; 0x16ee <setak+0x1da>
    16e6:	83 e0       	ldi	r24, 0x03	; 3
	{
		washer = dada;
    16e8:	80 93 96 08 	sts	0x0896, r24	; 0x800896 <washer>
    16ec:	20 de       	rcall	.-960    	; 0x132e <chogi_timer>
		chogi_timer();
    16ee:	df 91       	pop	r29
    16f0:	cf 91       	pop	r28
	}
}
    16f2:	1f 91       	pop	r17
    16f4:	0f 91       	pop	r16
    16f6:	ff 90       	pop	r15
    16f8:	ef 90       	pop	r14
    16fa:	df 90       	pop	r13
    16fc:	cf 90       	pop	r12
    16fe:	bf 90       	pop	r11
    1700:	af 90       	pop	r10
    1702:	9f 90       	pop	r9
    1704:	8f 90       	pop	r8
    1706:	7f 90       	pop	r7
    1708:	6f 90       	pop	r6
    170a:	5f 90       	pop	r5
    170c:	4f 90       	pop	r4
    170e:	08 95       	ret

00001710 <hang>:
    1710:	4f 92       	push	r4
    1712:	5f 92       	push	r5

void hang(uint32_t _num)
{
    1714:	6f 92       	push	r6
    1716:	7f 92       	push	r7
    1718:	8f 92       	push	r8
    171a:	9f 92       	push	r9
    171c:	af 92       	push	r10
    171e:	bf 92       	push	r11
    1720:	cf 92       	push	r12
    1722:	df 92       	push	r13
    1724:	ef 92       	push	r14
    1726:	ff 92       	push	r15
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	00 d0       	rcall	.+0      	; 0x172e <hang+0x1e>
    172e:	00 d0       	rcall	.+0      	; 0x1730 <hang+0x20>
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
    1734:	2b 01       	movw	r4, r22
    1736:	3c 01       	movw	r6, r24
	static int32_t nowtime, hbuff[16] = {0}, mbuff[16] = {0}, sbuff[16] = {0}, sttime = 0, buff[16];
	uint8_t hh, mm, ss, hangFlag=0;
	static uint8_t times = 1, endhours;
	endhours = 10;
    1738:	8a e0       	ldi	r24, 0x0A	; 10
    173a:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <endhours.2460>

	sprintf(buff, "Now Rinse(%d/%d)... ", times, _num);
    173e:	7f 92       	push	r7
    1740:	6f 92       	push	r6
    1742:	5f 92       	push	r5
    1744:	4f 92       	push	r4
    1746:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    174a:	1f 92       	push	r1
    174c:	8f 93       	push	r24
    174e:	88 e8       	ldi	r24, 0x88	; 136
    1750:	94 e0       	ldi	r25, 0x04	; 4
    1752:	9f 93       	push	r25
    1754:	8f 93       	push	r24
    1756:	80 ea       	ldi	r24, 0xA0	; 160
    1758:	96 e0       	ldi	r25, 0x06	; 6
    175a:	9f 93       	push	r25
    175c:	8f 93       	push	r24
    175e:	fc d4       	rcall	.+2552   	; 0x2158 <sprintf>
	LCD_write_XY_string(0, 0, buff);
    1760:	40 ea       	ldi	r20, 0xA0	; 160
    1762:	56 e0       	ldi	r21, 0x06	; 6
    1764:	60 e0       	ldi	r22, 0x00	; 0
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	8a d9       	rcall	.-3308   	; 0xa7e <LCD_write_XY_string>
	PORTD |= hotwater == 0? (1 << 4) : (1 << 5);
    176a:	82 b3       	in	r24, 0x12	; 18
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	f8 94       	cli
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	cd bf       	out	0x3d, r28	; 61
    1776:	20 91 6e 08 	lds	r18, 0x086E	; 0x80086e <hotwater>
    177a:	30 91 6f 08 	lds	r19, 0x086F	; 0x80086f <hotwater+0x1>
    177e:	23 2b       	or	r18, r19
    1780:	11 f0       	breq	.+4      	; 0x1786 <hang+0x76>
    1782:	90 e2       	ldi	r25, 0x20	; 32
    1784:	01 c0       	rjmp	.+2      	; 0x1788 <hang+0x78>
    1786:	90 e1       	ldi	r25, 0x10	; 16
    1788:	89 2b       	or	r24, r25
	
	sttime = millis();
    178a:	82 bb       	out	0x12, r24	; 18
	DS1302_GetTime(&remains);
    178c:	ed d3       	rcall	.+2010   	; 0x1f68 <millis>
    178e:	89 ea       	ldi	r24, 0xA9	; 169
    1790:	98 e0       	ldi	r25, 0x08	; 8
    1792:	af d8       	rcall	.-3746   	; 0x8f2 <DS1302_GetTime>
	nowtime = remains.hour*3600 + remains.minutes*60 + remains.seconds;
    1794:	40 91 ab 08 	lds	r20, 0x08AB	; 0x8008ab <remains+0x2>
    1798:	20 e1       	ldi	r18, 0x10	; 16
    179a:	3e e0       	ldi	r19, 0x0E	; 14
    179c:	42 9f       	mul	r20, r18
    179e:	c0 01       	movw	r24, r0
    17a0:	43 9f       	mul	r20, r19
    17a2:	90 0d       	add	r25, r0
    17a4:	11 24       	eor	r1, r1
    17a6:	20 91 aa 08 	lds	r18, 0x08AA	; 0x8008aa <remains+0x1>
    17aa:	3c e3       	ldi	r19, 0x3C	; 60
    17ac:	23 9f       	mul	r18, r19
    17ae:	80 0d       	add	r24, r0
    17b0:	91 1d       	adc	r25, r1
    17b2:	11 24       	eor	r1, r1
    17b4:	e9 ea       	ldi	r30, 0xA9	; 169
    17b6:	f8 e0       	ldi	r31, 0x08	; 8
    17b8:	20 81       	ld	r18, Z
    17ba:	82 0f       	add	r24, r18
    17bc:	91 1d       	adc	r25, r1
    17be:	09 2e       	mov	r0, r25
    17c0:	00 0c       	add	r0, r0
    17c2:	aa 0b       	sbc	r26, r26
    17c4:	bb 0b       	sbc	r27, r27
    17c6:	80 93 9c 06 	sts	0x069C, r24	; 0x80069c <nowtime.2449>
    17ca:	90 93 9d 06 	sts	0x069D, r25	; 0x80069d <nowtime.2449+0x1>
    17ce:	a0 93 9e 06 	sts	0x069E, r26	; 0x80069e <nowtime.2449+0x2>
    17d2:	b0 93 9f 06 	sts	0x069F, r27	; 0x80069f <nowtime.2449+0x3>
	hh = (endhours-nowtime)/3600;
    17d6:	c0 90 e0 06 	lds	r12, 0x06E0	; 0x8006e0 <endhours.2460>
    17da:	d1 2c       	mov	r13, r1
    17dc:	e1 2c       	mov	r14, r1
    17de:	f1 2c       	mov	r15, r1
    17e0:	c8 1a       	sub	r12, r24
    17e2:	d9 0a       	sbc	r13, r25
    17e4:	ea 0a       	sbc	r14, r26
    17e6:	fb 0a       	sbc	r15, r27
	mm = (endhours-nowtime)%3600/60;
	ss = (endhours-nowtime)%60;
	sprintf(hbuff,"   %02d:", hh);
    17e8:	c7 01       	movw	r24, r14
    17ea:	b6 01       	movw	r22, r12
    17ec:	20 e1       	ldi	r18, 0x10	; 16
    17ee:	3e e0       	ldi	r19, 0x0E	; 14
    17f0:	40 e0       	ldi	r20, 0x00	; 0
    17f2:	50 e0       	ldi	r21, 0x00	; 0
    17f4:	81 d4       	rcall	.+2306   	; 0x20f8 <__divmodsi4>
    17f6:	69 83       	std	Y+1, r22	; 0x01
    17f8:	7a 83       	std	Y+2, r23	; 0x02
    17fa:	8b 83       	std	Y+3, r24	; 0x03
    17fc:	9c 83       	std	Y+4, r25	; 0x04
    17fe:	1f 92       	push	r1
    1800:	2f 93       	push	r18
    1802:	80 e4       	ldi	r24, 0x40	; 64
    1804:	95 e0       	ldi	r25, 0x05	; 5
    1806:	9f 93       	push	r25
    1808:	8f 93       	push	r24
    180a:	8c e5       	ldi	r24, 0x5C	; 92
    180c:	96 e0       	ldi	r25, 0x06	; 6
    180e:	9f 93       	push	r25
    1810:	8f 93       	push	r24
    1812:	a2 d4       	rcall	.+2372   	; 0x2158 <sprintf>
	sprintf(mbuff,"%02d:", mm);
    1814:	0f 2e       	mov	r0, r31
    1816:	fc e3       	ldi	r31, 0x3C	; 60
    1818:	8f 2e       	mov	r8, r31
    181a:	91 2c       	mov	r9, r1
    181c:	a1 2c       	mov	r10, r1
    181e:	b1 2c       	mov	r11, r1
    1820:	f0 2d       	mov	r31, r0
    1822:	69 81       	ldd	r22, Y+1	; 0x01
    1824:	7a 81       	ldd	r23, Y+2	; 0x02
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	9c 81       	ldd	r25, Y+4	; 0x04
    182a:	a5 01       	movw	r20, r10
    182c:	94 01       	movw	r18, r8
    182e:	64 d4       	rcall	.+2248   	; 0x20f8 <__divmodsi4>
    1830:	1f 92       	push	r1
    1832:	2f 93       	push	r18
    1834:	83 e4       	ldi	r24, 0x43	; 67
    1836:	95 e0       	ldi	r25, 0x05	; 5
    1838:	9f 93       	push	r25
    183a:	8f 93       	push	r24
    183c:	8c e1       	ldi	r24, 0x1C	; 28
    183e:	96 e0       	ldi	r25, 0x06	; 6
    1840:	9f 93       	push	r25
    1842:	8f 93       	push	r24
	sprintf(sbuff,"%02d    ", ss);
    1844:	89 d4       	rcall	.+2322   	; 0x2158 <sprintf>
    1846:	c7 01       	movw	r24, r14
    1848:	b6 01       	movw	r22, r12
    184a:	a5 01       	movw	r20, r10
    184c:	94 01       	movw	r18, r8
    184e:	54 d4       	rcall	.+2216   	; 0x20f8 <__divmodsi4>
    1850:	1f 92       	push	r1
    1852:	6f 93       	push	r22
    1854:	82 e3       	ldi	r24, 0x32	; 50
    1856:	93 e0       	ldi	r25, 0x03	; 3
    1858:	9f 93       	push	r25
    185a:	8f 93       	push	r24
    185c:	8c ed       	ldi	r24, 0xDC	; 220
    185e:	95 e0       	ldi	r25, 0x05	; 5
    1860:	9f 93       	push	r25
    1862:	8f 93       	push	r24
    1864:	79 d4       	rcall	.+2290   	; 0x2158 <sprintf>
	
	if(checker != remains.seconds)
    1866:	0f b6       	in	r0, 0x3f	; 63
    1868:	f8 94       	cli
    186a:	de bf       	out	0x3e, r29	; 62
    186c:	0f be       	out	0x3f, r0	; 63
    186e:	cd bf       	out	0x3d, r28	; 61
    1870:	e9 ea       	ldi	r30, 0xA9	; 169
    1872:	f8 e0       	ldi	r31, 0x08	; 8
    1874:	90 81       	ld	r25, Z
    1876:	80 91 8a 08 	lds	r24, 0x088A	; 0x80088a <checker>
    187a:	98 17       	cp	r25, r24
	{
		LCD_write_XY_string(1, 0, hbuff);
    187c:	99 f0       	breq	.+38     	; 0x18a4 <hang+0x194>
    187e:	4c e5       	ldi	r20, 0x5C	; 92
    1880:	56 e0       	ldi	r21, 0x06	; 6
    1882:	60 e0       	ldi	r22, 0x00	; 0
    1884:	81 e0       	ldi	r24, 0x01	; 1
		LCD_write_XY_string(1, 6, mbuff);
    1886:	fb d8       	rcall	.-3594   	; 0xa7e <LCD_write_XY_string>
    1888:	4c e1       	ldi	r20, 0x1C	; 28
    188a:	56 e0       	ldi	r21, 0x06	; 6
    188c:	66 e0       	ldi	r22, 0x06	; 6
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	f6 d8       	rcall	.-3604   	; 0xa7e <LCD_write_XY_string>
		LCD_write_XY_string(1, 9, sbuff);
    1892:	4c ed       	ldi	r20, 0xDC	; 220
    1894:	55 e0       	ldi	r21, 0x05	; 5
    1896:	69 e0       	ldi	r22, 0x09	; 9
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	f1 d8       	rcall	.-3614   	; 0xa7e <LCD_write_XY_string>
    189c:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <remains>
		checker = remains.seconds;
    18a0:	80 93 8a 08 	sts	0x088A, r24	; 0x80088a <checker>
    18a4:	90 91 a9 08 	lds	r25, 0x08A9	; 0x8008a9 <remains>
	}
	
	if(remains.seconds%3 == 1) hangFlag ^= 1;
    18a8:	8b ea       	ldi	r24, 0xAB	; 171
    18aa:	98 9f       	mul	r25, r24
    18ac:	81 2d       	mov	r24, r1
    18ae:	11 24       	eor	r1, r1
    18b0:	86 95       	lsr	r24
    18b2:	28 2f       	mov	r18, r24
    18b4:	22 0f       	add	r18, r18
    18b6:	82 0f       	add	r24, r18
    18b8:	98 1b       	sub	r25, r24
    18ba:	ef e3       	ldi	r30, 0x3F	; 63
    18bc:	fc e9       	ldi	r31, 0x9C	; 156
    18be:	31 97       	sbiw	r30, 0x01	; 1
    18c0:	f1 f7       	brne	.-4      	; 0x18be <hang+0x1ae>
    18c2:	00 c0       	rjmp	.+0      	; 0x18c4 <hang+0x1b4>
    18c4:	00 00       	nop
    18c6:	91 30       	cpi	r25, 0x01	; 1
	_delay_ms(10);
	hangFlag == 1 ? DCmotorright(200) : DCmotorleft(200);
    18c8:	21 f4       	brne	.+8      	; 0x18d2 <hang+0x1c2>
    18ca:	88 ec       	ldi	r24, 0xC8	; 200
    18cc:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <DCmotorright>
    18d0:	03 c0       	rjmp	.+6      	; 0x18d8 <hang+0x1c8>
    18d2:	88 ec       	ldi	r24, 0xC8	; 200
    18d4:	0e 94 cf 03 	call	0x79e	; 0x79e <DCmotorleft>
    18d8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
	
	if((times != _num) && ( (endhours - nowtime) == 0) )
    18dc:	82 2f       	mov	r24, r18
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	a0 e0       	ldi	r26, 0x00	; 0
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	48 16       	cp	r4, r24
    18e6:	59 06       	cpc	r5, r25
    18e8:	6a 06       	cpc	r6, r26
    18ea:	7b 06       	cpc	r7, r27
    18ec:	d1 f0       	breq	.+52     	; 0x1922 <hang+0x212>
    18ee:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <endhours.2460>
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	a0 e0       	ldi	r26, 0x00	; 0
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	40 91 9c 06 	lds	r20, 0x069C	; 0x80069c <nowtime.2449>
    18fc:	50 91 9d 06 	lds	r21, 0x069D	; 0x80069d <nowtime.2449+0x1>
    1900:	60 91 9e 06 	lds	r22, 0x069E	; 0x80069e <nowtime.2449+0x2>
    1904:	70 91 9f 06 	lds	r23, 0x069F	; 0x80069f <nowtime.2449+0x3>
    1908:	84 17       	cp	r24, r20
    190a:	95 07       	cpc	r25, r21
    190c:	a6 07       	cpc	r26, r22
    190e:	b7 07       	cpc	r27, r23
    1910:	d1 f4       	brne	.+52     	; 0x1946 <hang+0x236>
	{
		times ++;
    1912:	2f 5f       	subi	r18, 0xFF	; 255
    1914:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
		washer = dada;
    1918:	83 e0       	ldi	r24, 0x03	; 3
    191a:	80 93 96 08 	sts	0x0896, r24	; 0x800896 <washer>
		chogi_timer();
    191e:	07 dd       	rcall	.-1522   	; 0x132e <chogi_timer>
    1920:	23 c0       	rjmp	.+70     	; 0x1968 <hang+0x258>
    1922:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <endhours.2460>
	}
	else if(((times == _num) && ( (endhours - nowtime) == 0) ) || (_num == 0) )
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	a0 e0       	ldi	r26, 0x00	; 0
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	40 91 9c 06 	lds	r20, 0x069C	; 0x80069c <nowtime.2449>
    1930:	50 91 9d 06 	lds	r21, 0x069D	; 0x80069d <nowtime.2449+0x1>
    1934:	60 91 9e 06 	lds	r22, 0x069E	; 0x80069e <nowtime.2449+0x2>
    1938:	70 91 9f 06 	lds	r23, 0x069F	; 0x80069f <nowtime.2449+0x3>
    193c:	84 17       	cp	r24, r20
    193e:	95 07       	cpc	r25, r21
    1940:	a6 07       	cpc	r26, r22
    1942:	b7 07       	cpc	r27, r23
    1944:	21 f0       	breq	.+8      	; 0x194e <hang+0x23e>
    1946:	45 28       	or	r4, r5
    1948:	46 28       	or	r4, r6
    194a:	47 28       	or	r4, r7
    194c:	69 f4       	brne	.+26     	; 0x1968 <hang+0x258>
	{
		times = 1;
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		washer = dada;
    1954:	83 e0       	ldi	r24, 0x03	; 3
    1956:	80 93 96 08 	sts	0x0896, r24	; 0x800896 <washer>
		daegi_flag = 1;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	90 93 71 08 	sts	0x0871, r25	; 0x800871 <daegi_flag+0x1>
    1962:	80 93 70 08 	sts	0x0870, r24	; 0x800870 <daegi_flag>
		chogi_timer();
    1966:	e3 dc       	rcall	.-1594   	; 0x132e <chogi_timer>
    1968:	0f 90       	pop	r0
	}
}
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	df 91       	pop	r29
    1972:	cf 91       	pop	r28
    1974:	ff 90       	pop	r15
    1976:	ef 90       	pop	r14
    1978:	df 90       	pop	r13
    197a:	cf 90       	pop	r12
    197c:	bf 90       	pop	r11
    197e:	af 90       	pop	r10
    1980:	9f 90       	pop	r9
    1982:	8f 90       	pop	r8
    1984:	7f 90       	pop	r7
    1986:	6f 90       	pop	r6
    1988:	5f 90       	pop	r5
    198a:	4f 90       	pop	r4
    198c:	08 95       	ret

0000198e <daegi>:
    198e:	0e 94 c6 03 	call	0x78c	; 0x78c <DCmotorstop>
}

void daegi()
{
	DCmotorstop();
	PORTD &= ~(0x30);
    1992:	82 b3       	in	r24, 0x12	; 18
    1994:	8f 7c       	andi	r24, 0xCF	; 207
    1996:	82 bb       	out	0x12, r24	; 18
	PORTD |= 0x40;
    1998:	96 9a       	sbi	0x12, 6	; 18
	LCD_write_XY_string(0, 0, " Release Water  ");
    199a:	4d e9       	ldi	r20, 0x9D	; 157
    199c:	54 e0       	ldi	r21, 0x04	; 4
    199e:	60 e0       	ldi	r22, 0x00	; 0
    19a0:	80 e0       	ldi	r24, 0x00	; 0
    19a2:	6d d8       	rcall	.-3878   	; 0xa7e <LCD_write_XY_string>
	LCD_write_XY_string(1, 0, "wait a minute.. ");
    19a4:	4e ea       	ldi	r20, 0xAE	; 174
    19a6:	54 e0       	ldi	r21, 0x04	; 4
    19a8:	60 e0       	ldi	r22, 0x00	; 0
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	68 d8       	rcall	.-3888   	; 0xa7e <LCD_write_XY_string>
 	if((read_ADC(0) < 10) && (daegi_flag == 0)) 
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	0e 94 6d 00 	call	0xda	; 0xda <read_ADC>
    19b4:	0a 97       	sbiw	r24, 0x0a	; 10
    19b6:	54 f4       	brge	.+20     	; 0x19cc <daegi+0x3e>
    19b8:	80 91 70 08 	lds	r24, 0x0870	; 0x800870 <daegi_flag>
    19bc:	90 91 71 08 	lds	r25, 0x0871	; 0x800871 <daegi_flag+0x1>
    19c0:	89 2b       	or	r24, r25
    19c2:	21 f4       	brne	.+8      	; 0x19cc <daegi+0x3e>
	{
		washer = watering;
    19c4:	10 92 96 08 	sts	0x0896, r1	; 0x800896 <washer>
		chogi_timer();
		LCD_clear();
    19c8:	b2 dc       	rcall	.-1692   	; 0x132e <chogi_timer>
    19ca:	19 d8       	rcall	.-4046   	; 0x9fe <LCD_clear>
	}
 	if((read_ADC(0) < 10) && (daegi_flag == 1))
    19cc:	80 e0       	ldi	r24, 0x00	; 0
    19ce:	0e 94 6d 00 	call	0xda	; 0xda <read_ADC>
    19d2:	0a 97       	sbiw	r24, 0x0a	; 10
    19d4:	5c f4       	brge	.+22     	; 0x19ec <daegi+0x5e>
    19d6:	80 91 70 08 	lds	r24, 0x0870	; 0x800870 <daegi_flag>
    19da:	90 91 71 08 	lds	r25, 0x0871	; 0x800871 <daegi_flag+0x1>
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	29 f4       	brne	.+10     	; 0x19ec <daegi+0x5e>
	 {
		 washer = talsu;
    19e2:	85 e0       	ldi	r24, 0x05	; 5
		 chogi_timer();
    19e4:	80 93 96 08 	sts	0x0896, r24	; 0x800896 <washer>
		 LCD_clear();
    19e8:	a2 dc       	rcall	.-1724   	; 0x132e <chogi_timer>
    19ea:	09 c8       	rjmp	.-4078   	; 0x9fe <LCD_clear>
    19ec:	08 95       	ret

000019ee <yeyakye>:
	}
	return 0;
}

void yeyakye()
{
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
    19f2:	cd b7       	in	r28, 0x3d	; 61
    19f4:	de b7       	in	r29, 0x3e	; 62
    19f6:	a0 97       	sbiw	r28, 0x20	; 32
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	de bf       	out	0x3e, r29	; 62
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	cd bf       	out	0x3d, r28	; 61
	static int resve_Flag = 0, resve_time = 0, hmFlag = 0, set_Flag = 0;
	uint16_t buff[16];
	
	
	switch(set_Flag)
    1a02:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <set_Flag.2502>
    1a06:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <set_Flag.2502+0x1>
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	21 f0       	breq	.+8      	; 0x1a16 <yeyakye+0x28>
    1a0e:	01 97       	sbiw	r24, 0x01	; 1
    1a10:	09 f4       	brne	.+2      	; 0x1a14 <yeyakye+0x26>
    1a12:	48 c0       	rjmp	.+144    	; 0x1aa4 <yeyakye+0xb6>
    1a14:	0f c1       	rjmp	.+542    	; 0x1c34 <yeyakye+0x246>
	{
		case 0:
		LCD_write_XY_string(0, 0, "    Reserve?    ");
    1a16:	4f eb       	ldi	r20, 0xBF	; 191
    1a18:	54 e0       	ldi	r21, 0x04	; 4
    1a1a:	60 e0       	ldi	r22, 0x00	; 0
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	2f d8       	rcall	.-4002   	; 0xa7e <LCD_write_XY_string>
		resve_Flag == 0 ? LCD_write_XY_string(1, 0, "     No      ") : LCD_write_XY_string(1, 0, "     Yes      ");
    1a20:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <resve_Flag.2499>
    1a24:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <resve_Flag.2499+0x1>
    1a28:	89 2b       	or	r24, r25
    1a2a:	31 f4       	brne	.+12     	; 0x1a38 <yeyakye+0x4a>
    1a2c:	40 ed       	ldi	r20, 0xD0	; 208
    1a2e:	54 e0       	ldi	r21, 0x04	; 4
    1a30:	60 e0       	ldi	r22, 0x00	; 0
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	24 d8       	rcall	.-4024   	; 0xa7e <LCD_write_XY_string>
    1a36:	05 c0       	rjmp	.+10     	; 0x1a42 <yeyakye+0x54>
    1a38:	4e ed       	ldi	r20, 0xDE	; 222
    1a3a:	54 e0       	ldi	r21, 0x04	; 4
    1a3c:	60 e0       	ldi	r22, 0x00	; 0
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	1e d8       	rcall	.-4036   	; 0xa7e <LCD_write_XY_string>
		if(button(UP_BUTTON) || button(DOWN_BUTTON)) resve_Flag ^= 1;
    1a42:	82 e0       	ldi	r24, 0x02	; 2
    1a44:	0e 94 7d 00 	call	0xfa	; 0xfa <button>
    1a48:	89 2b       	or	r24, r25
    1a4a:	29 f4       	brne	.+10     	; 0x1a56 <yeyakye+0x68>
    1a4c:	83 e0       	ldi	r24, 0x03	; 3
    1a4e:	0e 94 7d 00 	call	0xfa	; 0xfa <button>
    1a52:	89 2b       	or	r24, r25
    1a54:	51 f0       	breq	.+20     	; 0x1a6a <yeyakye+0x7c>
    1a56:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <resve_Flag.2499>
    1a5a:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <resve_Flag.2499+0x1>
    1a5e:	21 e0       	ldi	r18, 0x01	; 1
    1a60:	82 27       	eor	r24, r18
    1a62:	90 93 6f 05 	sts	0x056F, r25	; 0x80056f <resve_Flag.2499+0x1>
    1a66:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <resve_Flag.2499>
		if(button(MENU_BUTTON))
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	0e 94 7d 00 	call	0xfa	; 0xfa <button>
    1a70:	89 2b       	or	r24, r25
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <yeyakye+0x88>
    1a74:	df c0       	rjmp	.+446    	; 0x1c34 <yeyakye+0x246>
		{
			if(resve_Flag ==1) set_Flag = 1;
    1a76:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <resve_Flag.2499>
    1a7a:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <resve_Flag.2499+0x1>
    1a7e:	81 30       	cpi	r24, 0x01	; 1
    1a80:	91 05       	cpc	r25, r1
    1a82:	39 f4       	brne	.+14     	; 0x1a92 <yeyakye+0xa4>
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <set_Flag.2502+0x1>
    1a8c:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <set_Flag.2502>
    1a90:	d1 c0       	rjmp	.+418    	; 0x1c34 <yeyakye+0x246>
			else if(resve_Flag == 0)
    1a92:	89 2b       	or	r24, r25
    1a94:	09 f0       	breq	.+2      	; 0x1a98 <yeyakye+0xaa>
    1a96:	ce c0       	rjmp	.+412    	; 0x1c34 <yeyakye+0x246>
			{
				yeyak =0;
    1a98:	10 92 93 08 	sts	0x0893, r1	; 0x800893 <yeyak>
				whole_state = run;
    1a9c:	83 e0       	ldi	r24, 0x03	; 3
    1a9e:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <whole_state>
    1aa2:	c8 c0       	rjmp	.+400    	; 0x1c34 <yeyakye+0x246>
			}
		}
		break;
		
		case 1:
		if(hmFlag == 0)
    1aa4:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <hmFlag.2501>
    1aa8:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <hmFlag.2501+0x1>
    1aac:	89 2b       	or	r24, r25
    1aae:	09 f0       	breq	.+2      	; 0x1ab2 <yeyakye+0xc4>
    1ab0:	5c c0       	rjmp	.+184    	; 0x1b6a <yeyakye+0x17c>
		{
			LCD_write_XY_string(0, 0, " Setting Hour ");
    1ab2:	4d ee       	ldi	r20, 0xED	; 237
    1ab4:	54 e0       	ldi	r21, 0x04	; 4
    1ab6:	60 e0       	ldi	r22, 0x00	; 0
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LCD_write_XY_string>
			if(button(UP_BUTTON) && (yeyakhours < 23)) yeyakhours ++;
    1abe:	82 e0       	ldi	r24, 0x02	; 2
    1ac0:	0e 94 7d 00 	call	0xfa	; 0xfa <button>
    1ac4:	89 2b       	or	r24, r25
    1ac6:	61 f0       	breq	.+24     	; 0x1ae0 <yeyakye+0xf2>
    1ac8:	80 91 74 08 	lds	r24, 0x0874	; 0x800874 <yeyakhours>
    1acc:	90 91 75 08 	lds	r25, 0x0875	; 0x800875 <yeyakhours+0x1>
    1ad0:	87 31       	cpi	r24, 0x17	; 23
    1ad2:	91 05       	cpc	r25, r1
    1ad4:	2c f4       	brge	.+10     	; 0x1ae0 <yeyakye+0xf2>
    1ad6:	01 96       	adiw	r24, 0x01	; 1
    1ad8:	90 93 75 08 	sts	0x0875, r25	; 0x800875 <yeyakhours+0x1>
    1adc:	80 93 74 08 	sts	0x0874, r24	; 0x800874 <yeyakhours>
			if(button(DOWN_BUTTON) && (yeyakhours > 0)) yeyakhours --;
    1ae0:	83 e0       	ldi	r24, 0x03	; 3
    1ae2:	0e 94 7d 00 	call	0xfa	; 0xfa <button>
    1ae6:	89 2b       	or	r24, r25
    1ae8:	61 f0       	breq	.+24     	; 0x1b02 <yeyakye+0x114>
    1aea:	80 91 74 08 	lds	r24, 0x0874	; 0x800874 <yeyakhours>
    1aee:	90 91 75 08 	lds	r25, 0x0875	; 0x800875 <yeyakhours+0x1>
    1af2:	18 16       	cp	r1, r24
    1af4:	19 06       	cpc	r1, r25
    1af6:	2c f4       	brge	.+10     	; 0x1b02 <yeyakye+0x114>
    1af8:	01 97       	sbiw	r24, 0x01	; 1
    1afa:	90 93 75 08 	sts	0x0875, r25	; 0x800875 <yeyakhours+0x1>
    1afe:	80 93 74 08 	sts	0x0874, r24	; 0x800874 <yeyakhours>
			sprintf(buff, "   %02d:  ", yeyakhours);
    1b02:	80 91 75 08 	lds	r24, 0x0875	; 0x800875 <yeyakhours+0x1>
    1b06:	8f 93       	push	r24
    1b08:	80 91 74 08 	lds	r24, 0x0874	; 0x800874 <yeyakhours>
    1b0c:	8f 93       	push	r24
    1b0e:	8c ef       	ldi	r24, 0xFC	; 252
    1b10:	94 e0       	ldi	r25, 0x04	; 4
    1b12:	9f 93       	push	r25
    1b14:	8f 93       	push	r24
    1b16:	ce 01       	movw	r24, r28
    1b18:	01 96       	adiw	r24, 0x01	; 1
    1b1a:	9f 93       	push	r25
    1b1c:	8f 93       	push	r24
    1b1e:	1c d3       	rcall	.+1592   	; 0x2158 <sprintf>
			DS1302_Timer()? LCD_write_XY_string(1, 0, "     :    after  ") : LCD_write_XY_string(1, 0, buff);
    1b20:	0e 94 ba 04 	call	0x974	; 0x974 <DS1302_Timer>
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	0f 90       	pop	r0
    1b2a:	0f 90       	pop	r0
    1b2c:	0f 90       	pop	r0
    1b2e:	0f 90       	pop	r0
    1b30:	89 2b       	or	r24, r25
    1b32:	39 f0       	breq	.+14     	; 0x1b42 <yeyakye+0x154>
    1b34:	47 e0       	ldi	r20, 0x07	; 7
    1b36:	55 e0       	ldi	r21, 0x05	; 5
    1b38:	60 e0       	ldi	r22, 0x00	; 0
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LCD_write_XY_string>
    1b40:	07 c0       	rjmp	.+14     	; 0x1b50 <yeyakye+0x162>
    1b42:	ae 01       	movw	r20, r28
    1b44:	4f 5f       	subi	r20, 0xFF	; 255
    1b46:	5f 4f       	sbci	r21, 0xFF	; 255
    1b48:	60 e0       	ldi	r22, 0x00	; 0
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LCD_write_XY_string>
			if(button(MENU_BUTTON))
    1b50:	81 e0       	ldi	r24, 0x01	; 1
    1b52:	0e 94 7d 00 	call	0xfa	; 0xfa <button>
    1b56:	89 2b       	or	r24, r25
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <yeyakye+0x16e>
    1b5a:	6c c0       	rjmp	.+216    	; 0x1c34 <yeyakye+0x246>
			{
				hmFlag = 1;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	90 93 6d 05 	sts	0x056D, r25	; 0x80056d <hmFlag.2501+0x1>
    1b64:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <hmFlag.2501>
    1b68:	65 c0       	rjmp	.+202    	; 0x1c34 <yeyakye+0x246>
			}
		}
		else
		{
			LCD_write_XY_string(0, 0, "Setting minutes ");
    1b6a:	49 e1       	ldi	r20, 0x19	; 25
    1b6c:	55 e0       	ldi	r21, 0x05	; 5
    1b6e:	60 e0       	ldi	r22, 0x00	; 0
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LCD_write_XY_string>
			if(timer_button(UP_BUTTON) && (yeyakminutes < 59)) yeyakminutes ++;
    1b76:	82 e0       	ldi	r24, 0x02	; 2
    1b78:	0e 94 c8 00 	call	0x190	; 0x190 <timer_button>
    1b7c:	89 2b       	or	r24, r25
    1b7e:	61 f0       	breq	.+24     	; 0x1b98 <yeyakye+0x1aa>
    1b80:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <yeyakminutes>
    1b84:	90 91 73 08 	lds	r25, 0x0873	; 0x800873 <yeyakminutes+0x1>
    1b88:	8b 33       	cpi	r24, 0x3B	; 59
    1b8a:	91 05       	cpc	r25, r1
    1b8c:	2c f4       	brge	.+10     	; 0x1b98 <yeyakye+0x1aa>
    1b8e:	01 96       	adiw	r24, 0x01	; 1
    1b90:	90 93 73 08 	sts	0x0873, r25	; 0x800873 <yeyakminutes+0x1>
    1b94:	80 93 72 08 	sts	0x0872, r24	; 0x800872 <yeyakminutes>
			if(timer_button(DOWN_BUTTON) && (yeyakminutes > 0)) yeyakminutes --;
    1b98:	83 e0       	ldi	r24, 0x03	; 3
    1b9a:	0e 94 c8 00 	call	0x190	; 0x190 <timer_button>
    1b9e:	89 2b       	or	r24, r25
    1ba0:	61 f0       	breq	.+24     	; 0x1bba <yeyakye+0x1cc>
    1ba2:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <yeyakminutes>
    1ba6:	90 91 73 08 	lds	r25, 0x0873	; 0x800873 <yeyakminutes+0x1>
    1baa:	18 16       	cp	r1, r24
    1bac:	19 06       	cpc	r1, r25
    1bae:	2c f4       	brge	.+10     	; 0x1bba <yeyakye+0x1cc>
    1bb0:	01 97       	sbiw	r24, 0x01	; 1
    1bb2:	90 93 73 08 	sts	0x0873, r25	; 0x800873 <yeyakminutes+0x1>
    1bb6:	80 93 72 08 	sts	0x0872, r24	; 0x800872 <yeyakminutes>
			sprintf(buff, "%02d", yeyakminutes);
    1bba:	80 91 73 08 	lds	r24, 0x0873	; 0x800873 <yeyakminutes+0x1>
    1bbe:	8f 93       	push	r24
    1bc0:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <yeyakminutes>
    1bc4:	8f 93       	push	r24
    1bc6:	8a e2       	ldi	r24, 0x2A	; 42
    1bc8:	95 e0       	ldi	r25, 0x05	; 5
    1bca:	9f 93       	push	r25
    1bcc:	8f 93       	push	r24
    1bce:	ce 01       	movw	r24, r28
    1bd0:	01 96       	adiw	r24, 0x01	; 1
    1bd2:	9f 93       	push	r25
    1bd4:	8f 93       	push	r24
    1bd6:	c0 d2       	rcall	.+1408   	; 0x2158 <sprintf>
			DS1302_Timer()? LCD_write_XY_string(1, 5, ":    after  ") : LCD_write_XY_string(1, 6, buff);
    1bd8:	0e 94 ba 04 	call	0x974	; 0x974 <DS1302_Timer>
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	0f 90       	pop	r0
    1be2:	0f 90       	pop	r0
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	89 2b       	or	r24, r25
    1bea:	39 f0       	breq	.+14     	; 0x1bfa <yeyakye+0x20c>
    1bec:	4c e0       	ldi	r20, 0x0C	; 12
    1bee:	55 e0       	ldi	r21, 0x05	; 5
    1bf0:	65 e0       	ldi	r22, 0x05	; 5
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LCD_write_XY_string>
    1bf8:	07 c0       	rjmp	.+14     	; 0x1c08 <yeyakye+0x21a>
    1bfa:	ae 01       	movw	r20, r28
    1bfc:	4f 5f       	subi	r20, 0xFF	; 255
    1bfe:	5f 4f       	sbci	r21, 0xFF	; 255
    1c00:	66 e0       	ldi	r22, 0x06	; 6
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LCD_write_XY_string>
			if(button(MENU_BUTTON))
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	0e 94 7d 00 	call	0xfa	; 0xfa <button>
    1c0e:	89 2b       	or	r24, r25
    1c10:	89 f0       	breq	.+34     	; 0x1c34 <yeyakye+0x246>
			{
				hmFlag = 0;
    1c12:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <hmFlag.2501+0x1>
    1c16:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <hmFlag.2501>
				resve_Flag = 0;
    1c1a:	10 92 6f 05 	sts	0x056F, r1	; 0x80056f <resve_Flag.2499+0x1>
    1c1e:	10 92 6e 05 	sts	0x056E, r1	; 0x80056e <resve_Flag.2499>
				chogi_timer();
    1c22:	85 db       	rcall	.-2294   	; 0x132e <chogi_timer>
				LCD_clear();
    1c24:	0e 94 ff 04 	call	0x9fe	; 0x9fe <LCD_clear>
				yeyak = 1;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	80 93 93 08 	sts	0x0893, r24	; 0x800893 <yeyak>
				whole_state = run;
    1c2e:	83 e0       	ldi	r24, 0x03	; 3
    1c30:	80 93 95 08 	sts	0x0895, r24	; 0x800895 <whole_state>
			}
		}
	}
	chogi_timer();
    1c34:	7c db       	rcall	.-2312   	; 0x132e <chogi_timer>
}
    1c36:	a0 96       	adiw	r28, 0x20	; 32
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	de bf       	out	0x3e, r29	; 62
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	cd bf       	out	0x3d, r28	; 61
    1c42:	df 91       	pop	r29
    1c44:	cf 91       	pop	r28
    1c46:	08 95       	ret

00001c48 <waiting_yeyak>:
	remains.seconds = 0;
	DS1302_SetTimeDates(remains);
}

void waiting_yeyak()
{
    1c48:	4f 92       	push	r4
    1c4a:	5f 92       	push	r5
    1c4c:	6f 92       	push	r6
    1c4e:	7f 92       	push	r7
    1c50:	8f 92       	push	r8
    1c52:	9f 92       	push	r9
    1c54:	af 92       	push	r10
    1c56:	bf 92       	push	r11
    1c58:	cf 92       	push	r12
    1c5a:	df 92       	push	r13
    1c5c:	ef 92       	push	r14
    1c5e:	ff 92       	push	r15
    1c60:	0f 93       	push	r16
    1c62:	1f 93       	push	r17
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	c0 5c       	subi	r28, 0xC0	; 192
    1c6e:	d1 09       	sbc	r29, r1
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	cd bf       	out	0x3d, r28	; 61
	uint32_t endtime, nowtime, remain, ss, mm, hh, sec[16], min[16], hou[16];
	endtime = yeyakhours*3600+ yeyakminutes*60;
    1c7a:	80 91 74 08 	lds	r24, 0x0874	; 0x800874 <yeyakhours>
    1c7e:	90 91 75 08 	lds	r25, 0x0875	; 0x800875 <yeyakhours+0x1>
    1c82:	00 e1       	ldi	r16, 0x10	; 16
    1c84:	1e e0       	ldi	r17, 0x0E	; 14
    1c86:	80 9f       	mul	r24, r16
    1c88:	60 01       	movw	r12, r0
    1c8a:	81 9f       	mul	r24, r17
    1c8c:	d0 0c       	add	r13, r0
    1c8e:	90 9f       	mul	r25, r16
    1c90:	d0 0c       	add	r13, r0
    1c92:	11 24       	eor	r1, r1
    1c94:	20 91 72 08 	lds	r18, 0x0872	; 0x800872 <yeyakminutes>
    1c98:	30 91 73 08 	lds	r19, 0x0873	; 0x800873 <yeyakminutes+0x1>
    1c9c:	0f 2e       	mov	r0, r31
    1c9e:	fc e3       	ldi	r31, 0x3C	; 60
    1ca0:	bf 2e       	mov	r11, r31
    1ca2:	f0 2d       	mov	r31, r0
    1ca4:	b2 9e       	mul	r11, r18
    1ca6:	c0 01       	movw	r24, r0
    1ca8:	b3 9e       	mul	r11, r19
    1caa:	90 0d       	add	r25, r0
    1cac:	11 24       	eor	r1, r1
    1cae:	c8 0e       	add	r12, r24
    1cb0:	d9 1e       	adc	r13, r25
    1cb2:	0d 2c       	mov	r0, r13
    1cb4:	00 0c       	add	r0, r0
    1cb6:	ee 08       	sbc	r14, r14
    1cb8:	ff 08       	sbc	r15, r15
	LCD_write_XY_string(0, 0, "    remains    ");
    1cba:	4f e2       	ldi	r20, 0x2F	; 47
    1cbc:	55 e0       	ldi	r21, 0x05	; 5
    1cbe:	60 e0       	ldi	r22, 0x00	; 0
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LCD_write_XY_string>
	DS1302_GetTime(&remains);
    1cc6:	89 ea       	ldi	r24, 0xA9	; 169
    1cc8:	98 e0       	ldi	r25, 0x08	; 8
    1cca:	0e 94 79 04 	call	0x8f2	; 0x8f2 <DS1302_GetTime>
	nowtime = remains.hour*3600+remains.minutes*60+remains.seconds;
    1cce:	e9 ea       	ldi	r30, 0xA9	; 169
    1cd0:	f8 e0       	ldi	r31, 0x08	; 8
	remain = endtime - nowtime;
    1cd2:	22 81       	ldd	r18, Z+2	; 0x02
    1cd4:	20 9f       	mul	r18, r16
    1cd6:	c0 01       	movw	r24, r0
    1cd8:	21 9f       	mul	r18, r17
    1cda:	90 0d       	add	r25, r0
    1cdc:	11 24       	eor	r1, r1
    1cde:	21 81       	ldd	r18, Z+1	; 0x01
    1ce0:	b2 9e       	mul	r11, r18
    1ce2:	80 0d       	add	r24, r0
    1ce4:	91 1d       	adc	r25, r1
    1ce6:	11 24       	eor	r1, r1
    1ce8:	20 81       	ld	r18, Z
    1cea:	82 0f       	add	r24, r18
    1cec:	91 1d       	adc	r25, r1
    1cee:	09 2e       	mov	r0, r25
    1cf0:	00 0c       	add	r0, r0
    1cf2:	aa 0b       	sbc	r26, r26
    1cf4:	bb 0b       	sbc	r27, r27
    1cf6:	c8 1a       	sub	r12, r24
    1cf8:	d9 0a       	sbc	r13, r25
    1cfa:	ea 0a       	sbc	r14, r26
    1cfc:	fb 0a       	sbc	r15, r27
	hh = remain/3600;
	mm = (remain%3600)/60;
	ss = remain%60;
	sprintf(hou,"    %02d:", hh);
    1cfe:	c7 01       	movw	r24, r14
    1d00:	b6 01       	movw	r22, r12
    1d02:	20 e1       	ldi	r18, 0x10	; 16
    1d04:	3e e0       	ldi	r19, 0x0E	; 14
    1d06:	40 e0       	ldi	r20, 0x00	; 0
    1d08:	50 e0       	ldi	r21, 0x00	; 0
    1d0a:	d4 d1       	rcall	.+936    	; 0x20b4 <__udivmodsi4>
    1d0c:	4b 01       	movw	r8, r22
    1d0e:	5c 01       	movw	r10, r24
    1d10:	5f 93       	push	r21
    1d12:	4f 93       	push	r20
    1d14:	3f 93       	push	r19
    1d16:	2f 93       	push	r18
    1d18:	8f e3       	ldi	r24, 0x3F	; 63
    1d1a:	95 e0       	ldi	r25, 0x05	; 5
    1d1c:	9f 93       	push	r25
    1d1e:	8f 93       	push	r24
    1d20:	8e 01       	movw	r16, r28
    1d22:	0f 57       	subi	r16, 0x7F	; 127
    1d24:	1f 4f       	sbci	r17, 0xFF	; 255
    1d26:	1f 93       	push	r17
    1d28:	0f 93       	push	r16
    1d2a:	16 d2       	rcall	.+1068   	; 0x2158 <sprintf>
	sprintf(min,"%02d:", mm);
    1d2c:	0f 2e       	mov	r0, r31
    1d2e:	fc e3       	ldi	r31, 0x3C	; 60
    1d30:	4f 2e       	mov	r4, r31
    1d32:	51 2c       	mov	r5, r1
    1d34:	61 2c       	mov	r6, r1
    1d36:	71 2c       	mov	r7, r1
    1d38:	f0 2d       	mov	r31, r0
    1d3a:	c5 01       	movw	r24, r10
    1d3c:	b4 01       	movw	r22, r8
    1d3e:	a3 01       	movw	r20, r6
    1d40:	92 01       	movw	r18, r4
    1d42:	b8 d1       	rcall	.+880    	; 0x20b4 <__udivmodsi4>
    1d44:	5f 93       	push	r21
    1d46:	4f 93       	push	r20
    1d48:	3f 93       	push	r19
    1d4a:	2f 93       	push	r18
    1d4c:	83 e4       	ldi	r24, 0x43	; 67
    1d4e:	95 e0       	ldi	r25, 0x05	; 5
    1d50:	9f 93       	push	r25
    1d52:	8f 93       	push	r24
    1d54:	4e 01       	movw	r8, r28
    1d56:	81 e4       	ldi	r24, 0x41	; 65
    1d58:	88 0e       	add	r8, r24
    1d5a:	91 1c       	adc	r9, r1
    1d5c:	9f 92       	push	r9
    1d5e:	8f 92       	push	r8
    1d60:	fb d1       	rcall	.+1014   	; 0x2158 <sprintf>
	sprintf(sec,"%02d   ", ss);
    1d62:	c7 01       	movw	r24, r14
    1d64:	b6 01       	movw	r22, r12
    1d66:	a3 01       	movw	r20, r6
    1d68:	92 01       	movw	r18, r4
    1d6a:	a4 d1       	rcall	.+840    	; 0x20b4 <__udivmodsi4>
    1d6c:	9f 93       	push	r25
    1d6e:	8f 93       	push	r24
    1d70:	7f 93       	push	r23
    1d72:	6f 93       	push	r22
    1d74:	89 e4       	ldi	r24, 0x49	; 73
    1d76:	95 e0       	ldi	r25, 0x05	; 5
    1d78:	9f 93       	push	r25
    1d7a:	8f 93       	push	r24
    1d7c:	ce 01       	movw	r24, r28
    1d7e:	01 96       	adiw	r24, 0x01	; 1
    1d80:	5c 01       	movw	r10, r24
    1d82:	9f 93       	push	r25
    1d84:	8f 93       	push	r24
    1d86:	e8 d1       	rcall	.+976    	; 0x2158 <sprintf>
	LCD_write_XY_string(1, 0, hou);
    1d88:	a8 01       	movw	r20, r16
    1d8a:	60 e0       	ldi	r22, 0x00	; 0
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LCD_write_XY_string>
	LCD_write_XY_string(1, 7, min);
    1d92:	a4 01       	movw	r20, r8
    1d94:	67 e0       	ldi	r22, 0x07	; 7
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LCD_write_XY_string>
	LCD_write_XY_string(1, 10, sec);
    1d9c:	a5 01       	movw	r20, r10
    1d9e:	6a e0       	ldi	r22, 0x0A	; 10
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LCD_write_XY_string>
	if(remain == 0)
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	de bf       	out	0x3e, r29	; 62
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	cd bf       	out	0x3d, r28	; 61
    1db0:	cd 28       	or	r12, r13
    1db2:	ce 28       	or	r12, r14
    1db4:	cf 28       	or	r12, r15
	{
		yeyak = 0;
    1db6:	59 f4       	brne	.+22     	; 0x1dce <waiting_yeyak+0x186>
    1db8:	10 92 93 08 	sts	0x0893, r1	; 0x800893 <yeyak>
		chogi_timer();
    1dbc:	b8 da       	rcall	.-2704   	; 0x132e <chogi_timer>
		yeyakhours = 0;
    1dbe:	10 92 75 08 	sts	0x0875, r1	; 0x800875 <yeyakhours+0x1>
    1dc2:	10 92 74 08 	sts	0x0874, r1	; 0x800874 <yeyakhours>
		yeyakminutes = 0;
    1dc6:	10 92 73 08 	sts	0x0873, r1	; 0x800873 <yeyakminutes+0x1>
    1dca:	10 92 72 08 	sts	0x0872, r1	; 0x800872 <yeyakminutes>
	}
}
    1dce:	c0 54       	subi	r28, 0x40	; 64
    1dd0:	df 4f       	sbci	r29, 0xFF	; 255
    1dd2:	0f b6       	in	r0, 0x3f	; 63
    1dd4:	f8 94       	cli
    1dd6:	de bf       	out	0x3e, r29	; 62
    1dd8:	0f be       	out	0x3f, r0	; 63
    1dda:	cd bf       	out	0x3d, r28	; 61
    1ddc:	df 91       	pop	r29
    1dde:	cf 91       	pop	r28
    1de0:	1f 91       	pop	r17
    1de2:	0f 91       	pop	r16
    1de4:	ff 90       	pop	r15
    1de6:	ef 90       	pop	r14
    1de8:	df 90       	pop	r13
    1dea:	cf 90       	pop	r12
    1dec:	bf 90       	pop	r11
    1dee:	af 90       	pop	r10
    1df0:	9f 90       	pop	r9
    1df2:	8f 90       	pop	r8
    1df4:	7f 90       	pop	r7
    1df6:	6f 90       	pop	r6
    1df8:	5f 90       	pop	r5
    1dfa:	4f 90       	pop	r4
    1dfc:	08 95       	ret

00001dfe <pause_time>:

void pause_time()
{
	DS1302_GetTime(&pausing);
    1dfe:	80 ea       	ldi	r24, 0xA0	; 160
    1e00:	98 e0       	ldi	r25, 0x08	; 8
    1e02:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <DS1302_GetTime>
    1e06:	08 95       	ret

00001e08 <restart_time>:
}

void restart_time()
{
    1e08:	0f 93       	push	r16
    1e0a:	1f 93       	push	r17
	DS1302_SetTimeDates(pausing);
    1e0c:	00 91 a0 08 	lds	r16, 0x08A0	; 0x8008a0 <pausing>
    1e10:	10 91 a1 08 	lds	r17, 0x08A1	; 0x8008a1 <pausing+0x1>
    1e14:	20 91 a2 08 	lds	r18, 0x08A2	; 0x8008a2 <pausing+0x2>
    1e18:	30 91 a3 08 	lds	r19, 0x08A3	; 0x8008a3 <pausing+0x3>
    1e1c:	40 91 a4 08 	lds	r20, 0x08A4	; 0x8008a4 <pausing+0x4>
    1e20:	50 91 a5 08 	lds	r21, 0x08A5	; 0x8008a5 <pausing+0x5>
    1e24:	60 91 a6 08 	lds	r22, 0x08A6	; 0x8008a6 <pausing+0x6>
    1e28:	70 91 a7 08 	lds	r23, 0x08A7	; 0x8008a7 <pausing+0x7>
    1e2c:	80 91 a8 08 	lds	r24, 0x08A8	; 0x8008a8 <pausing+0x8>
    1e30:	0e 94 88 04 	call	0x910	; 0x910 <DS1302_SetTimeDates>
}
    1e34:	1f 91       	pop	r17
    1e36:	0f 91       	pop	r16
    1e38:	08 95       	ret

00001e3a <waterwatering>:

void waterwatering()
{
	LCD_write_XY_string(0,0, "    Watering    ");
    1e3a:	41 e5       	ldi	r20, 0x51	; 81
    1e3c:	55 e0       	ldi	r21, 0x05	; 5
    1e3e:	60 e0       	ldi	r22, 0x00	; 0
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LCD_write_XY_string>
	LCD_write_XY_string(1,0, "                ");
    1e46:	4d ee       	ldi	r20, 0xED	; 237
    1e48:	52 e0       	ldi	r21, 0x02	; 2
    1e4a:	60 e0       	ldi	r22, 0x00	; 0
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <LCD_write_XY_string>
	PORTD &= ~(1 << 6);
    1e52:	96 98       	cbi	0x12, 6	; 18
	if(hotwater == 0) PORTD |= (1 << 4);
    1e54:	80 91 6e 08 	lds	r24, 0x086E	; 0x80086e <hotwater>
    1e58:	90 91 6f 08 	lds	r25, 0x086F	; 0x80086f <hotwater+0x1>
    1e5c:	89 2b       	or	r24, r25
    1e5e:	11 f4       	brne	.+4      	; 0x1e64 <waterwatering+0x2a>
    1e60:	94 9a       	sbi	0x12, 4	; 18
    1e62:	01 c0       	rjmp	.+2      	; 0x1e66 <waterwatering+0x2c>
	else if(hotwater) PORTD |= (1 << 5);
    1e64:	95 9a       	sbi	0x12, 5	; 18
		if((read_ADC(0) > 570) && (water_Flag == 0) )
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	0e 94 6d 00 	call	0xda	; 0xda <read_ADC>
    1e6c:	8b 33       	cpi	r24, 0x3B	; 59
    1e6e:	92 40       	sbci	r25, 0x02	; 2
    1e70:	74 f0       	brlt	.+28     	; 0x1e8e <waterwatering+0x54>
    1e72:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <water_Flag>
    1e76:	90 91 6d 08 	lds	r25, 0x086D	; 0x80086d <water_Flag+0x1>
    1e7a:	89 2b       	or	r24, r25
    1e7c:	41 f4       	brne	.+16     	; 0x1e8e <waterwatering+0x54>
	{
		PORTD &= ~(0xf0);
    1e7e:	82 b3       	in	r24, 0x12	; 18
    1e80:	8f 70       	andi	r24, 0x0F	; 15
    1e82:	82 bb       	out	0x12, r24	; 18
		washer = bull;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	80 93 96 08 	sts	0x0896, r24	; 0x800896 <washer>
		chogi_timer();
    1e8a:	51 ca       	rjmp	.-2910   	; 0x132e <chogi_timer>
    1e8c:	08 95       	ret
	}
	else if((read_ADC(0) > 450)&&(water_Flag == 1))
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	0e 94 6d 00 	call	0xda	; 0xda <read_ADC>
    1e94:	83 3c       	cpi	r24, 0xC3	; 195
    1e96:	91 40       	sbci	r25, 0x01	; 1
    1e98:	54 f0       	brlt	.+20     	; 0x1eae <waterwatering+0x74>
    1e9a:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <water_Flag>
    1e9e:	90 91 6d 08 	lds	r25, 0x086D	; 0x80086d <water_Flag+0x1>
    1ea2:	01 97       	sbiw	r24, 0x01	; 1
    1ea4:	21 f4       	brne	.+8      	; 0x1eae <waterwatering+0x74>
	{
		washer = haha;
    1ea6:	84 e0       	ldi	r24, 0x04	; 4
    1ea8:	80 93 96 08 	sts	0x0896, r24	; 0x800896 <washer>
		chogi_timer();
    1eac:	40 ca       	rjmp	.-2944   	; 0x132e <chogi_timer>
    1eae:	08 95       	ret

00001eb0 <run_washer>:
	 }
}  


void run_washer(uint32_t* _mode)
{
    1eb0:	fc 01       	movw	r30, r24
	switch (washer)
    1eb2:	90 91 96 08 	lds	r25, 0x0896	; 0x800896 <washer>
    1eb6:	92 30       	cpi	r25, 0x02	; 2
    1eb8:	a1 f0       	breq	.+40     	; 0x1ee2 <run_washer+0x32>
    1eba:	28 f4       	brcc	.+10     	; 0x1ec6 <run_washer+0x16>
    1ebc:	99 23       	and	r25, r25
    1ebe:	49 f0       	breq	.+18     	; 0x1ed2 <run_washer+0x22>
    1ec0:	91 30       	cpi	r25, 0x01	; 1
    1ec2:	49 f0       	breq	.+18     	; 0x1ed6 <run_washer+0x26>
    1ec4:	08 95       	ret
    1ec6:	94 30       	cpi	r25, 0x04	; 4
    1ec8:	c1 f0       	breq	.+48     	; 0x1efa <run_washer+0x4a>
    1eca:	a8 f0       	brcs	.+42     	; 0x1ef6 <run_washer+0x46>
    1ecc:	95 30       	cpi	r25, 0x05	; 5
    1ece:	d9 f0       	breq	.+54     	; 0x1f06 <run_washer+0x56>
    1ed0:	08 95       	ret
	{
		case watering:
			waterwatering();
    1ed2:	b3 cf       	rjmp	.-154    	; 0x1e3a <waterwatering>
			break;
    1ed4:	08 95       	ret
			
		case bull:
			bulym(_mode[0]);
    1ed6:	60 81       	ld	r22, Z
    1ed8:	71 81       	ldd	r23, Z+1	; 0x01
    1eda:	82 81       	ldd	r24, Z+2	; 0x02
    1edc:	93 81       	ldd	r25, Z+3	; 0x03
    1ede:	41 ca       	rjmp	.-2942   	; 0x1362 <bulym>
			break;
    1ee0:	08 95       	ret
		
		case sesese:
			setak(_mode[1], _mode[2]);
    1ee2:	20 85       	ldd	r18, Z+8	; 0x08
    1ee4:	31 85       	ldd	r19, Z+9	; 0x09
    1ee6:	42 85       	ldd	r20, Z+10	; 0x0a
    1ee8:	53 85       	ldd	r21, Z+11	; 0x0b
    1eea:	64 81       	ldd	r22, Z+4	; 0x04
    1eec:	75 81       	ldd	r23, Z+5	; 0x05
    1eee:	86 81       	ldd	r24, Z+6	; 0x06
    1ef0:	97 81       	ldd	r25, Z+7	; 0x07
			break;
    1ef2:	10 cb       	rjmp	.-2528   	; 0x1514 <setak>
		
		case dada:
			daegi();
    1ef4:	08 95       	ret
    1ef6:	4b cd       	rjmp	.-1386   	; 0x198e <daegi>
			break;
    1ef8:	08 95       	ret
		
		case haha:
			hang(_mode[3]);
    1efa:	64 85       	ldd	r22, Z+12	; 0x0c
    1efc:	75 85       	ldd	r23, Z+13	; 0x0d
    1efe:	86 85       	ldd	r24, Z+14	; 0x0e
    1f00:	97 85       	ldd	r25, Z+15	; 0x0f
    1f02:	06 cc       	rjmp	.-2036   	; 0x1710 <hang>
			break;
    1f04:	08 95       	ret
		
		case talsu:
			tal(_mode[4]);
    1f06:	60 89       	ldd	r22, Z+16	; 0x10
    1f08:	71 89       	ldd	r23, Z+17	; 0x11
    1f0a:	82 89       	ldd	r24, Z+18	; 0x12
    1f0c:	93 89       	ldd	r25, Z+19	; 0x13
    1f0e:	0c 94 21 07 	jmp	0xe42	; 0xe42 <tal>
    1f12:	08 95       	ret

00001f14 <water_Flag_reset>:
	}
}

void water_Flag_reset()
{
	water_Flag =0;
    1f14:	10 92 6d 08 	sts	0x086D, r1	; 0x80086d <water_Flag+0x1>
    1f18:	10 92 6c 08 	sts	0x086C, r1	; 0x80086c <water_Flag>
    1f1c:	08 95       	ret

00001f1e <daegi_flag_reset>:
}

void daegi_flag_reset()
{
	daegi_flag = 0;
    1f1e:	10 92 71 08 	sts	0x0871, r1	; 0x800871 <daegi_flag+0x1>
    1f22:	10 92 70 08 	sts	0x0870, r1	; 0x800870 <daegi_flag>
    1f26:	08 95       	ret

00001f28 <timer0init>:


void timer0init()
{
	//분주비 64
	TCCR0 |= _BV(CS02);
    1f28:	83 b7       	in	r24, 0x33	; 51
    1f2a:	84 60       	ori	r24, 0x04	; 4
    1f2c:	83 bf       	out	0x33, r24	; 51
	//CTC mode 사용
	TCCR0 |= _BV(WGM01);
    1f2e:	83 b7       	in	r24, 0x33	; 51
    1f30:	88 60       	ori	r24, 0x08	; 8
    1f32:	83 bf       	out	0x33, r24	; 51
	//ouput compare interrupt enable
	TIMSK |= _BV(OCIE0);
    1f34:	87 b7       	in	r24, 0x37	; 55
    1f36:	82 60       	ori	r24, 0x02	; 2
    1f38:	87 bf       	out	0x37, r24	; 55
	OCR0 = 250;
    1f3a:	8a ef       	ldi	r24, 0xFA	; 250
    1f3c:	81 bf       	out	0x31, r24	; 49
    1f3e:	08 95       	ret

00001f40 <incMilliSec>:
	// tcnt set 250
}

void incMilliSec()
{
	milliSec ++;
    1f40:	80 91 8e 08 	lds	r24, 0x088E	; 0x80088e <milliSec>
    1f44:	90 91 8f 08 	lds	r25, 0x088F	; 0x80088f <milliSec+0x1>
    1f48:	a0 91 90 08 	lds	r26, 0x0890	; 0x800890 <milliSec+0x2>
    1f4c:	b0 91 91 08 	lds	r27, 0x0891	; 0x800891 <milliSec+0x3>
    1f50:	01 96       	adiw	r24, 0x01	; 1
    1f52:	a1 1d       	adc	r26, r1
    1f54:	b1 1d       	adc	r27, r1
    1f56:	80 93 8e 08 	sts	0x088E, r24	; 0x80088e <milliSec>
    1f5a:	90 93 8f 08 	sts	0x088F, r25	; 0x80088f <milliSec+0x1>
    1f5e:	a0 93 90 08 	sts	0x0890, r26	; 0x800890 <milliSec+0x2>
    1f62:	b0 93 91 08 	sts	0x0891, r27	; 0x800891 <milliSec+0x3>
    1f66:	08 95       	ret

00001f68 <millis>:
}

uint32_t millis()
{
	return milliSec;
    1f68:	60 91 8e 08 	lds	r22, 0x088E	; 0x80088e <milliSec>
    1f6c:	70 91 8f 08 	lds	r23, 0x088F	; 0x80088f <milliSec+0x1>
    1f70:	80 91 90 08 	lds	r24, 0x0890	; 0x800890 <milliSec+0x2>
    1f74:	90 91 91 08 	lds	r25, 0x0891	; 0x800891 <milliSec+0x3>
}
    1f78:	08 95       	ret

00001f7a <incTime>:

void incTime()
{
	if((milliSec%1000) == 0)
    1f7a:	60 91 8e 08 	lds	r22, 0x088E	; 0x80088e <milliSec>
    1f7e:	70 91 8f 08 	lds	r23, 0x088F	; 0x80088f <milliSec+0x1>
    1f82:	80 91 90 08 	lds	r24, 0x0890	; 0x800890 <milliSec+0x2>
    1f86:	90 91 91 08 	lds	r25, 0x0891	; 0x800891 <milliSec+0x3>
    1f8a:	28 ee       	ldi	r18, 0xE8	; 232
    1f8c:	33 e0       	ldi	r19, 0x03	; 3
    1f8e:	40 e0       	ldi	r20, 0x00	; 0
    1f90:	50 e0       	ldi	r21, 0x00	; 0
    1f92:	90 d0       	rcall	.+288    	; 0x20b4 <__udivmodsi4>
    1f94:	67 2b       	or	r22, r23
    1f96:	68 2b       	or	r22, r24
    1f98:	69 2b       	or	r22, r25
    1f9a:	f1 f4       	brne	.+60     	; 0x1fd8 <incTime+0x5e>
	{
		sec++;
    1f9c:	80 91 8d 08 	lds	r24, 0x088D	; 0x80088d <sec>
    1fa0:	8f 5f       	subi	r24, 0xFF	; 255
		if(sec >= 60)
    1fa2:	8c 33       	cpi	r24, 0x3C	; 60
    1fa4:	18 f4       	brcc	.+6      	; 0x1fac <incTime+0x32>

void incTime()
{
	if((milliSec%1000) == 0)
	{
		sec++;
    1fa6:	80 93 8d 08 	sts	0x088D, r24	; 0x80088d <sec>
    1faa:	08 95       	ret
		if(sec >= 60)
		{
			sec = 0;
    1fac:	10 92 8d 08 	sts	0x088D, r1	; 0x80088d <sec>
			min ++;
    1fb0:	80 91 8c 08 	lds	r24, 0x088C	; 0x80088c <min>
    1fb4:	8f 5f       	subi	r24, 0xFF	; 255
			if(min>=60)
    1fb6:	8c 33       	cpi	r24, 0x3C	; 60
    1fb8:	18 f4       	brcc	.+6      	; 0x1fc0 <incTime+0x46>
	{
		sec++;
		if(sec >= 60)
		{
			sec = 0;
			min ++;
    1fba:	80 93 8c 08 	sts	0x088C, r24	; 0x80088c <min>
    1fbe:	08 95       	ret
			if(min>=60)
			{
				min = 0;
    1fc0:	10 92 8c 08 	sts	0x088C, r1	; 0x80088c <min>
				hour ++;
    1fc4:	80 91 8b 08 	lds	r24, 0x088B	; 0x80088b <hour>
    1fc8:	8f 5f       	subi	r24, 0xFF	; 255
				if(hour>=24)
    1fca:	88 31       	cpi	r24, 0x18	; 24
    1fcc:	18 f4       	brcc	.+6      	; 0x1fd4 <incTime+0x5a>
			sec = 0;
			min ++;
			if(min>=60)
			{
				min = 0;
				hour ++;
    1fce:	80 93 8b 08 	sts	0x088B, r24	; 0x80088b <hour>
    1fd2:	08 95       	ret
				if(hour>=24)
				{
					hour =0;
    1fd4:	10 92 8b 08 	sts	0x088B, r1	; 0x80088b <hour>
    1fd8:	08 95       	ret

00001fda <__fixsfsi>:
    1fda:	04 d0       	rcall	.+8      	; 0x1fe4 <__fixunssfsi>
    1fdc:	68 94       	set
    1fde:	b1 11       	cpse	r27, r1
    1fe0:	50 c0       	rjmp	.+160    	; 0x2082 <__fp_szero>
    1fe2:	08 95       	ret

00001fe4 <__fixunssfsi>:
    1fe4:	33 d0       	rcall	.+102    	; 0x204c <__fp_splitA>
    1fe6:	88 f0       	brcs	.+34     	; 0x200a <__fixunssfsi+0x26>
    1fe8:	9f 57       	subi	r25, 0x7F	; 127
    1fea:	90 f0       	brcs	.+36     	; 0x2010 <__fixunssfsi+0x2c>
    1fec:	b9 2f       	mov	r27, r25
    1fee:	99 27       	eor	r25, r25
    1ff0:	b7 51       	subi	r27, 0x17	; 23
    1ff2:	a0 f0       	brcs	.+40     	; 0x201c <__fixunssfsi+0x38>
    1ff4:	d1 f0       	breq	.+52     	; 0x202a <__fixunssfsi+0x46>
    1ff6:	66 0f       	add	r22, r22
    1ff8:	77 1f       	adc	r23, r23
    1ffa:	88 1f       	adc	r24, r24
    1ffc:	99 1f       	adc	r25, r25
    1ffe:	1a f0       	brmi	.+6      	; 0x2006 <__fixunssfsi+0x22>
    2000:	ba 95       	dec	r27
    2002:	c9 f7       	brne	.-14     	; 0x1ff6 <__fixunssfsi+0x12>
    2004:	12 c0       	rjmp	.+36     	; 0x202a <__fixunssfsi+0x46>
    2006:	b1 30       	cpi	r27, 0x01	; 1
    2008:	81 f0       	breq	.+32     	; 0x202a <__fixunssfsi+0x46>
    200a:	3a d0       	rcall	.+116    	; 0x2080 <__fp_zero>
    200c:	b1 e0       	ldi	r27, 0x01	; 1
    200e:	08 95       	ret
    2010:	37 c0       	rjmp	.+110    	; 0x2080 <__fp_zero>
    2012:	67 2f       	mov	r22, r23
    2014:	78 2f       	mov	r23, r24
    2016:	88 27       	eor	r24, r24
    2018:	b8 5f       	subi	r27, 0xF8	; 248
    201a:	39 f0       	breq	.+14     	; 0x202a <__fixunssfsi+0x46>
    201c:	b9 3f       	cpi	r27, 0xF9	; 249
    201e:	cc f3       	brlt	.-14     	; 0x2012 <__fixunssfsi+0x2e>
    2020:	86 95       	lsr	r24
    2022:	77 95       	ror	r23
    2024:	67 95       	ror	r22
    2026:	b3 95       	inc	r27
    2028:	d9 f7       	brne	.-10     	; 0x2020 <__fixunssfsi+0x3c>
    202a:	3e f4       	brtc	.+14     	; 0x203a <__fixunssfsi+0x56>
    202c:	90 95       	com	r25
    202e:	80 95       	com	r24
    2030:	70 95       	com	r23
    2032:	61 95       	neg	r22
    2034:	7f 4f       	sbci	r23, 0xFF	; 255
    2036:	8f 4f       	sbci	r24, 0xFF	; 255
    2038:	9f 4f       	sbci	r25, 0xFF	; 255
    203a:	08 95       	ret

0000203c <__fp_split3>:
    203c:	57 fd       	sbrc	r21, 7
    203e:	90 58       	subi	r25, 0x80	; 128
    2040:	44 0f       	add	r20, r20
    2042:	55 1f       	adc	r21, r21
    2044:	59 f0       	breq	.+22     	; 0x205c <__fp_splitA+0x10>
    2046:	5f 3f       	cpi	r21, 0xFF	; 255
    2048:	71 f0       	breq	.+28     	; 0x2066 <__fp_splitA+0x1a>
    204a:	47 95       	ror	r20

0000204c <__fp_splitA>:
    204c:	88 0f       	add	r24, r24
    204e:	97 fb       	bst	r25, 7
    2050:	99 1f       	adc	r25, r25
    2052:	61 f0       	breq	.+24     	; 0x206c <__fp_splitA+0x20>
    2054:	9f 3f       	cpi	r25, 0xFF	; 255
    2056:	79 f0       	breq	.+30     	; 0x2076 <__fp_splitA+0x2a>
    2058:	87 95       	ror	r24
    205a:	08 95       	ret
    205c:	12 16       	cp	r1, r18
    205e:	13 06       	cpc	r1, r19
    2060:	14 06       	cpc	r1, r20
    2062:	55 1f       	adc	r21, r21
    2064:	f2 cf       	rjmp	.-28     	; 0x204a <__fp_split3+0xe>
    2066:	46 95       	lsr	r20
    2068:	f1 df       	rcall	.-30     	; 0x204c <__fp_splitA>
    206a:	08 c0       	rjmp	.+16     	; 0x207c <__fp_splitA+0x30>
    206c:	16 16       	cp	r1, r22
    206e:	17 06       	cpc	r1, r23
    2070:	18 06       	cpc	r1, r24
    2072:	99 1f       	adc	r25, r25
    2074:	f1 cf       	rjmp	.-30     	; 0x2058 <__fp_splitA+0xc>
    2076:	86 95       	lsr	r24
    2078:	71 05       	cpc	r23, r1
    207a:	61 05       	cpc	r22, r1
    207c:	08 94       	sec
    207e:	08 95       	ret

00002080 <__fp_zero>:
    2080:	e8 94       	clt

00002082 <__fp_szero>:
    2082:	bb 27       	eor	r27, r27
    2084:	66 27       	eor	r22, r22
    2086:	77 27       	eor	r23, r23
    2088:	cb 01       	movw	r24, r22
    208a:	97 f9       	bld	r25, 7
    208c:	08 95       	ret

0000208e <__divmodhi4>:
    208e:	97 fb       	bst	r25, 7
    2090:	07 2e       	mov	r0, r23
    2092:	16 f4       	brtc	.+4      	; 0x2098 <__divmodhi4+0xa>
    2094:	00 94       	com	r0
    2096:	06 d0       	rcall	.+12     	; 0x20a4 <__divmodhi4_neg1>
    2098:	77 fd       	sbrc	r23, 7
    209a:	08 d0       	rcall	.+16     	; 0x20ac <__divmodhi4_neg2>
    209c:	49 d0       	rcall	.+146    	; 0x2130 <__udivmodhi4>
    209e:	07 fc       	sbrc	r0, 7
    20a0:	05 d0       	rcall	.+10     	; 0x20ac <__divmodhi4_neg2>
    20a2:	3e f4       	brtc	.+14     	; 0x20b2 <__divmodhi4_exit>

000020a4 <__divmodhi4_neg1>:
    20a4:	90 95       	com	r25
    20a6:	81 95       	neg	r24
    20a8:	9f 4f       	sbci	r25, 0xFF	; 255
    20aa:	08 95       	ret

000020ac <__divmodhi4_neg2>:
    20ac:	70 95       	com	r23
    20ae:	61 95       	neg	r22
    20b0:	7f 4f       	sbci	r23, 0xFF	; 255

000020b2 <__divmodhi4_exit>:
    20b2:	08 95       	ret

000020b4 <__udivmodsi4>:
    20b4:	a1 e2       	ldi	r26, 0x21	; 33
    20b6:	1a 2e       	mov	r1, r26
    20b8:	aa 1b       	sub	r26, r26
    20ba:	bb 1b       	sub	r27, r27
    20bc:	fd 01       	movw	r30, r26
    20be:	0d c0       	rjmp	.+26     	; 0x20da <__udivmodsi4_ep>

000020c0 <__udivmodsi4_loop>:
    20c0:	aa 1f       	adc	r26, r26
    20c2:	bb 1f       	adc	r27, r27
    20c4:	ee 1f       	adc	r30, r30
    20c6:	ff 1f       	adc	r31, r31
    20c8:	a2 17       	cp	r26, r18
    20ca:	b3 07       	cpc	r27, r19
    20cc:	e4 07       	cpc	r30, r20
    20ce:	f5 07       	cpc	r31, r21
    20d0:	20 f0       	brcs	.+8      	; 0x20da <__udivmodsi4_ep>
    20d2:	a2 1b       	sub	r26, r18
    20d4:	b3 0b       	sbc	r27, r19
    20d6:	e4 0b       	sbc	r30, r20
    20d8:	f5 0b       	sbc	r31, r21

000020da <__udivmodsi4_ep>:
    20da:	66 1f       	adc	r22, r22
    20dc:	77 1f       	adc	r23, r23
    20de:	88 1f       	adc	r24, r24
    20e0:	99 1f       	adc	r25, r25
    20e2:	1a 94       	dec	r1
    20e4:	69 f7       	brne	.-38     	; 0x20c0 <__udivmodsi4_loop>
    20e6:	60 95       	com	r22
    20e8:	70 95       	com	r23
    20ea:	80 95       	com	r24
    20ec:	90 95       	com	r25
    20ee:	9b 01       	movw	r18, r22
    20f0:	ac 01       	movw	r20, r24
    20f2:	bd 01       	movw	r22, r26
    20f4:	cf 01       	movw	r24, r30
    20f6:	08 95       	ret

000020f8 <__divmodsi4>:
    20f8:	05 2e       	mov	r0, r21
    20fa:	97 fb       	bst	r25, 7
    20fc:	16 f4       	brtc	.+4      	; 0x2102 <__divmodsi4+0xa>
    20fe:	00 94       	com	r0
    2100:	0f d0       	rcall	.+30     	; 0x2120 <__negsi2>
    2102:	57 fd       	sbrc	r21, 7
    2104:	05 d0       	rcall	.+10     	; 0x2110 <__divmodsi4_neg2>
    2106:	d6 df       	rcall	.-84     	; 0x20b4 <__udivmodsi4>
    2108:	07 fc       	sbrc	r0, 7
    210a:	02 d0       	rcall	.+4      	; 0x2110 <__divmodsi4_neg2>
    210c:	46 f4       	brtc	.+16     	; 0x211e <__divmodsi4_exit>
    210e:	08 c0       	rjmp	.+16     	; 0x2120 <__negsi2>

00002110 <__divmodsi4_neg2>:
    2110:	50 95       	com	r21
    2112:	40 95       	com	r20
    2114:	30 95       	com	r19
    2116:	21 95       	neg	r18
    2118:	3f 4f       	sbci	r19, 0xFF	; 255
    211a:	4f 4f       	sbci	r20, 0xFF	; 255
    211c:	5f 4f       	sbci	r21, 0xFF	; 255

0000211e <__divmodsi4_exit>:
    211e:	08 95       	ret

00002120 <__negsi2>:
    2120:	90 95       	com	r25
    2122:	80 95       	com	r24
    2124:	70 95       	com	r23
    2126:	61 95       	neg	r22
    2128:	7f 4f       	sbci	r23, 0xFF	; 255
    212a:	8f 4f       	sbci	r24, 0xFF	; 255
    212c:	9f 4f       	sbci	r25, 0xFF	; 255
    212e:	08 95       	ret

00002130 <__udivmodhi4>:
    2130:	aa 1b       	sub	r26, r26
    2132:	bb 1b       	sub	r27, r27
    2134:	51 e1       	ldi	r21, 0x11	; 17
    2136:	07 c0       	rjmp	.+14     	; 0x2146 <__udivmodhi4_ep>

00002138 <__udivmodhi4_loop>:
    2138:	aa 1f       	adc	r26, r26
    213a:	bb 1f       	adc	r27, r27
    213c:	a6 17       	cp	r26, r22
    213e:	b7 07       	cpc	r27, r23
    2140:	10 f0       	brcs	.+4      	; 0x2146 <__udivmodhi4_ep>
    2142:	a6 1b       	sub	r26, r22
    2144:	b7 0b       	sbc	r27, r23

00002146 <__udivmodhi4_ep>:
    2146:	88 1f       	adc	r24, r24
    2148:	99 1f       	adc	r25, r25
    214a:	5a 95       	dec	r21
    214c:	a9 f7       	brne	.-22     	; 0x2138 <__udivmodhi4_loop>
    214e:	80 95       	com	r24
    2150:	90 95       	com	r25
    2152:	bc 01       	movw	r22, r24
    2154:	cd 01       	movw	r24, r26
    2156:	08 95       	ret

00002158 <sprintf>:
    2158:	0f 93       	push	r16
    215a:	1f 93       	push	r17
    215c:	cf 93       	push	r28
    215e:	df 93       	push	r29
    2160:	cd b7       	in	r28, 0x3d	; 61
    2162:	de b7       	in	r29, 0x3e	; 62
    2164:	2e 97       	sbiw	r28, 0x0e	; 14
    2166:	0f b6       	in	r0, 0x3f	; 63
    2168:	f8 94       	cli
    216a:	de bf       	out	0x3e, r29	; 62
    216c:	0f be       	out	0x3f, r0	; 63
    216e:	cd bf       	out	0x3d, r28	; 61
    2170:	0d 89       	ldd	r16, Y+21	; 0x15
    2172:	1e 89       	ldd	r17, Y+22	; 0x16
    2174:	86 e0       	ldi	r24, 0x06	; 6
    2176:	8c 83       	std	Y+4, r24	; 0x04
    2178:	1a 83       	std	Y+2, r17	; 0x02
    217a:	09 83       	std	Y+1, r16	; 0x01
    217c:	8f ef       	ldi	r24, 0xFF	; 255
    217e:	9f e7       	ldi	r25, 0x7F	; 127
    2180:	9e 83       	std	Y+6, r25	; 0x06
    2182:	8d 83       	std	Y+5, r24	; 0x05
    2184:	ae 01       	movw	r20, r28
    2186:	47 5e       	subi	r20, 0xE7	; 231
    2188:	5f 4f       	sbci	r21, 0xFF	; 255
    218a:	6f 89       	ldd	r22, Y+23	; 0x17
    218c:	78 8d       	ldd	r23, Y+24	; 0x18
    218e:	ce 01       	movw	r24, r28
    2190:	01 96       	adiw	r24, 0x01	; 1
    2192:	10 d0       	rcall	.+32     	; 0x21b4 <vfprintf>
    2194:	ef 81       	ldd	r30, Y+7	; 0x07
    2196:	f8 85       	ldd	r31, Y+8	; 0x08
    2198:	e0 0f       	add	r30, r16
    219a:	f1 1f       	adc	r31, r17
    219c:	10 82       	st	Z, r1
    219e:	2e 96       	adiw	r28, 0x0e	; 14
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	de bf       	out	0x3e, r29	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	cd bf       	out	0x3d, r28	; 61
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	1f 91       	pop	r17
    21b0:	0f 91       	pop	r16
    21b2:	08 95       	ret

000021b4 <vfprintf>:
    21b4:	2f 92       	push	r2
    21b6:	3f 92       	push	r3
    21b8:	4f 92       	push	r4
    21ba:	5f 92       	push	r5
    21bc:	6f 92       	push	r6
    21be:	7f 92       	push	r7
    21c0:	8f 92       	push	r8
    21c2:	9f 92       	push	r9
    21c4:	af 92       	push	r10
    21c6:	bf 92       	push	r11
    21c8:	cf 92       	push	r12
    21ca:	df 92       	push	r13
    21cc:	ef 92       	push	r14
    21ce:	ff 92       	push	r15
    21d0:	0f 93       	push	r16
    21d2:	1f 93       	push	r17
    21d4:	cf 93       	push	r28
    21d6:	df 93       	push	r29
    21d8:	cd b7       	in	r28, 0x3d	; 61
    21da:	de b7       	in	r29, 0x3e	; 62
    21dc:	2b 97       	sbiw	r28, 0x0b	; 11
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	f8 94       	cli
    21e2:	de bf       	out	0x3e, r29	; 62
    21e4:	0f be       	out	0x3f, r0	; 63
    21e6:	cd bf       	out	0x3d, r28	; 61
    21e8:	6c 01       	movw	r12, r24
    21ea:	7b 01       	movw	r14, r22
    21ec:	8a 01       	movw	r16, r20
    21ee:	fc 01       	movw	r30, r24
    21f0:	17 82       	std	Z+7, r1	; 0x07
    21f2:	16 82       	std	Z+6, r1	; 0x06
    21f4:	83 81       	ldd	r24, Z+3	; 0x03
    21f6:	81 ff       	sbrs	r24, 1
    21f8:	bf c1       	rjmp	.+894    	; 0x2578 <vfprintf+0x3c4>
    21fa:	ce 01       	movw	r24, r28
    21fc:	01 96       	adiw	r24, 0x01	; 1
    21fe:	3c 01       	movw	r6, r24
    2200:	f6 01       	movw	r30, r12
    2202:	93 81       	ldd	r25, Z+3	; 0x03
    2204:	f7 01       	movw	r30, r14
    2206:	93 fd       	sbrc	r25, 3
    2208:	85 91       	lpm	r24, Z+
    220a:	93 ff       	sbrs	r25, 3
    220c:	81 91       	ld	r24, Z+
    220e:	7f 01       	movw	r14, r30
    2210:	88 23       	and	r24, r24
    2212:	09 f4       	brne	.+2      	; 0x2216 <vfprintf+0x62>
    2214:	ad c1       	rjmp	.+858    	; 0x2570 <vfprintf+0x3bc>
    2216:	85 32       	cpi	r24, 0x25	; 37
    2218:	39 f4       	brne	.+14     	; 0x2228 <vfprintf+0x74>
    221a:	93 fd       	sbrc	r25, 3
    221c:	85 91       	lpm	r24, Z+
    221e:	93 ff       	sbrs	r25, 3
    2220:	81 91       	ld	r24, Z+
    2222:	7f 01       	movw	r14, r30
    2224:	85 32       	cpi	r24, 0x25	; 37
    2226:	21 f4       	brne	.+8      	; 0x2230 <vfprintf+0x7c>
    2228:	b6 01       	movw	r22, r12
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	d6 d1       	rcall	.+940    	; 0x25da <fputc>
    222e:	e8 cf       	rjmp	.-48     	; 0x2200 <vfprintf+0x4c>
    2230:	91 2c       	mov	r9, r1
    2232:	21 2c       	mov	r2, r1
    2234:	31 2c       	mov	r3, r1
    2236:	ff e1       	ldi	r31, 0x1F	; 31
    2238:	f3 15       	cp	r31, r3
    223a:	d8 f0       	brcs	.+54     	; 0x2272 <vfprintf+0xbe>
    223c:	8b 32       	cpi	r24, 0x2B	; 43
    223e:	79 f0       	breq	.+30     	; 0x225e <vfprintf+0xaa>
    2240:	38 f4       	brcc	.+14     	; 0x2250 <vfprintf+0x9c>
    2242:	80 32       	cpi	r24, 0x20	; 32
    2244:	79 f0       	breq	.+30     	; 0x2264 <vfprintf+0xb0>
    2246:	83 32       	cpi	r24, 0x23	; 35
    2248:	a1 f4       	brne	.+40     	; 0x2272 <vfprintf+0xbe>
    224a:	23 2d       	mov	r18, r3
    224c:	20 61       	ori	r18, 0x10	; 16
    224e:	1d c0       	rjmp	.+58     	; 0x228a <vfprintf+0xd6>
    2250:	8d 32       	cpi	r24, 0x2D	; 45
    2252:	61 f0       	breq	.+24     	; 0x226c <vfprintf+0xb8>
    2254:	80 33       	cpi	r24, 0x30	; 48
    2256:	69 f4       	brne	.+26     	; 0x2272 <vfprintf+0xbe>
    2258:	23 2d       	mov	r18, r3
    225a:	21 60       	ori	r18, 0x01	; 1
    225c:	16 c0       	rjmp	.+44     	; 0x228a <vfprintf+0xd6>
    225e:	83 2d       	mov	r24, r3
    2260:	82 60       	ori	r24, 0x02	; 2
    2262:	38 2e       	mov	r3, r24
    2264:	e3 2d       	mov	r30, r3
    2266:	e4 60       	ori	r30, 0x04	; 4
    2268:	3e 2e       	mov	r3, r30
    226a:	2a c0       	rjmp	.+84     	; 0x22c0 <vfprintf+0x10c>
    226c:	f3 2d       	mov	r31, r3
    226e:	f8 60       	ori	r31, 0x08	; 8
    2270:	1d c0       	rjmp	.+58     	; 0x22ac <vfprintf+0xf8>
    2272:	37 fc       	sbrc	r3, 7
    2274:	2d c0       	rjmp	.+90     	; 0x22d0 <vfprintf+0x11c>
    2276:	20 ed       	ldi	r18, 0xD0	; 208
    2278:	28 0f       	add	r18, r24
    227a:	2a 30       	cpi	r18, 0x0A	; 10
    227c:	40 f0       	brcs	.+16     	; 0x228e <vfprintf+0xda>
    227e:	8e 32       	cpi	r24, 0x2E	; 46
    2280:	b9 f4       	brne	.+46     	; 0x22b0 <vfprintf+0xfc>
    2282:	36 fc       	sbrc	r3, 6
    2284:	75 c1       	rjmp	.+746    	; 0x2570 <vfprintf+0x3bc>
    2286:	23 2d       	mov	r18, r3
    2288:	20 64       	ori	r18, 0x40	; 64
    228a:	32 2e       	mov	r3, r18
    228c:	19 c0       	rjmp	.+50     	; 0x22c0 <vfprintf+0x10c>
    228e:	36 fe       	sbrs	r3, 6
    2290:	06 c0       	rjmp	.+12     	; 0x229e <vfprintf+0xea>
    2292:	8a e0       	ldi	r24, 0x0A	; 10
    2294:	98 9e       	mul	r9, r24
    2296:	20 0d       	add	r18, r0
    2298:	11 24       	eor	r1, r1
    229a:	92 2e       	mov	r9, r18
    229c:	11 c0       	rjmp	.+34     	; 0x22c0 <vfprintf+0x10c>
    229e:	ea e0       	ldi	r30, 0x0A	; 10
    22a0:	2e 9e       	mul	r2, r30
    22a2:	20 0d       	add	r18, r0
    22a4:	11 24       	eor	r1, r1
    22a6:	22 2e       	mov	r2, r18
    22a8:	f3 2d       	mov	r31, r3
    22aa:	f0 62       	ori	r31, 0x20	; 32
    22ac:	3f 2e       	mov	r3, r31
    22ae:	08 c0       	rjmp	.+16     	; 0x22c0 <vfprintf+0x10c>
    22b0:	8c 36       	cpi	r24, 0x6C	; 108
    22b2:	21 f4       	brne	.+8      	; 0x22bc <vfprintf+0x108>
    22b4:	83 2d       	mov	r24, r3
    22b6:	80 68       	ori	r24, 0x80	; 128
    22b8:	38 2e       	mov	r3, r24
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <vfprintf+0x10c>
    22bc:	88 36       	cpi	r24, 0x68	; 104
    22be:	41 f4       	brne	.+16     	; 0x22d0 <vfprintf+0x11c>
    22c0:	f7 01       	movw	r30, r14
    22c2:	93 fd       	sbrc	r25, 3
    22c4:	85 91       	lpm	r24, Z+
    22c6:	93 ff       	sbrs	r25, 3
    22c8:	81 91       	ld	r24, Z+
    22ca:	7f 01       	movw	r14, r30
    22cc:	81 11       	cpse	r24, r1
    22ce:	b3 cf       	rjmp	.-154    	; 0x2236 <vfprintf+0x82>
    22d0:	98 2f       	mov	r25, r24
    22d2:	9f 7d       	andi	r25, 0xDF	; 223
    22d4:	95 54       	subi	r25, 0x45	; 69
    22d6:	93 30       	cpi	r25, 0x03	; 3
    22d8:	28 f4       	brcc	.+10     	; 0x22e4 <vfprintf+0x130>
    22da:	0c 5f       	subi	r16, 0xFC	; 252
    22dc:	1f 4f       	sbci	r17, 0xFF	; 255
    22de:	9f e3       	ldi	r25, 0x3F	; 63
    22e0:	99 83       	std	Y+1, r25	; 0x01
    22e2:	0d c0       	rjmp	.+26     	; 0x22fe <vfprintf+0x14a>
    22e4:	83 36       	cpi	r24, 0x63	; 99
    22e6:	31 f0       	breq	.+12     	; 0x22f4 <vfprintf+0x140>
    22e8:	83 37       	cpi	r24, 0x73	; 115
    22ea:	71 f0       	breq	.+28     	; 0x2308 <vfprintf+0x154>
    22ec:	83 35       	cpi	r24, 0x53	; 83
    22ee:	09 f0       	breq	.+2      	; 0x22f2 <vfprintf+0x13e>
    22f0:	55 c0       	rjmp	.+170    	; 0x239c <vfprintf+0x1e8>
    22f2:	20 c0       	rjmp	.+64     	; 0x2334 <vfprintf+0x180>
    22f4:	f8 01       	movw	r30, r16
    22f6:	80 81       	ld	r24, Z
    22f8:	89 83       	std	Y+1, r24	; 0x01
    22fa:	0e 5f       	subi	r16, 0xFE	; 254
    22fc:	1f 4f       	sbci	r17, 0xFF	; 255
    22fe:	88 24       	eor	r8, r8
    2300:	83 94       	inc	r8
    2302:	91 2c       	mov	r9, r1
    2304:	53 01       	movw	r10, r6
    2306:	12 c0       	rjmp	.+36     	; 0x232c <vfprintf+0x178>
    2308:	28 01       	movw	r4, r16
    230a:	f2 e0       	ldi	r31, 0x02	; 2
    230c:	4f 0e       	add	r4, r31
    230e:	51 1c       	adc	r5, r1
    2310:	f8 01       	movw	r30, r16
    2312:	a0 80       	ld	r10, Z
    2314:	b1 80       	ldd	r11, Z+1	; 0x01
    2316:	36 fe       	sbrs	r3, 6
    2318:	03 c0       	rjmp	.+6      	; 0x2320 <vfprintf+0x16c>
    231a:	69 2d       	mov	r22, r9
    231c:	70 e0       	ldi	r23, 0x00	; 0
    231e:	02 c0       	rjmp	.+4      	; 0x2324 <vfprintf+0x170>
    2320:	6f ef       	ldi	r22, 0xFF	; 255
    2322:	7f ef       	ldi	r23, 0xFF	; 255
    2324:	c5 01       	movw	r24, r10
    2326:	4e d1       	rcall	.+668    	; 0x25c4 <strnlen>
    2328:	4c 01       	movw	r8, r24
    232a:	82 01       	movw	r16, r4
    232c:	f3 2d       	mov	r31, r3
    232e:	ff 77       	andi	r31, 0x7F	; 127
    2330:	3f 2e       	mov	r3, r31
    2332:	15 c0       	rjmp	.+42     	; 0x235e <vfprintf+0x1aa>
    2334:	28 01       	movw	r4, r16
    2336:	22 e0       	ldi	r18, 0x02	; 2
    2338:	42 0e       	add	r4, r18
    233a:	51 1c       	adc	r5, r1
    233c:	f8 01       	movw	r30, r16
    233e:	a0 80       	ld	r10, Z
    2340:	b1 80       	ldd	r11, Z+1	; 0x01
    2342:	36 fe       	sbrs	r3, 6
    2344:	03 c0       	rjmp	.+6      	; 0x234c <vfprintf+0x198>
    2346:	69 2d       	mov	r22, r9
    2348:	70 e0       	ldi	r23, 0x00	; 0
    234a:	02 c0       	rjmp	.+4      	; 0x2350 <vfprintf+0x19c>
    234c:	6f ef       	ldi	r22, 0xFF	; 255
    234e:	7f ef       	ldi	r23, 0xFF	; 255
    2350:	c5 01       	movw	r24, r10
    2352:	2d d1       	rcall	.+602    	; 0x25ae <strnlen_P>
    2354:	4c 01       	movw	r8, r24
    2356:	f3 2d       	mov	r31, r3
    2358:	f0 68       	ori	r31, 0x80	; 128
    235a:	3f 2e       	mov	r3, r31
    235c:	82 01       	movw	r16, r4
    235e:	33 fc       	sbrc	r3, 3
    2360:	19 c0       	rjmp	.+50     	; 0x2394 <vfprintf+0x1e0>
    2362:	82 2d       	mov	r24, r2
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	88 16       	cp	r8, r24
    2368:	99 06       	cpc	r9, r25
    236a:	a0 f4       	brcc	.+40     	; 0x2394 <vfprintf+0x1e0>
    236c:	b6 01       	movw	r22, r12
    236e:	80 e2       	ldi	r24, 0x20	; 32
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	33 d1       	rcall	.+614    	; 0x25da <fputc>
    2374:	2a 94       	dec	r2
    2376:	f5 cf       	rjmp	.-22     	; 0x2362 <vfprintf+0x1ae>
    2378:	f5 01       	movw	r30, r10
    237a:	37 fc       	sbrc	r3, 7
    237c:	85 91       	lpm	r24, Z+
    237e:	37 fe       	sbrs	r3, 7
    2380:	81 91       	ld	r24, Z+
    2382:	5f 01       	movw	r10, r30
    2384:	b6 01       	movw	r22, r12
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	28 d1       	rcall	.+592    	; 0x25da <fputc>
    238a:	21 10       	cpse	r2, r1
    238c:	2a 94       	dec	r2
    238e:	21 e0       	ldi	r18, 0x01	; 1
    2390:	82 1a       	sub	r8, r18
    2392:	91 08       	sbc	r9, r1
    2394:	81 14       	cp	r8, r1
    2396:	91 04       	cpc	r9, r1
    2398:	79 f7       	brne	.-34     	; 0x2378 <vfprintf+0x1c4>
    239a:	e1 c0       	rjmp	.+450    	; 0x255e <vfprintf+0x3aa>
    239c:	84 36       	cpi	r24, 0x64	; 100
    239e:	11 f0       	breq	.+4      	; 0x23a4 <vfprintf+0x1f0>
    23a0:	89 36       	cpi	r24, 0x69	; 105
    23a2:	39 f5       	brne	.+78     	; 0x23f2 <vfprintf+0x23e>
    23a4:	f8 01       	movw	r30, r16
    23a6:	37 fe       	sbrs	r3, 7
    23a8:	07 c0       	rjmp	.+14     	; 0x23b8 <vfprintf+0x204>
    23aa:	60 81       	ld	r22, Z
    23ac:	71 81       	ldd	r23, Z+1	; 0x01
    23ae:	82 81       	ldd	r24, Z+2	; 0x02
    23b0:	93 81       	ldd	r25, Z+3	; 0x03
    23b2:	0c 5f       	subi	r16, 0xFC	; 252
    23b4:	1f 4f       	sbci	r17, 0xFF	; 255
    23b6:	08 c0       	rjmp	.+16     	; 0x23c8 <vfprintf+0x214>
    23b8:	60 81       	ld	r22, Z
    23ba:	71 81       	ldd	r23, Z+1	; 0x01
    23bc:	07 2e       	mov	r0, r23
    23be:	00 0c       	add	r0, r0
    23c0:	88 0b       	sbc	r24, r24
    23c2:	99 0b       	sbc	r25, r25
    23c4:	0e 5f       	subi	r16, 0xFE	; 254
    23c6:	1f 4f       	sbci	r17, 0xFF	; 255
    23c8:	f3 2d       	mov	r31, r3
    23ca:	ff 76       	andi	r31, 0x6F	; 111
    23cc:	3f 2e       	mov	r3, r31
    23ce:	97 ff       	sbrs	r25, 7
    23d0:	09 c0       	rjmp	.+18     	; 0x23e4 <vfprintf+0x230>
    23d2:	90 95       	com	r25
    23d4:	80 95       	com	r24
    23d6:	70 95       	com	r23
    23d8:	61 95       	neg	r22
    23da:	7f 4f       	sbci	r23, 0xFF	; 255
    23dc:	8f 4f       	sbci	r24, 0xFF	; 255
    23de:	9f 4f       	sbci	r25, 0xFF	; 255
    23e0:	f0 68       	ori	r31, 0x80	; 128
    23e2:	3f 2e       	mov	r3, r31
    23e4:	2a e0       	ldi	r18, 0x0A	; 10
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	a3 01       	movw	r20, r6
    23ea:	33 d1       	rcall	.+614    	; 0x2652 <__ultoa_invert>
    23ec:	88 2e       	mov	r8, r24
    23ee:	86 18       	sub	r8, r6
    23f0:	44 c0       	rjmp	.+136    	; 0x247a <vfprintf+0x2c6>
    23f2:	85 37       	cpi	r24, 0x75	; 117
    23f4:	31 f4       	brne	.+12     	; 0x2402 <vfprintf+0x24e>
    23f6:	23 2d       	mov	r18, r3
    23f8:	2f 7e       	andi	r18, 0xEF	; 239
    23fa:	b2 2e       	mov	r11, r18
    23fc:	2a e0       	ldi	r18, 0x0A	; 10
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	25 c0       	rjmp	.+74     	; 0x244c <vfprintf+0x298>
    2402:	93 2d       	mov	r25, r3
    2404:	99 7f       	andi	r25, 0xF9	; 249
    2406:	b9 2e       	mov	r11, r25
    2408:	8f 36       	cpi	r24, 0x6F	; 111
    240a:	c1 f0       	breq	.+48     	; 0x243c <vfprintf+0x288>
    240c:	18 f4       	brcc	.+6      	; 0x2414 <vfprintf+0x260>
    240e:	88 35       	cpi	r24, 0x58	; 88
    2410:	79 f0       	breq	.+30     	; 0x2430 <vfprintf+0x27c>
    2412:	ae c0       	rjmp	.+348    	; 0x2570 <vfprintf+0x3bc>
    2414:	80 37       	cpi	r24, 0x70	; 112
    2416:	19 f0       	breq	.+6      	; 0x241e <vfprintf+0x26a>
    2418:	88 37       	cpi	r24, 0x78	; 120
    241a:	21 f0       	breq	.+8      	; 0x2424 <vfprintf+0x270>
    241c:	a9 c0       	rjmp	.+338    	; 0x2570 <vfprintf+0x3bc>
    241e:	e9 2f       	mov	r30, r25
    2420:	e0 61       	ori	r30, 0x10	; 16
    2422:	be 2e       	mov	r11, r30
    2424:	b4 fe       	sbrs	r11, 4
    2426:	0d c0       	rjmp	.+26     	; 0x2442 <vfprintf+0x28e>
    2428:	fb 2d       	mov	r31, r11
    242a:	f4 60       	ori	r31, 0x04	; 4
    242c:	bf 2e       	mov	r11, r31
    242e:	09 c0       	rjmp	.+18     	; 0x2442 <vfprintf+0x28e>
    2430:	34 fe       	sbrs	r3, 4
    2432:	0a c0       	rjmp	.+20     	; 0x2448 <vfprintf+0x294>
    2434:	29 2f       	mov	r18, r25
    2436:	26 60       	ori	r18, 0x06	; 6
    2438:	b2 2e       	mov	r11, r18
    243a:	06 c0       	rjmp	.+12     	; 0x2448 <vfprintf+0x294>
    243c:	28 e0       	ldi	r18, 0x08	; 8
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	05 c0       	rjmp	.+10     	; 0x244c <vfprintf+0x298>
    2442:	20 e1       	ldi	r18, 0x10	; 16
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	02 c0       	rjmp	.+4      	; 0x244c <vfprintf+0x298>
    2448:	20 e1       	ldi	r18, 0x10	; 16
    244a:	32 e0       	ldi	r19, 0x02	; 2
    244c:	f8 01       	movw	r30, r16
    244e:	b7 fe       	sbrs	r11, 7
    2450:	07 c0       	rjmp	.+14     	; 0x2460 <vfprintf+0x2ac>
    2452:	60 81       	ld	r22, Z
    2454:	71 81       	ldd	r23, Z+1	; 0x01
    2456:	82 81       	ldd	r24, Z+2	; 0x02
    2458:	93 81       	ldd	r25, Z+3	; 0x03
    245a:	0c 5f       	subi	r16, 0xFC	; 252
    245c:	1f 4f       	sbci	r17, 0xFF	; 255
    245e:	06 c0       	rjmp	.+12     	; 0x246c <vfprintf+0x2b8>
    2460:	60 81       	ld	r22, Z
    2462:	71 81       	ldd	r23, Z+1	; 0x01
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	0e 5f       	subi	r16, 0xFE	; 254
    246a:	1f 4f       	sbci	r17, 0xFF	; 255
    246c:	a3 01       	movw	r20, r6
    246e:	f1 d0       	rcall	.+482    	; 0x2652 <__ultoa_invert>
    2470:	88 2e       	mov	r8, r24
    2472:	86 18       	sub	r8, r6
    2474:	fb 2d       	mov	r31, r11
    2476:	ff 77       	andi	r31, 0x7F	; 127
    2478:	3f 2e       	mov	r3, r31
    247a:	36 fe       	sbrs	r3, 6
    247c:	0d c0       	rjmp	.+26     	; 0x2498 <vfprintf+0x2e4>
    247e:	23 2d       	mov	r18, r3
    2480:	2e 7f       	andi	r18, 0xFE	; 254
    2482:	a2 2e       	mov	r10, r18
    2484:	89 14       	cp	r8, r9
    2486:	58 f4       	brcc	.+22     	; 0x249e <vfprintf+0x2ea>
    2488:	34 fe       	sbrs	r3, 4
    248a:	0b c0       	rjmp	.+22     	; 0x24a2 <vfprintf+0x2ee>
    248c:	32 fc       	sbrc	r3, 2
    248e:	09 c0       	rjmp	.+18     	; 0x24a2 <vfprintf+0x2ee>
    2490:	83 2d       	mov	r24, r3
    2492:	8e 7e       	andi	r24, 0xEE	; 238
    2494:	a8 2e       	mov	r10, r24
    2496:	05 c0       	rjmp	.+10     	; 0x24a2 <vfprintf+0x2ee>
    2498:	b8 2c       	mov	r11, r8
    249a:	a3 2c       	mov	r10, r3
    249c:	03 c0       	rjmp	.+6      	; 0x24a4 <vfprintf+0x2f0>
    249e:	b8 2c       	mov	r11, r8
    24a0:	01 c0       	rjmp	.+2      	; 0x24a4 <vfprintf+0x2f0>
    24a2:	b9 2c       	mov	r11, r9
    24a4:	a4 fe       	sbrs	r10, 4
    24a6:	0f c0       	rjmp	.+30     	; 0x24c6 <vfprintf+0x312>
    24a8:	fe 01       	movw	r30, r28
    24aa:	e8 0d       	add	r30, r8
    24ac:	f1 1d       	adc	r31, r1
    24ae:	80 81       	ld	r24, Z
    24b0:	80 33       	cpi	r24, 0x30	; 48
    24b2:	21 f4       	brne	.+8      	; 0x24bc <vfprintf+0x308>
    24b4:	9a 2d       	mov	r25, r10
    24b6:	99 7e       	andi	r25, 0xE9	; 233
    24b8:	a9 2e       	mov	r10, r25
    24ba:	09 c0       	rjmp	.+18     	; 0x24ce <vfprintf+0x31a>
    24bc:	a2 fe       	sbrs	r10, 2
    24be:	06 c0       	rjmp	.+12     	; 0x24cc <vfprintf+0x318>
    24c0:	b3 94       	inc	r11
    24c2:	b3 94       	inc	r11
    24c4:	04 c0       	rjmp	.+8      	; 0x24ce <vfprintf+0x31a>
    24c6:	8a 2d       	mov	r24, r10
    24c8:	86 78       	andi	r24, 0x86	; 134
    24ca:	09 f0       	breq	.+2      	; 0x24ce <vfprintf+0x31a>
    24cc:	b3 94       	inc	r11
    24ce:	a3 fc       	sbrc	r10, 3
    24d0:	10 c0       	rjmp	.+32     	; 0x24f2 <vfprintf+0x33e>
    24d2:	a0 fe       	sbrs	r10, 0
    24d4:	06 c0       	rjmp	.+12     	; 0x24e2 <vfprintf+0x32e>
    24d6:	b2 14       	cp	r11, r2
    24d8:	80 f4       	brcc	.+32     	; 0x24fa <vfprintf+0x346>
    24da:	28 0c       	add	r2, r8
    24dc:	92 2c       	mov	r9, r2
    24de:	9b 18       	sub	r9, r11
    24e0:	0d c0       	rjmp	.+26     	; 0x24fc <vfprintf+0x348>
    24e2:	b2 14       	cp	r11, r2
    24e4:	58 f4       	brcc	.+22     	; 0x24fc <vfprintf+0x348>
    24e6:	b6 01       	movw	r22, r12
    24e8:	80 e2       	ldi	r24, 0x20	; 32
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	76 d0       	rcall	.+236    	; 0x25da <fputc>
    24ee:	b3 94       	inc	r11
    24f0:	f8 cf       	rjmp	.-16     	; 0x24e2 <vfprintf+0x32e>
    24f2:	b2 14       	cp	r11, r2
    24f4:	18 f4       	brcc	.+6      	; 0x24fc <vfprintf+0x348>
    24f6:	2b 18       	sub	r2, r11
    24f8:	02 c0       	rjmp	.+4      	; 0x24fe <vfprintf+0x34a>
    24fa:	98 2c       	mov	r9, r8
    24fc:	21 2c       	mov	r2, r1
    24fe:	a4 fe       	sbrs	r10, 4
    2500:	0f c0       	rjmp	.+30     	; 0x2520 <vfprintf+0x36c>
    2502:	b6 01       	movw	r22, r12
    2504:	80 e3       	ldi	r24, 0x30	; 48
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	68 d0       	rcall	.+208    	; 0x25da <fputc>
    250a:	a2 fe       	sbrs	r10, 2
    250c:	16 c0       	rjmp	.+44     	; 0x253a <vfprintf+0x386>
    250e:	a1 fc       	sbrc	r10, 1
    2510:	03 c0       	rjmp	.+6      	; 0x2518 <vfprintf+0x364>
    2512:	88 e7       	ldi	r24, 0x78	; 120
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	02 c0       	rjmp	.+4      	; 0x251c <vfprintf+0x368>
    2518:	88 e5       	ldi	r24, 0x58	; 88
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	b6 01       	movw	r22, r12
    251e:	0c c0       	rjmp	.+24     	; 0x2538 <vfprintf+0x384>
    2520:	8a 2d       	mov	r24, r10
    2522:	86 78       	andi	r24, 0x86	; 134
    2524:	51 f0       	breq	.+20     	; 0x253a <vfprintf+0x386>
    2526:	a1 fe       	sbrs	r10, 1
    2528:	02 c0       	rjmp	.+4      	; 0x252e <vfprintf+0x37a>
    252a:	8b e2       	ldi	r24, 0x2B	; 43
    252c:	01 c0       	rjmp	.+2      	; 0x2530 <vfprintf+0x37c>
    252e:	80 e2       	ldi	r24, 0x20	; 32
    2530:	a7 fc       	sbrc	r10, 7
    2532:	8d e2       	ldi	r24, 0x2D	; 45
    2534:	b6 01       	movw	r22, r12
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	50 d0       	rcall	.+160    	; 0x25da <fputc>
    253a:	89 14       	cp	r8, r9
    253c:	30 f4       	brcc	.+12     	; 0x254a <vfprintf+0x396>
    253e:	b6 01       	movw	r22, r12
    2540:	80 e3       	ldi	r24, 0x30	; 48
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	4a d0       	rcall	.+148    	; 0x25da <fputc>
    2546:	9a 94       	dec	r9
    2548:	f8 cf       	rjmp	.-16     	; 0x253a <vfprintf+0x386>
    254a:	8a 94       	dec	r8
    254c:	f3 01       	movw	r30, r6
    254e:	e8 0d       	add	r30, r8
    2550:	f1 1d       	adc	r31, r1
    2552:	80 81       	ld	r24, Z
    2554:	b6 01       	movw	r22, r12
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	40 d0       	rcall	.+128    	; 0x25da <fputc>
    255a:	81 10       	cpse	r8, r1
    255c:	f6 cf       	rjmp	.-20     	; 0x254a <vfprintf+0x396>
    255e:	22 20       	and	r2, r2
    2560:	09 f4       	brne	.+2      	; 0x2564 <vfprintf+0x3b0>
    2562:	4e ce       	rjmp	.-868    	; 0x2200 <vfprintf+0x4c>
    2564:	b6 01       	movw	r22, r12
    2566:	80 e2       	ldi	r24, 0x20	; 32
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	37 d0       	rcall	.+110    	; 0x25da <fputc>
    256c:	2a 94       	dec	r2
    256e:	f7 cf       	rjmp	.-18     	; 0x255e <vfprintf+0x3aa>
    2570:	f6 01       	movw	r30, r12
    2572:	86 81       	ldd	r24, Z+6	; 0x06
    2574:	97 81       	ldd	r25, Z+7	; 0x07
    2576:	02 c0       	rjmp	.+4      	; 0x257c <vfprintf+0x3c8>
    2578:	8f ef       	ldi	r24, 0xFF	; 255
    257a:	9f ef       	ldi	r25, 0xFF	; 255
    257c:	2b 96       	adiw	r28, 0x0b	; 11
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	f8 94       	cli
    2582:	de bf       	out	0x3e, r29	; 62
    2584:	0f be       	out	0x3f, r0	; 63
    2586:	cd bf       	out	0x3d, r28	; 61
    2588:	df 91       	pop	r29
    258a:	cf 91       	pop	r28
    258c:	1f 91       	pop	r17
    258e:	0f 91       	pop	r16
    2590:	ff 90       	pop	r15
    2592:	ef 90       	pop	r14
    2594:	df 90       	pop	r13
    2596:	cf 90       	pop	r12
    2598:	bf 90       	pop	r11
    259a:	af 90       	pop	r10
    259c:	9f 90       	pop	r9
    259e:	8f 90       	pop	r8
    25a0:	7f 90       	pop	r7
    25a2:	6f 90       	pop	r6
    25a4:	5f 90       	pop	r5
    25a6:	4f 90       	pop	r4
    25a8:	3f 90       	pop	r3
    25aa:	2f 90       	pop	r2
    25ac:	08 95       	ret

000025ae <strnlen_P>:
    25ae:	fc 01       	movw	r30, r24
    25b0:	05 90       	lpm	r0, Z+
    25b2:	61 50       	subi	r22, 0x01	; 1
    25b4:	70 40       	sbci	r23, 0x00	; 0
    25b6:	01 10       	cpse	r0, r1
    25b8:	d8 f7       	brcc	.-10     	; 0x25b0 <strnlen_P+0x2>
    25ba:	80 95       	com	r24
    25bc:	90 95       	com	r25
    25be:	8e 0f       	add	r24, r30
    25c0:	9f 1f       	adc	r25, r31
    25c2:	08 95       	ret

000025c4 <strnlen>:
    25c4:	fc 01       	movw	r30, r24
    25c6:	61 50       	subi	r22, 0x01	; 1
    25c8:	70 40       	sbci	r23, 0x00	; 0
    25ca:	01 90       	ld	r0, Z+
    25cc:	01 10       	cpse	r0, r1
    25ce:	d8 f7       	brcc	.-10     	; 0x25c6 <strnlen+0x2>
    25d0:	80 95       	com	r24
    25d2:	90 95       	com	r25
    25d4:	8e 0f       	add	r24, r30
    25d6:	9f 1f       	adc	r25, r31
    25d8:	08 95       	ret

000025da <fputc>:
    25da:	0f 93       	push	r16
    25dc:	1f 93       	push	r17
    25de:	cf 93       	push	r28
    25e0:	df 93       	push	r29
    25e2:	fb 01       	movw	r30, r22
    25e4:	23 81       	ldd	r18, Z+3	; 0x03
    25e6:	21 fd       	sbrc	r18, 1
    25e8:	03 c0       	rjmp	.+6      	; 0x25f0 <fputc+0x16>
    25ea:	8f ef       	ldi	r24, 0xFF	; 255
    25ec:	9f ef       	ldi	r25, 0xFF	; 255
    25ee:	2c c0       	rjmp	.+88     	; 0x2648 <fputc+0x6e>
    25f0:	22 ff       	sbrs	r18, 2
    25f2:	16 c0       	rjmp	.+44     	; 0x2620 <fputc+0x46>
    25f4:	46 81       	ldd	r20, Z+6	; 0x06
    25f6:	57 81       	ldd	r21, Z+7	; 0x07
    25f8:	24 81       	ldd	r18, Z+4	; 0x04
    25fa:	35 81       	ldd	r19, Z+5	; 0x05
    25fc:	42 17       	cp	r20, r18
    25fe:	53 07       	cpc	r21, r19
    2600:	44 f4       	brge	.+16     	; 0x2612 <fputc+0x38>
    2602:	a0 81       	ld	r26, Z
    2604:	b1 81       	ldd	r27, Z+1	; 0x01
    2606:	9d 01       	movw	r18, r26
    2608:	2f 5f       	subi	r18, 0xFF	; 255
    260a:	3f 4f       	sbci	r19, 0xFF	; 255
    260c:	31 83       	std	Z+1, r19	; 0x01
    260e:	20 83       	st	Z, r18
    2610:	8c 93       	st	X, r24
    2612:	26 81       	ldd	r18, Z+6	; 0x06
    2614:	37 81       	ldd	r19, Z+7	; 0x07
    2616:	2f 5f       	subi	r18, 0xFF	; 255
    2618:	3f 4f       	sbci	r19, 0xFF	; 255
    261a:	37 83       	std	Z+7, r19	; 0x07
    261c:	26 83       	std	Z+6, r18	; 0x06
    261e:	14 c0       	rjmp	.+40     	; 0x2648 <fputc+0x6e>
    2620:	8b 01       	movw	r16, r22
    2622:	ec 01       	movw	r28, r24
    2624:	fb 01       	movw	r30, r22
    2626:	00 84       	ldd	r0, Z+8	; 0x08
    2628:	f1 85       	ldd	r31, Z+9	; 0x09
    262a:	e0 2d       	mov	r30, r0
    262c:	09 95       	icall
    262e:	89 2b       	or	r24, r25
    2630:	e1 f6       	brne	.-72     	; 0x25ea <fputc+0x10>
    2632:	d8 01       	movw	r26, r16
    2634:	16 96       	adiw	r26, 0x06	; 6
    2636:	8d 91       	ld	r24, X+
    2638:	9c 91       	ld	r25, X
    263a:	17 97       	sbiw	r26, 0x07	; 7
    263c:	01 96       	adiw	r24, 0x01	; 1
    263e:	17 96       	adiw	r26, 0x07	; 7
    2640:	9c 93       	st	X, r25
    2642:	8e 93       	st	-X, r24
    2644:	16 97       	sbiw	r26, 0x06	; 6
    2646:	ce 01       	movw	r24, r28
    2648:	df 91       	pop	r29
    264a:	cf 91       	pop	r28
    264c:	1f 91       	pop	r17
    264e:	0f 91       	pop	r16
    2650:	08 95       	ret

00002652 <__ultoa_invert>:
    2652:	fa 01       	movw	r30, r20
    2654:	aa 27       	eor	r26, r26
    2656:	28 30       	cpi	r18, 0x08	; 8
    2658:	51 f1       	breq	.+84     	; 0x26ae <__ultoa_invert+0x5c>
    265a:	20 31       	cpi	r18, 0x10	; 16
    265c:	81 f1       	breq	.+96     	; 0x26be <__ultoa_invert+0x6c>
    265e:	e8 94       	clt
    2660:	6f 93       	push	r22
    2662:	6e 7f       	andi	r22, 0xFE	; 254
    2664:	6e 5f       	subi	r22, 0xFE	; 254
    2666:	7f 4f       	sbci	r23, 0xFF	; 255
    2668:	8f 4f       	sbci	r24, 0xFF	; 255
    266a:	9f 4f       	sbci	r25, 0xFF	; 255
    266c:	af 4f       	sbci	r26, 0xFF	; 255
    266e:	b1 e0       	ldi	r27, 0x01	; 1
    2670:	3e d0       	rcall	.+124    	; 0x26ee <__ultoa_invert+0x9c>
    2672:	b4 e0       	ldi	r27, 0x04	; 4
    2674:	3c d0       	rcall	.+120    	; 0x26ee <__ultoa_invert+0x9c>
    2676:	67 0f       	add	r22, r23
    2678:	78 1f       	adc	r23, r24
    267a:	89 1f       	adc	r24, r25
    267c:	9a 1f       	adc	r25, r26
    267e:	a1 1d       	adc	r26, r1
    2680:	68 0f       	add	r22, r24
    2682:	79 1f       	adc	r23, r25
    2684:	8a 1f       	adc	r24, r26
    2686:	91 1d       	adc	r25, r1
    2688:	a1 1d       	adc	r26, r1
    268a:	6a 0f       	add	r22, r26
    268c:	71 1d       	adc	r23, r1
    268e:	81 1d       	adc	r24, r1
    2690:	91 1d       	adc	r25, r1
    2692:	a1 1d       	adc	r26, r1
    2694:	20 d0       	rcall	.+64     	; 0x26d6 <__ultoa_invert+0x84>
    2696:	09 f4       	brne	.+2      	; 0x269a <__ultoa_invert+0x48>
    2698:	68 94       	set
    269a:	3f 91       	pop	r19
    269c:	2a e0       	ldi	r18, 0x0A	; 10
    269e:	26 9f       	mul	r18, r22
    26a0:	11 24       	eor	r1, r1
    26a2:	30 19       	sub	r19, r0
    26a4:	30 5d       	subi	r19, 0xD0	; 208
    26a6:	31 93       	st	Z+, r19
    26a8:	de f6       	brtc	.-74     	; 0x2660 <__ultoa_invert+0xe>
    26aa:	cf 01       	movw	r24, r30
    26ac:	08 95       	ret
    26ae:	46 2f       	mov	r20, r22
    26b0:	47 70       	andi	r20, 0x07	; 7
    26b2:	40 5d       	subi	r20, 0xD0	; 208
    26b4:	41 93       	st	Z+, r20
    26b6:	b3 e0       	ldi	r27, 0x03	; 3
    26b8:	0f d0       	rcall	.+30     	; 0x26d8 <__ultoa_invert+0x86>
    26ba:	c9 f7       	brne	.-14     	; 0x26ae <__ultoa_invert+0x5c>
    26bc:	f6 cf       	rjmp	.-20     	; 0x26aa <__ultoa_invert+0x58>
    26be:	46 2f       	mov	r20, r22
    26c0:	4f 70       	andi	r20, 0x0F	; 15
    26c2:	40 5d       	subi	r20, 0xD0	; 208
    26c4:	4a 33       	cpi	r20, 0x3A	; 58
    26c6:	18 f0       	brcs	.+6      	; 0x26ce <__ultoa_invert+0x7c>
    26c8:	49 5d       	subi	r20, 0xD9	; 217
    26ca:	31 fd       	sbrc	r19, 1
    26cc:	40 52       	subi	r20, 0x20	; 32
    26ce:	41 93       	st	Z+, r20
    26d0:	02 d0       	rcall	.+4      	; 0x26d6 <__ultoa_invert+0x84>
    26d2:	a9 f7       	brne	.-22     	; 0x26be <__ultoa_invert+0x6c>
    26d4:	ea cf       	rjmp	.-44     	; 0x26aa <__ultoa_invert+0x58>
    26d6:	b4 e0       	ldi	r27, 0x04	; 4
    26d8:	a6 95       	lsr	r26
    26da:	97 95       	ror	r25
    26dc:	87 95       	ror	r24
    26de:	77 95       	ror	r23
    26e0:	67 95       	ror	r22
    26e2:	ba 95       	dec	r27
    26e4:	c9 f7       	brne	.-14     	; 0x26d8 <__ultoa_invert+0x86>
    26e6:	00 97       	sbiw	r24, 0x00	; 0
    26e8:	61 05       	cpc	r22, r1
    26ea:	71 05       	cpc	r23, r1
    26ec:	08 95       	ret
    26ee:	9b 01       	movw	r18, r22
    26f0:	ac 01       	movw	r20, r24
    26f2:	0a 2e       	mov	r0, r26
    26f4:	06 94       	lsr	r0
    26f6:	57 95       	ror	r21
    26f8:	47 95       	ror	r20
    26fa:	37 95       	ror	r19
    26fc:	27 95       	ror	r18
    26fe:	ba 95       	dec	r27
    2700:	c9 f7       	brne	.-14     	; 0x26f4 <__ultoa_invert+0xa2>
    2702:	62 0f       	add	r22, r18
    2704:	73 1f       	adc	r23, r19
    2706:	84 1f       	adc	r24, r20
    2708:	95 1f       	adc	r25, r21
    270a:	a0 1d       	adc	r26, r0
    270c:	08 95       	ret

0000270e <_exit>:
    270e:	f8 94       	cli

00002710 <__stop_program>:
    2710:	ff cf       	rjmp	.-2      	; 0x2710 <__stop_program>
